#!/usr/bin/python
"""Read the contents of a directory containing DFT output and create a csv style file of information"""
import string
import re
import numpy as np
import os, sys
from Python.Constants import amu, PI, avogadro_si, wavenumber, angstrom
from Python.DielectricConstant import DielectricConstant
from Python.VaspOutputReader import VaspOutputReader
from Python.CastepOutputReader import CastepOutputReader
from Python.GulpOutputReader import GulpOutputReader
from Python.CrystalOutputReader import CrystalOutputReader
from Python.AbinitOutputReader import AbinitOutputReader
from Python.QEOutputReader import QEOutputReader



# Start processing the directories
if len(sys.argv) <= 1 :
    print('preader program [-eckart] [-neutral] [-intensities] [-crystal] filenames .....', file=sys.stderr)
    print('  -eckart projects out the translational components                           ', file=sys.stderr)
    print('  -neutral imposes neutrality on the Born charges of the molecule             ', file=sys.stderr)
    print('  -crystal imposes crystal14 symmetrisation of the hessian                    ', file=sys.stderr)
    print('  -intensities requests a calculation of the intensities                      ', file=sys.stderr)
    print('   any of -eckart -neutral or -crystal implies an intensity calculation       ', file=sys.stderr)
    exit()

observables=False
files = []

program = sys.argv[1]

eckart = False
neutral = False
hessian_symmetrisation = "symm"
global_calculate_intensities = False
for f in sys.argv[2:]:
    if f == "-observables":
        observables = True
    elif f == "-eckart":
        eckart = True
    elif f == "-neutral":
        neutral = True
    elif f == "-crystal":
        hessian_symmetrisation = "crystal"
    elif f == "-intensities":
        global_calculate_intensities = True
    else:
        files.append(f)
if eckart or neutral or hessian_symmetrisation == 'crystal':
    global_calculate_intensities = True

print('program is ',program,file=sys.stderr)
print('files are ',files,file=sys.stderr)
print('Eckart is ',eckart,file=sys.stderr)
print('Neutral is ',neutral,file=sys.stderr)
print('Hessian symmetrisation is ',hessian_symmetrisation,file=sys.stderr)

print('directory,electrons,magnetization,kpnts,kpnt_1,kpnt_2,kpnt_3,energy_cutoff_eV,final_free_energy_eV,final_energy_without_entropy_eV,pressure_GPa,a_A,b_A,c_A,alpha,beta,gamma,volume,eps0_xx,eps0_yy,eps0_zz,eps0_xy,eps0_xz,eps0_yz,epsinf_xx,epsinf_yy,epsinf_zz,epsinf_xy,epsinf_xz,epsinf_yz, c11_gpa, c22_gpa, c33_gpa, c44_gpa, c55_gpa, c66_gpa, c12_gpa,  c13_gpa, c23_gpa, f1_cm1, f2_cm1, f3_cm1, f4_cm1, f5_cm1, f6_cm1')
files.sort()
for name in files :
    calculate_intensities = global_calculate_intensities
    fulldirname = name
    head,tail = os.path.split(fulldirname)
    root,ext = os.path.splitext(tail)
    if program == "castep":
        names = [ name ]
        reader = CastepOutputReader( names )
    elif program == "vasp":
        name1 = os.path.join(head,'OUTCAR')
        name2 = os.path.join(head,'KPOINTS')
        names = [ name1, name2 ]
        reader = VaspOutputReader( names )
    elif program == "gulp":
        names = [ name ]
        reader = GulpOutputReader( names )
    elif program == "crystal":
        names = [ name ]
        reader = CrystalOutputReader( names )
    elif program == "abinit":
        names = [ name ]
        reader = AbinitOutputReader( names )
    elif program == "qe":
        tail1 = root+'.dynG'
        tail2 = root+'.log'
        tail3 = root+'.out'
        name1 = os.path.join(head,tail1)
        name2 = os.path.join(head,tail2)
        name3 = os.path.join(head,tail3)
        name4 = os.path.join(head,tail)
        names = []
        for n in [ name1, name2, name3, name4 ]:
            if os.path.isfile(n): names.append(n)
        names = list(set(names))
        reader = QEOutputReader( names )
    else:
        print('Program name not recognized',program,file=sys.stderr)
        exit()
    print('Analysing ',names, file=sys.stderr)

    reader.eckart = eckart
    reader.neutral = neutral
    reader.hessian_symmetrisation = hessian_symmetrisation
    reader.read_output()
    frequencies = reader.frequencies
    if len(frequencies) < 3:
        calculate_intensities = False
    calculator = DielectricConstant()
    calculator.set_reader(reader)
    # Only calculate the intensities if asked to or if the flags eckart/neutral or symmetrised hessian are set
    if calculate_intensities:
        masses = np.array(reader.masses) * amu
        # Get the born charges
        born_charges = np.array(reader.born_charges)
        # Calculate the mass weighted normal modes.  This just forces projection 
        mass_weighted_normal_modes = reader.calculate_mass_weighted_normal_modes()
        normal_modes = calculator.normal_modes(masses, mass_weighted_normal_modes)
        # from the normal modes and the born charges calculate the oscillator strengths of each mode
        oscillator_strengths = calculator.oscillator_strengths(normal_modes, born_charges)
        # calculate the intensities from the trace of the oscillator strengths
        intensities = calculator.infrared_intensities(oscillator_strengths)
        modified_frequencies = reader.frequencies
        modified_frequencies.sort()
    # Continue reading any data from the output file
    frequencies.sort()
    unitCell = reader.unit_cells[-1]
    a,b,c,alpha,beta,gamma = unitCell.convert_unitcell_to_abc()
    eps0   = np.array(reader.zerof_static_dielectric)
    epsinf = np.array(reader.zerof_optical_dielectric)
    eps0_xx = str(eps0[0,0])
    eps0_yy = str(eps0[1,1])
    eps0_zz = str(eps0[2,2])
    eps0_xy = str(( eps0[0,1] + eps0[1,0] ) /2.0)
    eps0_xz = str(( eps0[0,2] + eps0[2,0] ) /2.0)
    eps0_yz = str(( eps0[1,2] + eps0[2,1] ) /2.0)
    epsinf_xx = str(epsinf[0,0])
    epsinf_yy = str(epsinf[1,1])
    epsinf_zz = str(epsinf[2,2])
    epsinf_xy = str(( epsinf[0,1] + epsinf[1,0] ) /2.0)
    epsinf_xz = str(( epsinf[0,2] + epsinf[2,0] ) /2.0)
    epsinf_yz = str(( epsinf[1,2] + epsinf[2,1] ) /2.0)
    volume = str(reader.volume)
    carray = np.array(reader.elastic_constants)
    c11 = str(carray[0,0])
    c22 = str(carray[1,1])
    c33 = str(carray[2,2])
    c44 = str(carray[3,3])
    c55 = str(carray[4,4])
    c66 = str(carray[5,5])
    c12 = str(carray[0,1])
    c13 = str(carray[0,2])
    c23 = str(carray[1,2])
    # Assemble the output line for the unprojected frequencies and all the other data
    string = fulldirname
    string = string + ',' + str(reader.electrons)
    string = string + ',' + str(reader.magnetization)
    string = string + ',' + str(reader.kpoints)
    string = string + ',' + str(reader.kpoint_grid[0])
    string = string + ',' + str(reader.kpoint_grid[1])
    string = string + ',' + str(reader.kpoint_grid[2])
    string = string + ',' + str(reader.energy_cutoff)
    string = string + ',' + str(reader.final_free_energy)
    string = string + ',' + str(reader.final_energy_without_entropy)
    string = string + ',' + str(reader.pressure)
    string = string + ',' + str(a) + ',' + str(b) + ',' + str(c) + ',' + str(alpha) + ',' + str(beta) + ',' + str(gamma) + ',' + volume
    string = string + ',' + eps0_xx + ',' + eps0_yy + ',' + eps0_zz + ',' + eps0_xy + ',' + eps0_xz + ',' + eps0_yz
    string = string + ',' + epsinf_xx + ',' + epsinf_yy + ',' + epsinf_zz + ',' + epsinf_xy + ',' + epsinf_xz + ',' + epsinf_yz
    string = string + ',' + c11 + ',' + c22 + ',' + c33 + ',' + c44 + ',' + c55 + ',' + c66
    string = string + ',' + c12 + ',' + c13 + ',' + c23
    for f in frequencies:
        string = string + ',' + str(f)
    print(string)
    # Assemble the next line if any of eckart/neutral/symm have been used
    if calculate_intensities and ( eckart or neutral or hessian_symmetrisation=='crystal' ) :
        option_string = ''
        if eckart : option_string += 'eckart '
        if neutral : 
            if not option_string == '' :
                option_string += '+'
            option_string += 'neutral '
        if hessian_symmetrisation == 'crystal' : 
            if not option_string == '' :
                option_string += '+'
            option_string += 'crystal_hessian_symmetrisation '
        string = fulldirname+'_'+option_string
        for i in range(37):
            string = string + ',' 
        string = string + ',' + option_string
        for f in modified_frequencies:
            string = string + ',' + str(f)
        print(string)
    # Assemble the next lines if intensities have been requested
    if calculate_intensities :
        option_string = 'Intensities (Debye2/Angs2/amu)'
        string = fulldirname+'_'+option_string
        for i in range(37):
            string = string + ',' 
        string = string + ',' + option_string
        for f in intensities:
            string = string + ',' + str(f)
        print(string)
        option_string = 'Integrated Molar Absorption (L/mole/cm/cm)'
        string = fulldirname+'_'+option_string
        for i in range(37):
            string = string + ',' 
        string = string + ',' + option_string
        for f in intensities:
            string = string + ',' + str(f*4225.6)
        print(string)
        
        
    if observables:
        filename = directory+'.observables'
        if directory == '.' :
            filename = 'dot.observables'
        filename = filename.replace("/","_")
        print('filename', filename, file=sys.stderr)
        fd = open(filename,'w')
        print('observables', file=fd)
        if eps0[0,0] != 0.0 :
            print('sdlc', file=fd)
            print('1 1 ', eps0[0,0], file=fd)
            print('sdlc', file=fd)
            print('2 2 ', eps0[1,1], file=fd)
            print('sdlc', file=fd)
            print('3 3 ', eps0[2,2], file=fd)
            print('hfdlc', file=fd)
            print('1 1 ', epsinf[0,0], file=fd)
            print('hfdlc', file=fd)
            print('2 2 ', epsinf[1,1], file=fd)
            print('hfdlc', file=fd)
            print('3 3 ', epsinf[2,2], file=fd)
        if carray[0,0] != 0.0:
            print('elastic', file=fd)
            print('1 1 ', carray[0,0], file=fd)
            print('elastic', file=fd)
            print('2 2 ', carray[1,1], file=fd)
            print('elastic', file=fd)
            print('3 3 ', carray[2,2], file=fd)
            print('elastic', file=fd)
            print('4 4 ', carray[3,3], file=fd)
            print('elastic', file=fd)
            print('5 5 ', carray[4,4], file=fd)
            print('elastic', file=fd)
            print('6 6 ', carray[5,5], file=fd)
            print('elastic', file=fd)
            print('1 2 ', carray[0,1], file=fd)
            print('elastic', file=fd)
            print('1 3 ', carray[0,2], file=fd)
            print('elastic', file=fd)
            print('2 3 ', carray[1,2], file=fd)
        nfreq = len(frequencies)
        if nfreq > 4 :
            for n in range(nfreq):
                nlast = n
                if frequencies[n].real > 1.0E-6:
                    break
                # end of if
            # end of for
            if frequencies[nlast].real > 1.0E-8 :
                n = nlast 
                print('frequency', nfreq - nlast, file=fd)
                for f in frequencies[nlast:] :
                    n = n + 1
                    print(n, f, file=fd)
        print('end', file=fd)
        fd.close()
  
