#!/usr/bin/python
"""Read the contents of a directory containing DFT output and create a csv style file of information"""
import string
import re
import numpy as np
import os, sys
from Python.Constants import amu, PI, avogadro_si, wavenumber, angstrom, isotope_masses, average_masses
from Python.DielectricConstant import DielectricConstant
from Python.VaspOutputReader import VaspOutputReader
from Python.CastepOutputReader import CastepOutputReader
from Python.GulpOutputReader import GulpOutputReader
from Python.CrystalOutputReader import CrystalOutputReader
from Python.AbinitOutputReader import AbinitOutputReader
from Python.QEOutputReader import QEOutputReader
from Python.PhonopyOutputReader import PhonopyOutputReader



# Start processing the directories
if len(sys.argv) <= 1 :
    print('pmonitor -program program [-eckart] filenames .....', file=sys.stderr)
    print('  \"program\" must be one of \"abinit\", \"castep\", \"crystal\", \"gulp\"       ', file=sys.stderr)
    print('           \"phonopy\", \"qe\", \"vasp\"                                         ', file=sys.stderr)
    print('           Monitor the progress of the QM calculations                           ', file=sys.stderr)
    exit()

files = []
tokens = sys.argv[1:]
ntokens = len(tokens)-1
itoken = -1
program = ''
qmprogram = ''
while itoken < ntokens:
    itoken += 1
    token = tokens[itoken]
    if token == "-program":
        itoken += 1
        program = tokens[itoken]
        if program == 'phonopy':
            itoken += 1
            qmprogram = tokens[itoken]
    else:
        files.append(token)

if len(program) < 1:
    print('Please use -program to define the package used to generate the output files',file=sys.stderr)
    exit()

if not program in ['abinit','castep','crystal','gulp','qe','vasp','phonopy']:
    print('Program is not recognised: ',program,file=sys.stderr)
    exit()

if program == 'phonopy':
    if not qmprogram in ['abinit','castep','crystal','gulp','qe','vasp']:
        print('Phonopy QM program is not recognised: ',qmprogram,file=sys.stderr)
        exit()
    print('QM program used by Phonopy is: ',qmprogram,file=sys.stderr)

print('Program is ',program,file=sys.stderr)

for f in files:
    if not os.path.isfile(f):
        print('Error file requested for analysis does not exist',f,file=sys.stderr)
        exit()
print('Files are ',files,file=sys.stderr)
for name in files :
    fulldirname = name
    head,tail = os.path.split(fulldirname)
    root,ext = os.path.splitext(tail)
    if program == "castep":
        names = [ name ]
        reader = CastepOutputReader( names )
    elif program == "vasp":
        name1 = os.path.join(head,'OUTCAR')
        name2 = os.path.join(head,'KPOINTS')
        names = [ name1, name2 ]
        reader = VaspOutputReader( names )
    elif program == "gulp":
        names = [ name ]
        reader = GulpOutputReader( names )
    elif program == "crystal":
        names = [ name ]
        reader = CrystalOutputReader( names )
    elif program == "abinit":
        names = [ name ]
        reader = AbinitOutputReader( names )
    elif program == "qe":
        tail1 = root+'.dynG'
        tail2 = root+'.log'
        tail3 = root+'.out'
        name1 = os.path.join(head,tail1)
        name2 = os.path.join(head,tail2)
        name3 = os.path.join(head,tail3)
        name4 = os.path.join(head,tail)
        names = []
        for n in [ name1, name2, name3, name4 ]:
            if os.path.isfile(n): names.append(n)
        names = list(set(names))
        reader = QEOutputReader( names )
    elif program == "phonopy":
        # The order is important
        pname1 = os.path.join(head,'qpoints.yaml')
        pname2 = os.path.join(head,'phonopy.yaml')
        # Only works for VASP at the moment
        vname1 = os.path.join(head,'OUTCAR')
        vname2 = os.path.join(head,'KPOINTS')
        pnames = [ pname1, pname2 ]
        vnames = [ vname1, vname2 ]
        pnames.extend(vnames)
        names = pnames
        # Which QM program was used by PHONOPY?
        if qmprogram == "castep":
            print("Error in qmreader",qmprogram)
            exit()
            qmreader = CastepOutputReader(names)
        elif qmprogram == "vasp":
            qmreader = VaspOutputReader(vnames)
        elif qmprogram == "gulp":
            print("Error in qmreader",qmprogram)
            exit()
            qmreader = GulpOutputReader(names)
        elif qmprogram == "crystal":
            print("Error in qmreader",qmprogram)
            exit()
            qmreader = CrystalOutputReader(names)
        elif qmprogram == "abinit":
            print("Error in qmreader",qmprogram)
            exit()
            qmreader = AbinitOutputReader(names)
        elif qmprogram == "qe":
            print("Error in qmreader",qmprogram)
            exit()
            qmreader = QEOutputReader(names)
        # The QM reader is used to get info about the QM calculation
        reader = PhonopyOutputReader(pnames,qmreader)
    else:
        print('Program name not recognized',program,file=sys.stderr)
        exit()

    print('Analysing ',names, file=sys.stderr)
    reader.read_output()
    iterations = reader.iterations
    for f in iterations:
        for r in iterations[f]:
            print("{} {}".format(f,r))
        # end for r
    # end for f
