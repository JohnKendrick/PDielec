:py:mod:`PDielec.pickled_reader`
================================

.. py:module:: PDielec.pickled_reader

.. autoapi-nested-parse::

   Read the contents of a directory containing DFT output and create a pickled filed



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   PDielec.pickled_reader.main
   PDielec.pickled_reader.print_help



Attributes
~~~~~~~~~~

.. autoapisummary::

   PDielec.pickled_reader.version


.. py:function:: main()

   Main program entry point.

    his function reads a serialized object from a pickle file specified as the first command line argument. It deserializes objects from the file until it reaches the end of the file and then iterates through these objects, printing their details and the details of their last unit cell.

   The expected structure for the serialized objects (readers) should have attributes `type`, `names`, and `unit_cells`, and must have a `print()` method. The `unit_cells` attribute is expected to be a list, where each element has a `print()` method as well.

   Parameters
   ----------
   This function does not accept any parameters directly but expects at least one argument from the command line:

   1. The path to the pickle file as the first command line argument.

   Raises
   ------
   FileNotFoundError
       If the specified pickle file does not exist.

   EOFError
       If there is an issue with reading the file to its end. This exception is caught and handled within the function.

   Any exception related to deserialization issues with `pickle.load()` is also caught and should be handled as per the application's needs.

   Note
   ----
   The function requires the 'sys' and 'pickle' modules to be imported.


.. py:function:: print_help()

   Print help information to standard error and exit the program.

   This function prints out instructions for using a command-line tool that reads in a pickled file. The file should have been created with a specific flag ('-pickle') using the 'preader' command. It also outputs the version of the program.

   No parameters are accepted or required by this function.

   The function uses `sys.stderr` to print messages, ensuring that they are output to the standard error stream rather than the standard output. This is useful for separating actual program output from error or help messages.

   The function explicitly calls `exit()`, which terminates the program execution. This is used here to halt further execution after displaying the help information.


.. py:data:: version

   

