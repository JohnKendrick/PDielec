PDielec.MaterialsOutputReader
=============================

.. py:module:: PDielec.MaterialsOutputReader

.. autoapi-nested-parse::

   Read the dielectric information for a Materials database.



Classes
-------

.. autoapisummary::

   PDielec.MaterialsOutputReader.MaterialsOutputReader


Module Contents
---------------

.. py:class:: MaterialsOutputReader(names)

   Bases: :py:obj:`PDielec.GenericOutputReader.GenericOutputReader`


   Read the dielectric information from a materials database

   Inherits from :class:`~PDielec.GenericOutputReader.GenericOutputReader`

   Parameters
   ----------
   names : Various types
       Initial parameter used for construction, typically a string or list of identifiers that this instance will process or hold.

   Attributes
   ----------
   type : str
       A string indicating the type of output, set to 'Experimental output'.
   _ion_type_index : dict
       A dictionary to index ion types, initialized as empty.
   CrystalPermittivity : NoneType or Various types
       Initially None, intended to hold information about crystal permittivity.


   .. py:method:: _read_constant_model(line)

      Read in a full constant dielectric tensor 3 values on each line.

      Parameters
      ----------
      line : str
          Line to be read (not used)

      Returns
      -------
      None




   .. py:method:: _read_cpk_coords(line)

      Read CPK coordinates from a given line and update class attributes accordingly.

      The coordinates are assumed to be in Angstrom

      Parameters
      ----------
      line : str
          The initial line input to start reading CPK coordinates from.

      Returns
      -------
      None

      Notes
      -----
      - This method directly modifies several attributes of the class instance it 
        belongs to, including lists of species, ions, and masses, as well as data 
        structures related to unit cells.

      - This method utilizes `self.nspecies`, `self.nions`, `self.species`, `self.masses_per_type`,
        `self._ion_type_index`, `self.ions_per_type`, `self.atom_type_list`, `self.masses`, 
        `self.unit_cells`, `self.oscillator_strengths`, and `self.frequencies` as 
        relevant attributes that get updated.

      - Initial coordinates and species names for each unit cell are eventually encapsulated 
        in `self.unit_cells` with their respective setter methods.

      - The method is designed to handle CPK format data incrementally, assuming that the 
        beginning of a new entry is marked by a line that doesn't start with '&end' or 'end'.

      Raises
      ------




   .. py:method:: _read_cpk_lattice_vectors(line)

      Process a cpk input file with cell information.

      The lattice vectors are assumed to be in Angstrom

      Parameters
      ----------
      line : str
          Line to be processed (not used)

      Returns
      -------
      None




   .. py:method:: _read_drude_lorentz_model(line)

      Read in the drude_lorentz model parameters.

      Parameters
      ----------
      line : str
          line to be read

      Returns
      -------
      None

      Notes
      -----
      A simple example of a 2 oscillator model is given below. All units are in cm-1.

      ```
      drude-lorentz
      xx  1
      413.7 1050.0  22.2
      yy  1
      413.7 1050.0  22.2
      zz  1
      413.7 1050.0  22.2
      ```




   .. py:method:: _read_fpsq_model(line)

      Read in the fpsq model parameters.

      There is a separator between each diagonal contribution to the permittivity.

      Parameters
      ----------
      line : str
          Line to be processed

      Returns
      -------
      None

      Notes
      -----
      The input format is expected to follow the example below for alpha quartz: ::

          epsxx 4 # 1.5K Data # A2 Phonon modes
            360.7     1.5        384.8    1.5
            497.9     3.1        553.6    2.8
            773.7     5.4        789.9    6.3
           1073.0     6.2       1238.7   12.4
          epsyy 4
            360.7     1.5        384.8    1.5
            497.9     3.1        553.6    2.8
            773.7     5.4        789.9    6.3
           1073.0     6.2       1238.7   12.4
          epszz 6 # E Phonon modes
            391.5     1.5        403.0    1.5
            454.0     2.6        510.5    1.5
            695.9     4.9        698.4    4.0
            797.2     4.8        810.0    4.3
           1063.7     6.1       1230.7    8.2
           1157.2     6.2       1154.9    6.1

      Each section starts with `epsxx`, `epsyy`, or `epszz` followed by the number of modes. 
      After that, data lines include mode frequencies and corresponding contributions.

      Returns
      -------
      None




   .. py:method:: _read_fractional_coordinates(line)

      Read and process fractional coordinates from a string line.

      This method reads a string representing a line containing the number of ions followed by the fractional coordinates and species of each ion. It updates the instance variables associated with the ions' type, position, mass, and further initializes oscillator strengths and frequencies arrays if they haven't been initialized yet.

      Parameters
      ----------
      line : str
          The line from which the number of ions and their fractional coordinates will be extracted. The line format is expected to be 'num_ions species x y z' for each ion, where 'num_ions' is the total number of ions, 'species' is the species identifier, and 'x y z' are the fractional coordinates.

      Returns
      -------
      None

      Notes
      -----
      This method updates several instance variables:
      - `nions`: The total number of ions as determined from `line`.
      - `ions_per_type`: A list that tracks the number of ions per species.
      - `masses`: A list of masses for each ion, ordered accordingly.
      - `atom_type_list`: A list mapping each ion to its species index.
      - `unit_cells[-1]`: The coordinates and element names for ions in the most recent unit cell are set based on the processed line.
      - Oscillator strengths `oscillator_strengths` and frequencies `frequencies` arrays are initialized as zero arrays if they haven't been already.

      Exceptions related to file reading or value conversion within the method are implicitly assumed to be handled outside of its scope.




   .. py:method:: _read_frequencies(line)

      Read frequencies and oscillator strengths from a line and append them to the object's attributes.

      Parameters
      ----------
      line : str
          A string containing the frequency count, followed by lines of frequencies and strengths.

      Returns
      -------
      None.

      Notes
      -----
      This method reads the 'nfreq' (number of frequencies) from the initial given line. Then, for each frequency, it reads
      the corresponding line to extract the frequency and its oscillator strength. These values are stored in the object's
      'frequencies' and 'oscillator_strengths' lists, respectively. Each oscillator strength is initialized as a diagonal
      tensor with identical values across the diagonal.

      The method assumes 'line' is in a specific format, where the first entry in a line after splitting is the frequency
      and the second entry is the oscillator strength. It also uses '_read_line' method, which is not defined in the snippet,
      to read each subsequent line for the frequencies and their oscillator strengths. Furthermore, 'initialise_diagonal_tensor'
      is used to convert the scalar strength values into tensor form, which is not detailed here.




   .. py:method:: _read_interpolate1_model(line)

      Read in a tabulated permittivity and use it for interpolation.

      Only a single permittivity is given (real & imaginary) which is taken to be isotropic

      Parameters
      ----------
      line : str
          Line to be read (not used)

      Returns
      -------
      None




   .. py:method:: _read_interpolate3_model(line)

      Read in a tabulated permittivity and use it for interpolation.

      Three permittivities are given from the diagonal components of the tensor

      Parameters
      ----------
      line : str
          Line to be read (not used)

      Returns
      -------
      None




   .. py:method:: _read_interpolate6_model(line)

      Read in a tabulated permittivity and use it for interpolation.

      This is a full 6 parameter permittivity matrix

      Parameters
      ----------
      line : str
          Line to be read

      Returns
      -------
      None




   .. py:method:: _read_lattice_vectors(line)

      Read and process lattice vectors from an input line, then updates internal structures with the new unit cell.

      This method is intended to parse a series of lines that describe lattice vectors, scale them appropriately, and update the object's list of unit cells as well as other relevant properties like volume and, optionally, crystal permittivity.
      The lattice vectors are assumed to be in Angstrom

      Parameters
      ----------
      line : str
          The first line from which to begin reading the lattice vector information.

      Returns
      -------
      None

      See Also
      --------
      UnitCell : A class or function used to represent and manipulate unit cell information.




   .. py:method:: _read_line()

      Read and return the next non-comment, non-empty line from the file.

      This method reads lines from a file, skipping over any lines that are
      either empty, contain only whitespace, or start with the '#' character
      (indicating a comment).

      Parameters
      ----------
      None

      Returns
      -------
      str
          The next non-empty, non-comment line from the file. If the end of the
          file is reached, the returned string will be empty.

      Notes
      -----
      - Lines consisting solely of whitespace characters (spaces, tabs, newlines) are considered empty.




   .. py:method:: _read_output_files()

      Define the search strings and read the Experiment files in the directory.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: _read_species(line)

      Read species information from a line.

      Parameters
      ----------
      line : str
          A string containing the number of species followed by species' information in subsequent lines.

      Returns
      -------
      None

      Notes
      -----
      This function updates the object's `species`, `masses_per_type`, and `ion_type_index` attributes with the information read from the input line(s). Initially, it reads the total number of species from the first line. Then, for each species, it reads its name and mass, appends these to the `species` and `masses_per_type` lists, respectively, and updates the `ion_type_index` dictionary to map the species name to its type index. The `nspecies` attribute is updated with the current number of species after each iteration.




   .. py:method:: _read_static_dielectric(line)

      Read and process static dielectric data.

      Parameters
      ----------
      line : str
          Not used but overwritten

      Returns
      -------
      None

      Notes
      -----
      This method is designed to be used within a class that handles reading and processing
      simulation output data. It assumes access to a `_read_line` method which reads individual
      lines from the output, and potentially a `CrystalPermittivity` object for storing results.
      This method processes three lines of dielectric data, converts them into complex numbers,
      and checks if the imaginary part of the overall dielectric constant is negligible. If it is,
      the dielectric constant is treated as real. The result is stored in the class instance and,
      if applicable, updates the `CrystalPermittivity` object's epsilon infinity value.

      Raises
      ------
      ValueError
          If the input lines cannot be converted into complex numbers.




   .. py:method:: calculate_mass_weighted_normal_modes()

      Calculate the mass weight normal modes.

      Parameters
      ----------
      None

      Returns
      -------
      np.array
          Returns an array for the mass weighted normal modes which in this case is zero
          The array has a shape 3*nions, nions, 3




   .. py:attribute:: CrystalPermittivity
      :value: None



   .. py:attribute:: type
      :value: 'Materials database'



