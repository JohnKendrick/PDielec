:py:mod:`PDielec.DielectricFunction`
====================================

.. py:module:: PDielec.DielectricFunction

.. autoapi-nested-parse::

   DielectricFunction

   Provides an interface to different mechanisms for providing dielectric information

   - Base class :class:`DielectricFunction`

       - Subclass :class:`ConstantTensor`
       - Subclass :class:`ConstantScalar`
       - Subclass :class:`TabulateScalar`
       - Subclass :class:`Tabulate1`
       - Subclass :class:`Tabulate3`
       - Subclass :class:`Tabulate6`
       - Subclass :class:`DFT`
       - Subclass :class:`DrudeLorentz`
       - Subclass :class:`FPSQ`
       - Subclass :class:`Sellmeier`



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   PDielec.DielectricFunction.ConstantScalar
   PDielec.DielectricFunction.ConstantTensor
   PDielec.DielectricFunction.DFT
   PDielec.DielectricFunction.DielectricFunction
   PDielec.DielectricFunction.DrudeLorentz
   PDielec.DielectricFunction.FPSQ
   PDielec.DielectricFunction.Sellmeier
   PDielec.DielectricFunction.Tabulate1
   PDielec.DielectricFunction.Tabulate3
   PDielec.DielectricFunction.Tabulate6
   PDielec.DielectricFunction.TabulateScalar




.. py:class:: ConstantScalar(value)


   Bases: :py:obj:`DielectricFunction`

   A complex constant scalar permittivity

   Inherits from DielectricFunction. Provides a calculate() function to return
   the permittivity.  Epsilon infinity is not used for this function.

   Methods
   -------
   calculate()
       Calculates and returns the permittivity of the dielectric function.

   .. py:method:: calculate(v)

      Calculate the permittivity at a specified frequency.

      Parameters
      ----------
      v : float
          The frequency at which to calculate the permittivity.

      Returns
      -------
      float
          The permittivity at frequency v.



.. py:class:: ConstantTensor(value)


   Bases: :py:obj:`DielectricFunction`

   A complex constant tensor permittivity

   Inherits from DielectricFunction.
   Provides a calculate() function to return the permittivity.
   Epsilon infinity is used to calculate the total permittivity

   Methods
   -------
   calculate()
       Calculates and returns the permittivity.

   Example
   ------- ::

       permittivity = np.array([ [ 2.0, 0.0, 0.0 ] , [ 0.0, 3.0, 0.0 ], [ 0.0, 0.0, 4.0 ] ])
       df = ConstantTensor(permittivity)
       newMaterial = Material('New material name',permittivityObject=df,cell=UnitCell(2, 2, 2))


   .. py:method:: calculate(v)

      Calculate the permittivity at a given frequency.

      Parameters
      ----------
      v : float
          The frequency in internal units.

      Returns
      -------
      ndarray
          The permittivity at frequency v as a 3x3 tensor.



.. py:class:: DFT(mode_list, mode_frequencies, mode_sigmas, mode_oscillator_strengths, crystal_volume, drude, drude_plasma, drude_sigma)


   Bases: :py:obj:`DielectricFunction`

   A complex tensor permittivity from a DFT calculation

   Inherits from DielectricFunction.
   Suitable for use in calculating the permittivity from DFT calculations.
   Internal units for this function are atomic units.
   Provides a calculate() function to return the permittivity.
   Epsilon infinity is included in the total permittivity

   Methods
   -------
   calculate()
       Returns the permittivity based on the DFT calculations.

   Notes
   -----
   The internal units for all calculations within this class are atomic units.

   .. py:method:: calculate(v)

      Calculate the permittivity at a given frequency.

      Parameters
      ----------
      v : float
          The frequency in cm-1.

      Returns
      -------
      ndarray
          The permittivity at frequency v as a 3x3 tensor.


   .. py:method:: getFrequencies()

      Returns the frequencies of a DFT permittivity

      The frequencies are in units of cm-1

      Parameters
      ----------
      None

      Returns
      -------
      1d array of floats
          The frequencies in cm-1



   .. py:method:: getOscillatorStrengths()

      Returns the oscillator strengths of a DFT permittivity

      The returned strengths are in units of cm-1

      Parameters
      ----------
      None

      Returns
      -------
      3x3 array of floats for each frequency
          The oscillator strengths in cm-1



   .. py:method:: getSigmas()

      Returns the sigma parameters of a DFT permittivity

      The returned sigmas are in units of cm-1

      Parameters
      ----------
      None

      Returns
      -------
      1d array of floats
          The sigma parameters of  Drude-Lorentzian permittivity



   .. py:method:: setFrequencies(frequencies)

      Sets the frequencies of a DFT permittivity

      The frequencies are converted to atomic units

      Parameters
      ----------
      strengths : 1d array of floats
          The frequencies in cm-1

      Returns
      -------
      None



   .. py:method:: setOscillatorStrengths(strengths)

      Sets the oscillator strengths of a DFT permittivity

      The oscillator strengths are converted to atomic units

      Parameters
      ----------
      strengths : 3x3 array for each frequency
          The oscillator strengths parameters in cm-1

      Returns
      -------
      None



   .. py:method:: setSigmas(sigmas)

      Sets the sigma parameters of a DFT permittivity

      The sigmas parameter is converted to atomic units

      Parameters
      ----------
      sigmas : 1d array of floats
          The sigma parameters in cm-1

      Returns
      -------
      None




.. py:class:: DielectricFunction


   A base class to different dielectric functions.

   There is a close relationship between the dielectric function and a material.
   The Material module allows data to be read in for different dielectric models.
   Once the data has been read in a DielectricFunction is created which is appropriate for the data.
   The tensor and scalar versions of the functions behave differently with respect to 
   epsilon infinity: tensor functions add epsilon infinity to the calculated permittivity, scalar functions do not.

   Attributes
   ----------
   epsilon_infinity : ndarray
       A 3x3 tensor (numpy array) representing the optical permittivity.
   volume : float
       Volume of crystal unit cells.
   volume_au : float
       Volume of crystal unit cells in atomic units.
   vs_cm1 : ndarray
       An array of floats representing the frequencies of any tabulation.
   isScalarFunction : bool
       True if this function is a scalar function, False otherwise.

   Methods
   -------
   setVolume(volume)
       Change the unit cell volume.
   setEpsilonInfinity(eps)
       Change epsilon infinity.
   function()
       Return the calculate function for this object.
   calculate(v)
       Return the value of the permittivity at frequency v.
   setFrequencies(frequencies)
       Set frequencies 
   getFrequencies()
       Get frequencies 
   setSigmas(sigmas)
       Set sigmas 
   getSigmas()
       Get sigmas 
   setOscillatorStrengths(strengths)
       Set strengths 
   getOscillatorStrengths()
       Get strengths 
   dielectricContributionsFromDrude(f, frequency, sigma, volume)
       Calculates permittivity from a Drude Model.
   dielectricContributionsFromModes(f, modes, frequencies, sigmas, strengths, volume)
       Calculates permittivity from a Drude-Lorentz model.

   .. py:attribute:: possible_epsTypes
      :value: ['dft', 'fpsq', 'drude-lorentz', 'sellmeier']

      

   .. py:method:: dielectriContributionsFromDrude(f, frequency, sigma, volume)

      Calculate the dielectric function for a set of a Drude oscillator

      The units of the parameters must be self-consistent.  Atomic units is a good choice.

      Parameters
      ----------
      f : float
          The frequency of the dielectric response.
      frequency : float
          The frequency of the drude oscillator.
      sigma : float
          The width of the oscillator.
      volume : float
          The volume of the cell

      Returns
      -------
      tensor (3x3)
          A complex scalar dielectric.


   .. py:method:: dielectriContributionsFromModes(f, modes, frequencies, sigmas, strengths, volume)

      Calculate the dielectric function for a set of modes.

      Parameters
      ----------
      modes : list of int
          A list of the modes to be considered.
      frequencies : list of float
          The frequency of each mode.
      sigmas : list of float
          The width of each mode.
      strengths : list of float
          The strengths of each mode.
      volume : float
          The volume of the cell

      Returns
      -------
      tensor (3x3)
          A complex scalar representing the dielectric function.


   .. py:method:: function()

      Return the function used to calculate the permittivity.

      Parameters
      ----------
      None

      Returns
      -------
      a function


   .. py:method:: getFrequencies()

      Returns the frequencies of a Lorentzian permittivity

      The default is to return None, only return an array if the permittivity is Lorentzian

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: getHighestFrequency()

      Return the highest tabulated frequency in cm-1.

      Parameters
      ----------
      None

      Returns
      -------
      float
          The highest tabulated frequency in cm-1.


   .. py:method:: getLowestFrequency()

      Returns the lowest tabulated frequency in cm-1.

      Parameters
      ----------
      None

      Returns
      -------
      The lowest tabulated frequency in cm-1.


   .. py:method:: getOscillatorStrengths()

      Returns the oscillator strengths of a Lorentzian permittivity

      The default is to return None, only return an array if the permittivity is Lorentzian

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: getSigmas()

      Returns the sigma parameters of a Lorentzian permittivity

      The default is to return None, only return an array if the permittivity is Lorentzian

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: isScalar()

      Returns true if the dielectric function is a scalar

      Parameters
      ----------
      None

      Returns
      -------
      bool
          True if the dielectric function returns a scalar value, False otherwise.


   .. py:method:: isTensor()

      Returns true if the dielectric function is a tensor

      Parameters
      ----------
      None

      Returns
      -------
      bool
          True if the dielectric function returns a tensor, otherwise False.


   .. py:method:: print(v1_cm1, v2_cm1, v_inc=1, diagonal_only=True, file=None)

      Print the permittivity over a range of frequencies to a file

      Parameters
      ----------
      v1_cm1 : float
          Starting frequency
      v2_cm1 : float
          Finishing frequency
      v_inc : float, optional
          Incrementing frequency, default is 1
      diagonal_only: bool,optional
          If true only the diagonal values are printed
      file : str, optional
          Filename for printing.  If 'None' then stdout is used

      Returns
      -------
      None


   .. py:method:: setEpsilonInfinity(eps)

      Set epsilon infinity for dielectric calculations.

      Parameters
      ----------
      eps : tensor (3x3)
          The value of eps_infinity.

      Returns
      -------
      None


   .. py:method:: setFrequencies(frequencies)

      Sets the frequencies of a Lorentzian permittivity

      The default is to print an error message unless the DielectricFunction is a Lorentzian

      Parameters
      ----------
      frequencies : 1d array of floats
          The frequencies in cm-1

      Returns
      -------
      None



   .. py:method:: setOscillatorStrengths(strengths)

      Sets the oscillator strengths of a Lorentzian permittivity

      The default is to print an error message unless the DielectricFunction is a Lorentzian

      Parameters
      ----------
      strengths : 1d array of floats
          The oscillator strengths in cm-1

      Returns
      -------
      None



   .. py:method:: setSigmas(sigmas)

      Sets the sigma parameters of a Lorentzian permittivity

      The default is to print an error message unless the DielectricFunction is a Lorentzian

      Parameters
      ----------
      sigma : 1d array of floats
          The sigma parameters in cm-1

      Returns
      -------
      None



   .. py:method:: setVolume(volume)

      Set the volume for dielectric calculations.

      Parameters
      ----------
      volume : float
          The volume in angs^3.

      Returns
      -------
      None



.. py:class:: DrudeLorentz(vs_cm1, strengths_cm1, sigmas_cm1)


   Bases: :py:obj:`DielectricFunction`

   A complex tensor Drude-Lorentz permittivity

   Inherits from DielectricFunction.
   Provides a calculate() function to return the permittivity.
   Epsilon infinity is included in the total permittivity

   Methods
   -------
   calculate()
       Calculates and returns the permittivity.

   Examples
   --------
   None

   .. py:method:: calculate(v)

      Calculate the permittivity at a given frequency.

      Parameters
      ----------
      v : float
          The frequency in cm-1

      Returns
      -------
      tensor
          The permittivity at frequency v as a diagonal 3x3 tensor.


   .. py:method:: getFrequencies()

      Returns the frequencies of a Drude-Lorentz permittivity

      The frequencies are in units of cm-1

      Parameters
      ----------
      None

      Returns
      -------
      1d array of floats
          The frequencies in cm-1



   .. py:method:: getOscillatorStrengths()

      Returns the oscillator strengths of a Drude-Lorentz permittivity

      The returned strengths are in units of cm-1

      Parameters
      ----------
      None

      Returns
      -------
      1d array of floats
          The oscillator strengths in cm-1



   .. py:method:: getSigmas()

      Returns the sigma parameters of a Lorentzian permittivity

      The returned sigmas are in units of cm-1

      Parameters
      ----------
      None

      Returns
      -------
      1d array of floats



   .. py:method:: setFrequencies(frequencies)

      Sets the frequencies of a Drude-Lorentz permittivity

      The frequencies are in cm-1

      Parameters
      ----------
      strengths : 1d array of floats
          The frequencies in cm-1

      Returns
      -------
      None



   .. py:method:: setOscillatorStrengths(strengths)

      Sets the oscillator strengths of a Drude-Lorentz permittivity

      The oscillator strengths are in cm-1

      Parameters
      ----------
      strengths : 1d array of floats
          The oscillator strengths parameters in cm-1

      Returns
      -------
      None



   .. py:method:: setSigmas(sigmas)

      Sets the sigma parameters of a Drude-Lorentz permittivity

      The default is to print an error message unless the DielectricFunction is a Lorentzian

      Parameters
      ----------
      sigmas : 1d array of floats
          The sigma parameters in cm-1

      Returns
      -------
      None




.. py:class:: FPSQ(omega_tos, gamma_tos, omega_los, gamma_los)


   Bases: :py:obj:`DielectricFunction`

   A complex tensor FPSQ dielectric function.

   Inherits from DielectricFunction.
   Provides a calculate() function to return the permittivity.
   Epsilon infinity is included in the total permittivity

   .. py:method:: calculate(v)

      Calculate the diagonal permittivity 3x3 tensor at a given frequency.

      Parameters
      ----------
      v : float
          The frequency in cm-1

      Returns
      -------
      numpy.ndarray
          The diagonal permittivity 3x3 tensor at frequency v.



.. py:class:: Sellmeier(Bs, Cs)


   Bases: :py:obj:`DielectricFunction`

   A real tensor Sellmeier permittivity

   Inherits from DielectricFunction. Provides a calculate() function to return the permittivity.
   Epsilon infinity is not included in the total permittivity


   .. py:method:: calculate(v)

      Calculate the diagonal permittivity 3x3 tensor at a given frequency.

      Parameters
      ----------
      v : float
          The frequency in cm-1.

      Returns
      -------
      ndarray
          The diagonal permittivity 3x3 tensor at frequency v.

      Notes
      -----
      The Sellmeier parameters are in microns^2.



.. py:class:: Tabulate1(vs_cm1, permittivities)


   Bases: :py:obj:`DielectricFunction`

   A complex tabulated isotropic tensor permittivity

   Inherits from DielectricFunction.
   Represents an isotropic dielectric function.
   Provides a calculate() function to return the permittivity.
   Epsilon infinity is included in the total permittivity

   Methods
   -------
   calculate()
       Returns the permittivity of the dielectric function.

   .. py:method:: calculate(v)

      Calculate the isotropic permittivity at a given frequency.

      Parameters
      ----------
      v : float
          The frequency in internal units.

      Returns
      -------
      numpy.ndarray
          The isotropic permittivity at frequency v as a 3x3 tensor.



.. py:class:: Tabulate3(vs_cm1, epsxx, epsyy, epszz)


   Bases: :py:obj:`DielectricFunction`

   A complex tabulated diagonal tensor permittivity

   Inherits from DielectricFunction.
   Represents an orthorhombic dielectric function.
   Provides a calculate() function to return the permittivity.
   Epsilon infinity is included in the total permittivity

   Methods
   -------
   calculate()
       Return the permittivity of the dielectric function.

   .. py:method:: calculate(v)

      Calculate the permittivity at a given frequency.

      Parameters
      ----------
      v : float
          The frequency in internal units.

      Returns
      -------
      numpy.ndarray
          The permittivity at frequency v as a diagonal 3x3 tensor.



.. py:class:: Tabulate6(vs_cm1, epsxx, epsyy, epszz, epsxy, epsxz, epsyz)


   Bases: :py:obj:`DielectricFunction`

   A complex tabulated, anisotropic tensor permittivity

   Inherits from DielectricFunction.
   Represents an non-isotropic dielectric function.
   Provides a calculate() function to return the permittivity.
   Epsilon infinity is included in the total permittivity

   Methods
   -------
   calculate()
       Returns the permittivity of the dielectric.

   .. py:method:: calculate(v)

      Calculate the symmetric permittivity tensor at a given frequency.

      Parameters
      ----------
      v : float
          The frequency in cm-1.

      Returns
      -------
      numpy.ndarray
          The full permittivity tensor at frequency v as a 3x3 tensor.



.. py:class:: TabulateScalar(vs_cm1, permittivities)


   Bases: :py:obj:`DielectricFunction`

   A complex tabulated scalar permittivity

   Inherits from DielectricFunction. 
   Represents an isotropic material dielectric function. 
   Provides a calculate() function to return the permittivity.
   Epsilon infinity is not used in the calculation.

   Methods
   -------
   calculate()
       Compute the permittivity of the material.

   Notes
   -----
   None

   Examples
   --------
   None

   .. py:method:: calculate(v)

      Calculate the permittivity at a given frequency.

      Parameters
      ----------
      v : float
          The frequency in internal units.

      Returns
      -------
      float
          The permittivity at frequency v as a scalar.



