:py:mod:`PDielec.CrystalOutputReader`
=====================================

.. py:module:: PDielec.CrystalOutputReader

.. autoapi-nested-parse::

   A module to read contents of a directory containing Crystal input and output files.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   PDielec.CrystalOutputReader.CrystalOutputReader




.. py:class:: CrystalOutputReader(filenames)


   Bases: :py:obj:`PDielec.GenericOutputReader.GenericOutputReader`

   Read contents of a directory containing Crystal input and output files.

   Inherits from :class:`~PDielec.GenericOutputReader.GenericOutputReader`

   Parameters
   ----------
   filenames : iterable
       An iterable object (e.g., list or tuple) containing the file names to be processed.

   Notes
   -----
   This function calls the initializer of the parent class 'GenericOutputReader' with the given filenames. It initializes several class attributes including the type of output (set to 'Crystal output'), the method for hessian symmetrisation (set to 'crystal'), and an empty list for fractional coordinates.

   .. py:method:: _read_born_charges(line)

      Read the born charges from the output file.

      Parameters
      ----------
      line : str

      Returns
      -------
      numpy.ndarray
          A 3x3 array where each row of the output refers to a given field direction and each column in the row refers to the atomic displacement. The output is arranged as: ::

              [[a1x a1y a1z]
               [a2x a2y a2z]
               [a3x a3y a3z]]

          where 1, 2, 3 represent the field directions and x, y, z are the atomic displacements.


   .. py:method:: _read_born_charges_from_born_dat(filename)

      Read born charges from a .born.dat file and store them in the instance variable.

      This method reads born charges for each ion from a specified file, which contains 
      data in three lines per ion. It transposes the read charge matrix and stores 
      the result in the `born_charges` instance variable.

      Parameters
      ----------
      filename : str
          The path to the .born.dat file to be read.

      Returns
      -------
      None


   .. py:method:: _read_born_charges_from_output(line)

      Read Born charges from output file.

      This method is responsible for parsing and reading Born effective charges from a given output file, beginning from the current line position of the file descriptor. It stores the read charges into the `born_charges` list attribute.

      Parameters
      ----------
      line : str

      Returns
      -------
      None

      Note
      ----
      This method directly modifies the `born_charges` attribute of the class instance by appending the read Born charges. It assumes that the file is correctly positioned before the starts of the Born charges and that it's formatted in a specific way expected by the logic of this method.


   .. py:method:: _read_eigenvectors(line)

      Read eigenvectors from appropriate file.

      This function attempts to read eigenvectors for a given molecular system. It first checks for
      the file 'HESSFREQ.DAT' in the specified `open_directory`. If the file exists, it reads the
      eigenvectors from this file using the method `_read_hessfreq_dat`. If the file does not exist,
      it reads the eigenvectors from output data indicated by 'line' using the method
      `_read_output_eigenvectors`.

      Parameters
      ----------
      line : str
          The line or identifier used to read the eigenvectors from output data, if 'HESSFREQ.DAT'
          is not available.

      Returns
      -------
      None


   .. py:method:: _read_electrons(line)

      Parse the number of electrons from a string and assign it to the instance variable.

      Parameters
      ----------
      line : str
          The number of electrons is the sixth element in a space-separated list.

      Returns
      -------
      None


   .. py:method:: _read_energy(line)

      Reads and sets the free energy and energy without entropy from a line.

      Parameters
      ----------
      line : str
          A string containing the energy information, expected to be in a format
          where the fourth element (index 3) after splitting contains the energy value
          in Hartrees.

      Returns
      -------
      None

      Notes
      -----
      This method modifies the instance attributes `final_free_energy` and
      `final_energy_without_entropy` by converting the energy value from Hartrees to
      electronvolts (eV) using a conversion factor stored in `hartree2ev`.

      There are no return values. Modifications are made directly to the instance attributes.


   .. py:method:: _read_energy2(line)

      Read and set the final free energy and final energy without entropy from a line of text.

      This method reads a line of text that contains energy values and updates the
      instance's final free energy and final energy without entropy attributes.
      The energies are assumed to be in Hartree units and are converted to electronvolts (eV).

      Parameters
      ----------
      line : str
          A string containing the desired energy values. The sixth value in the line
          (when split by whitespace) is assumed to be the energy in Hartree units.

      Returns
      -------
      None



   .. py:method:: _read_energy3(line)

      Parse energy information from a given line of text and update object properties.

      Parameters
      ----------
      line : str
          A line of text containing energy information where the 3rd element (index 2)
          after splitting by whitespace contains the energy value in Hartree units.

      Returns
      -------
      None


   .. py:method:: _read_epsilon(line)

      Reads epsilon values from a formatted file and updates the optical dielectric matrix.

      This internal method reads lines from a previously opened file (using the file_descriptor attribute of the object), interpreting data that specifies the components of the optical dielectric tensor. The method updates the object's `zerof_optical_dielectric` attribute with a 3x3 matrix representing the read optical dielectric values. Optical dielectric components are identified by their 'XX', 'YY', 'ZZ', 'XY', 'XZ', and 'YZ' labels in the file. The method expects the values in a specific format and parses them accordingly.


      Parameters
      ----------
      line : str
          The initial line passed to the method. Currently, this parameter is not used within the method.

      Returns
      -------
      None

      Notes
      -----
      - The method does not return any value but instead updates the `zerof_optical_dielectric` attribute of the object.
      - This method assumes that the file being read is opened and managed elsewhere in the class and that the `file_descriptor` attribute contains a valid file object.
      - The method reads lines sequentially from the `file_descriptor` and expects the file to be formatted in a specific way, with optical dielectric components starting from a certain line.
      - Each line read corresponds to a different component of the optical dielectric tensor, and the method parses these lines to identify the component and its value.
      - After reading and storing the components' values, the method also updates the symmetric components of the tensor (i.e., sets optical_dielectric[1][0], optical_dielectric[2][0], and optical_dielectric[2][1] to their corresponding symmetric values).



   .. py:method:: _read_fractional_coordinates(line)

      Read and store fractional coordinates from a file line.

      This method processes a line in the file to extract the number of ions and 
      then reads the successive lines to acquire the fractional coordinates, species, 
      and other related atomic information, storing them into the class attributes.

      Parameters
      ----------
      line : str
          The initial line to be processed for extracting the total number of ions.

      Returns
      -------
      None

      Attributes Updated
      ------------------
      nions : int
          The total number of ions.
      _fractional_coordinates : list of list of float
          The fractional coordinates of each ion.
      species : list of str
          The unique list of species types.
      species_list : list of str
          List of species corresponding to each ion.
      atom_type_list : list of int
          Index list specifying the species type for each ion.
      nspecies : int
          The total number of unique species.
      ions_per_type : list of int
          A count of ions per species type.


   .. py:method:: _read_hessfreq_dat(filename)

      Reads a Hessian frequency data from a given file and updates the dynamical matrix.

      Parameters
      ----------
      filename : str
          The path to the file containing Hessian frequency data.

      Notes
      -----
      This function reads a Hessian frequency data file, processes the data by mass weighting the Hessian matrix, and then updates the dynamical matrix of the system. 

      See Also
      --------
      _dynamical_matrix : Updates the dynamical matrix of the system using the processed Hessian matrix.



   .. py:method:: _read_ionic_dielectric(line)

      Read ionic dielectric data from the file and store in an instance variable.

      This method reads the next four lines from the file associated with the
      instance's file descriptor. The second, third, and fourth lines are expected 
      to contain ionic dielectric data, each consisting of three floating-point 
      numbers. These numbers are stored in a list of lists in the instance variable 
      `zerof_static_dielectric`.

      Parameters
      ----------
      line : str
          This parameter is not used. The function reads lines directly from the
          instance's file descriptor.

      Returns
      -------
      None

      Notes
      -----
      The method directly modifies the instance variable `zerof_static_dielectric`.
      It is assumed that the file has been adequately positioned before this method
      is called, as it starts reading from the current position of the file
      descriptor's pointer.


   .. py:method:: _read_kpoints(line)

      Parse a line of text to extract k-point grid dimensions and the total number of k-points.

      The function sets the object's kpoint_grid attribute to a list of three integers representing the grid dimensions, and the kpoints attribute to an integer representing the total number of k-points.

      Parameters
      ----------
      line : str
          A string from which k-point grid dimensions and the total number of k-points are extracted. The line is expected to have specific data at predefined positions: the k-point grid dimensions at indices 2, 3, and 4, and the total number of k-points at index 12, according to the split by whitespace.

      Returns
      -------
      None


   .. py:method:: _read_lattice_vectors(line)

      Read lattice vectors from a file and update the corresponding properties.

      This method reads three consecutive lattice vectors (a, b, c) from the current position in an open file, creates a new `UnitCell` object with these vectors, and updates the unit cell collection of the object. It also updates the number of cells, the volume of the last cell, and sets the fractional coordinates and element names for the last unit cell based on existing class attributes.

      Modifications to the instance attributes include:
      - Appending a new `UnitCell` object to the `unit_cells` list.
      - Updating the `ncells` attribute to match the length of the `unit_cells` list.
      - Setting the volume of the last unit cell in `unit_cells`.
      - Updating the fractional coordinates and element names of the last unit cell.

      Parameters
      ----------
      line : str
          The current line from the file where the method starts reading. This parameter is actually not used as the method immediately reads new lines from the file, implying a design choice where the `line` parameter could be omitted or revised.



   .. py:method:: _read_masses(line)

      Read and parse the masses from a file descriptor line by line.

      This private method reads mass information from consecutive lines of a
      file, updating a list of masses and a list of masses per species type.

      Notes
      -----
      The function uses a file descriptor (self.file_descriptor) that should
      be opened before calling this function. It reads the masses from the
      file, expecting the mass values to be placed at specific positions in
      the lines (every third value starting from the third value on a new
      line after skipping one line). The method updates the instance
      variables `masses` (a list of all masses) and `masses_per_type` (a list
      of masses indexed by species type).

      The function assumes that the lines are formatted in a specific way and
      that `self.nions`, `self.nspecies`, and `self.atom_type_list` are set
      correctly before calling this method.

      Parameters
      ----------
      line : str
          The current line from which to start reading. Note that this
          parameter is not used in the function body and the actual reading
          starts from the next line of the file descriptor.

      Returns
      -------
      None


   .. py:method:: _read_output_eigenvectors(line)

      Read and process output eigenvectors from a file descriptor.

      This method reads eigenvector data for each frequency from a file, processes this data by scaling it with the square root of the atom's masses to generate mass-weighted normal modes, and normalizes these modes.

      Parameters
      ----------
      line : str
          The current line in the file from which to start reading eigenvectors. This parameter is not explicitly used in the processing inside the function but hints at expecting a certain positioning within the file content.

      Returns
      -------
      None

      Notes
      -----
      - This method directly modifies the `frequencies` and `mass_weighted_normal_modes` attributes of the class instance.
      - Atoms' masses are used to compute mass-weighted normal modes
      - Normalization of each mass-weighted mode is performed at the end of the method.


   .. py:method:: _read_output_files()

      Read the Crystal files in the directory.

      Define the strings used to search for the required information and then process the file

      Returns
      -------
      None



