PDielec.CrystalOutputReader
===========================

.. py:module:: PDielec.CrystalOutputReader

.. autoapi-nested-parse::

   A module to read contents of a directory containing Crystal input and output files.



Attributes
----------

.. autoapisummary::

   PDielec.CrystalOutputReader.amu
   PDielec.CrystalOutputReader.hartree2ev


Classes
-------

.. autoapisummary::

   PDielec.CrystalOutputReader.CrystalOutputReader
   PDielec.CrystalOutputReader.GenericOutputReader
   PDielec.CrystalOutputReader.UnitCell
   PDielec.CrystalOutputReader.pdielec_io


Module Contents
---------------

.. py:class:: CrystalOutputReader(filenames)

   Bases: :py:obj:`PDielec.GenericOutputReader.GenericOutputReader`


   Read contents of a directory containing Crystal input and output files.

   Inherits from :class:`~PDielec.GenericOutputReader.GenericOutputReader`

   Parameters
   ----------
   filenames : iterable
       An iterable object (e.g., list or tuple) containing the file names to be processed.

   Notes
   -----
   This function calls the initializer of the parent class 'GenericOutputReader' with the given filenames. It initializes several class attributes including the type of output (set to 'Crystal output'), the method for hessian symmetrisation (set to 'crystal'), and an empty list for fractional coordinates.


   .. py:method:: _read_born_charges(line)

      Read the born charges from the output file.

      Parameters
      ----------
      line : str

      Returns
      -------
      numpy.ndarray
          A 3x3 array where each row of the output refers to a given field direction and each column in the row refers to the atomic displacement. The output is arranged as: ::

              [[a1x a1y a1z]
               [a2x a2y a2z]
               [a3x a3y a3z]]

          where 1, 2, 3 represent the field directions and x, y, z are the atomic displacements.



   .. py:method:: _read_born_charges_from_born_dat(filename)

      Read born charges from a .born.dat file and store them in the instance variable.

      This method reads born charges for each ion from a specified file, which contains 
      data in three lines per ion. It transposes the read charge matrix and stores 
      the result in the `born_charges` instance variable.

      Parameters
      ----------
      filename : str
          The path to the .born.dat file to be read.

      Returns
      -------
      None



   .. py:method:: _read_born_charges_from_output(line)

      Read Born charges from output file.

      This method is responsible for parsing and reading Born effective charges from a given output file, beginning from the current line position of the file descriptor. It stores the read charges into the `born_charges` list attribute.

      Parameters
      ----------
      line : str

      Returns
      -------
      None

      Note
      ----
      This method directly modifies the `born_charges` attribute of the class instance by appending the read Born charges. It assumes that the file is correctly positioned before the starts of the Born charges and that it's formatted in a specific way expected by the logic of this method.



   .. py:method:: _read_eigenvectors(line)

      Read eigenvectors from appropriate file.

      This function attempts to read eigenvectors for a given molecular system. It first checks for
      the file 'HESSFREQ.DAT' in the specified `open_directory`. If the file exists, it reads the
      eigenvectors from this file using the method `_read_hessfreq_dat`. If the file does not exist,
      it reads the eigenvectors from output data indicated by 'line' using the method
      `_read_output_eigenvectors`.

      Parameters
      ----------
      line : str
          The line or identifier used to read the eigenvectors from output data, if 'HESSFREQ.DAT'
          is not available.

      Returns
      -------
      None



   .. py:method:: _read_electrons(line)

      Parse the number of electrons from a string and assign it to the instance variable.

      Parameters
      ----------
      line : str
          The number of electrons is the sixth element in a space-separated list.

      Returns
      -------
      None



   .. py:method:: _read_energy(line)

      Reads and sets the free energy and energy without entropy from a line.

      Parameters
      ----------
      line : str
          A string containing the energy information, expected to be in a format
          where the fourth element (index 3) after splitting contains the energy value
          in Hartrees.

      Returns
      -------
      None

      Notes
      -----
      This method modifies the instance attributes `final_free_energy` and
      `final_energy_without_entropy` by converting the energy value from Hartrees to
      electronvolts (eV) using a conversion factor stored in `hartree2ev`.

      There are no return values. Modifications are made directly to the instance attributes.



   .. py:method:: _read_energy2(line)

      Read and set the final free energy and final energy without entropy from a line of text.

      This method reads a line of text that contains energy values and updates the
      instance's final free energy and final energy without entropy attributes.
      The energies are assumed to be in Hartree units and are converted to electronvolts (eV).

      Parameters
      ----------
      line : str
          A string containing the desired energy values. The sixth value in the line
          (when split by whitespace) is assumed to be the energy in Hartree units.

      Returns
      -------
      None




   .. py:method:: _read_energy3(line)

      Parse energy information from a given line of text and update object properties.

      Parameters
      ----------
      line : str
          A line of text containing energy information where the 3rd element (index 2)
          after splitting by whitespace contains the energy value in Hartree units.

      Returns
      -------
      None



   .. py:method:: _read_epsilon(line)

      Reads epsilon values from a formatted file and updates the optical dielectric matrix.

      This internal method reads lines from a previously opened file (using the file_descriptor attribute of the object), interpreting data that specifies the components of the optical dielectric tensor. The method updates the object's `zerof_optical_dielectric` attribute with a 3x3 matrix representing the read optical dielectric values. Optical dielectric components are identified by their 'XX', 'YY', 'ZZ', 'XY', 'XZ', and 'YZ' labels in the file. The method expects the values in a specific format and parses them accordingly.


      Parameters
      ----------
      line : str
          The initial line passed to the method. Currently, this parameter is not used within the method.

      Returns
      -------
      None

      Notes
      -----
      - The method does not return any value but instead updates the `zerof_optical_dielectric` attribute of the object.
      - This method assumes that the file being read is opened and managed elsewhere in the class and that the `file_descriptor` attribute contains a valid file object.
      - The method reads lines sequentially from the `file_descriptor` and expects the file to be formatted in a specific way, with optical dielectric components starting from a certain line.
      - Each line read corresponds to a different component of the optical dielectric tensor, and the method parses these lines to identify the component and its value.
      - After reading and storing the components' values, the method also updates the symmetric components of the tensor (i.e., sets optical_dielectric[1][0], optical_dielectric[2][0], and optical_dielectric[2][1] to their corresponding symmetric values).




   .. py:method:: _read_fractional_coordinates(line)

      Read and store fractional coordinates from a file line.

      This method processes a line in the file to extract the number of ions and 
      then reads the successive lines to acquire the fractional coordinates, species, 
      and other related atomic information, storing them into the class attributes.

      Parameters
      ----------
      line : str
          The initial line to be processed for extracting the total number of ions.

      Returns
      -------
      None

      Attributes Updated
      ------------------
      nions : int
          The total number of ions.
      _fractional_coordinates : list of list of float
          The fractional coordinates of each ion.
      species : list of str
          The unique list of species types.
      species_list : list of str
          List of species corresponding to each ion.
      atom_type_list : list of int
          Index list specifying the species type for each ion.
      nspecies : int
          The total number of unique species.
      ions_per_type : list of int
          A count of ions per species type.



   .. py:method:: _read_hessfreq_dat(filename)

      Reads a Hessian frequency data from a given file and updates the dynamical matrix.

      Parameters
      ----------
      filename : str
          The path to the file containing Hessian frequency data.

      Notes
      -----
      This function reads a Hessian frequency data file, processes the data by mass weighting the Hessian matrix, and then updates the dynamical matrix of the system. 

      See Also
      --------
      _dynamical_matrix : Updates the dynamical matrix of the system using the processed Hessian matrix.




   .. py:method:: _read_ionic_dielectric(line)

      Read ionic dielectric data from the file and store in an instance variable.

      This method reads the next four lines from the file associated with the
      instance's file descriptor. The second, third, and fourth lines are expected 
      to contain ionic dielectric data, each consisting of three floating-point 
      numbers. These numbers are stored in a list of lists in the instance variable 
      `zerof_static_dielectric`.

      Parameters
      ----------
      line : str
          This parameter is not used. The function reads lines directly from the
          instance's file descriptor.

      Returns
      -------
      None

      Notes
      -----
      The method directly modifies the instance variable `zerof_static_dielectric`.
      It is assumed that the file has been adequately positioned before this method
      is called, as it starts reading from the current position of the file
      descriptor's pointer.



   .. py:method:: _read_kpoints(line)

      Parse a line of text to extract k-point grid dimensions and the total number of k-points.

      The function sets the object's kpoint_grid attribute to a list of three integers representing the grid dimensions, and the kpoints attribute to an integer representing the total number of k-points.

      Parameters
      ----------
      line : str
          A string from which k-point grid dimensions and the total number of k-points are extracted. The line is expected to have specific data at predefined positions: the k-point grid dimensions at indices 2, 3, and 4, and the total number of k-points at index 12, according to the split by whitespace.

      Returns
      -------
      None



   .. py:method:: _read_lattice_vectors(line)

      Read lattice vectors from a file and update the corresponding properties.

      This method reads three consecutive lattice vectors (a, b, c) from the current position in an open file, creates a new `UnitCell` object with these vectors, and updates the unit cell collection of the object. It also updates the number of cells, the volume of the last cell, and sets the fractional coordinates and element names for the last unit cell based on existing class attributes.

      Modifications to the instance attributes include:
      - Appending a new `UnitCell` object to the `unit_cells` list.
      - Updating the `ncells` attribute to match the length of the `unit_cells` list.
      - Setting the volume of the last unit cell in `unit_cells`.
      - Updating the fractional coordinates and element names of the last unit cell.

      Parameters
      ----------
      line : str
          The current line from the file where the method starts reading. This parameter is actually not used as the method immediately reads new lines from the file, implying a design choice where the `line` parameter could be omitted or revised.




   .. py:method:: _read_masses(line)

      Read and parse the masses from a file descriptor line by line.

      This private method reads mass information from consecutive lines of a
      file, updating a list of masses and a list of masses per species type.

      Notes
      -----
      The function uses a file descriptor (self.file_descriptor) that should
      be opened before calling this function. It reads the masses from the
      file, expecting the mass values to be placed at specific positions in
      the lines (every third value starting from the third value on a new
      line after skipping one line). The method updates the instance
      variables `masses` (a list of all masses) and `masses_per_type` (a list
      of masses indexed by species type).

      The function assumes that the lines are formatted in a specific way and
      that `self.nions`, `self.nspecies`, and `self.atom_type_list` are set
      correctly before calling this method.

      Parameters
      ----------
      line : str
          The current line from which to start reading. Note that this
          parameter is not used in the function body and the actual reading
          starts from the next line of the file descriptor.

      Returns
      -------
      None



   .. py:method:: _read_output_eigenvectors(line)

      Read and process output eigenvectors from a file descriptor.

      This method reads eigenvector data for each frequency from a file, processes this data by scaling it with the square root of the atom's masses to generate mass-weighted normal modes, and normalizes these modes.

      Parameters
      ----------
      line : str
          The current line in the file from which to start reading eigenvectors. This parameter is not explicitly used in the processing inside the function but hints at expecting a certain positioning within the file content.

      Returns
      -------
      None

      Notes
      -----
      - This method directly modifies the `frequencies` and `mass_weighted_normal_modes` attributes of the class instance.
      - Atoms' masses are used to compute mass-weighted normal modes
      - Normalization of each mass-weighted mode is performed at the end of the method.



   .. py:method:: _read_output_files()

      Read the Crystal files in the directory.

      Define the strings used to search for the required information and then process the file

      Returns
      -------
      None



.. py:class:: GenericOutputReader(filenames)

   Generic reader of output files. Actual reader should inherit from this class.
   Examples of readers with this base class:

   - :class:`~PDielec.AbinitOutputReader`
   - :class:`~PDielec.CastepOutputReader`
   - :class:`~PDielec.CrystalOutputReader`
   - :class:`~PDielec.ExperimentOutputReader`
   - :class:`~PDielec.GulpOutputReader`
   - :class:`~PDielec.PhonopyOutputReader`
   - :class:`~PDielec.QEOutputReader`
   - :class:`~PDielec.VaspOutputReader`

   Parameters
   ----------
   filenames : list
       A list containing file names (strings) to be associated with the instance. These
       are converted into the absolute paths and stored.

   Attributes
   ----------
   _outputfiles : list
       Stores the initial filenames provided during instantiation.

   names : list
       The absolute paths of the files specified in `filenames`. Computed by resolving
       each filename to its absolute path.

   debug : bool
       Indicates if debug mode is on or off. Defaults to False.

   type : str
       The type of the object, initially set as 'Unkown'.

   ncells, nsteps, electrons, spin, nbands, volume, nions, nspecies, geomsteps : int
       Attributes initialized as 0, representing various numerical properties.

   unit_cells, volumes, species, energiesDFT, energiesDFT_disp, final_free_energies, final_energies_without_entropy, volumes, pressures, born_charges, frequencies, mass_weighted_normal_modes, ions_per_type, atom_type_list, masses, masses_per_type, elastic_constants, zerof_optical_dielectric, zerof_static_dielectric : list
       Various lists to store computational results related to the object. Initialized as empty lists.

   final_free_energy, final_energy_without_entropy, magnetization, energy_cutoff, pressure : float
       Floating point attributes initialized to represent different scalar quantities. Defaults to 0 or 0.0.

   kpoints : int
       The number of kpoints, initialized to 1.

   kpoint_grid : list
       The kpoint grid dimensions, initialized as [1, 1, 1].

   manage : set
       The set contains phrases which are matched when looking through a file

   iterations : dict
       Holds the values of 'max force' and 'rms force' at each iteration

   file_descriptor : str
       A string to hold file descriptor, initialized as an empty string.

   eckart : bool
       A boolean flag to indicate the use of Eckart conditions, defaults to False.

   hessian_symmetrisation : str
       The method for symmetrization of Hessian, defaults to 'symm'.

   open_filename, open_directory : str
       Strings for tracking open files or directories, initialized as empty strings.

   _old_masses : list
       A list to keep track of old mass values, initialized as empty.

   nomass_hessian : type or None
       Placeholder for hessian without mass contribution, initially None.

   nomass_hessian_has_been_set : bool
       Indicates if the `nomass_hessian` has been provided, defaults to False.

   original_born_charges, CrystalPermittivity, oscillator_strengths, edited_masses : Various types
       Attributes initialized as `None` to represent unassigned computational properties.

   original_born_charges_are_being_used : bool
       Signifies whether original Born charges are in use, defaults to True.


   .. py:method:: _born_charge_sum_rule()

      Apply a simple charge sum rule to all the elements of the born matrices

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      This function applies a straightforward summation rule to the elements of the born matrices,



   .. py:method:: _dynamical_matrix(hessian)

      Process the dynamical matrix.

      Processes the dynamical matrix by performing several steps: symmetrizing the Hessian, which is a nxn matrix of mass-weighted force constants, projecting out translational modes, diagonalizing the Hessian, and finally storing the frequencies and normal modes.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      - Hessian is a nxn matrix of the mass weighted force constants.
      - The hessian is symmetrised.
      - Translational modes are projected out.
      - The hessian is diagonalised.
      - Finally, the frequencies and normal modes are stored.



   .. py:method:: _modify_mass_weighting(hessian, new)

      Modify the Hessian matrix based on new mass weighting.

      This function iterates over the elements of the Hessian matrix (`hessian`) and adjusts each element based on the square root of the product of elements from a new weighting (`new`). 

      Parameters
      ----------
      hessian : numpy.ndarray
          The original Hessian matrix whose elements are to be modified. It is assumed to be a square matrix with dimensions [3*nions, 3*nions], where nions is the number of ions (or atoms) in the system.
      new : numpy.ndarray or list
          An array or list of new weighting factors, one per ion. Its length should be equal to `nions`. These factors are applied in the modification of the Hessian matrix elements.

      Returns
      -------
      numpy.ndarray
          The modified Hessian matrix with the same dimensions as the input matrix.




   .. py:method:: _read_output_file(name)

      Read through the file 'name' for key words. The keywords are established in _read_output_files.

      Parameters
      ----------
      name : str

      Returns
      -------
      None

      Notes
      -----
      The actual implementation for identifying keywords is handled by the `_read_output_files` method.



   .. py:method:: _read_output_files()

      Read the through the output files.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      This method is over-ridden by the child class



   .. py:method:: _read_till_phrase(phrase)

      Read lines from the current file until a match with phrase is found.
      Once a match is found, return the matching line.

      Parameters
      ----------
      phrase : str
          The phrase to match in each line of the file.

      Returns
      -------
      str
          The line from the file that matches the phrase.



   .. py:method:: _remove_mass_weighting(hessian, old)

      Remove mass-weighting from a Hessian matrix.

      Parameters
      ----------
      hessian : ndarray
          The Hessian matrix to be un-weighted, typically a square, 2D array where
          the dimension correlates with 3 times the number of ions (nions*3) since
          it includes the x, y, and z coordinates for each ion.
      old : ndarray or list
          An array or list of mass weights for each ion.

      Returns
      -------
      new_hessian : ndarray
          The mass-weighting removed (un-weighted) Hessian matrix.

      Notes
      -----
      This function assumes that the Hessian matrix is provided in a form that
      has been mass-weighted. Each element of the `hessian` input is divided by
      the square root of the product of the mass weights of the corresponding ions,
      adjusting it to an un-weighted form.

      The size of `old` must match the number of ions (`nions`). Each entry in `old`
      is used to compute the square root of the product of mass weights for the 
      appropriate matrix element, thereby removing the mass weighting from the 
      original Hessian matrix.



   .. py:method:: _symmetric_orthogonalisation(A)

      Private routine to perform symmetric orthogonalization.

      Parameters
      ----------
      A : ndarray
          matrix to be orthogonalised

      Returns
      -------
      None




   .. py:method:: calculate_mass_weighted_normal_modes()

      Calculate the mass weighted normal modes from the hessian.

      The hessian itself is constructed from the frequencies and normal modes
      Any changes to the atomic masses is applied
      Eckart conditions are applied if requested

      Parameters
      ----------
      None

      Returns
      -------
      mass_weighted_normal_modes : np.array
         the mass weighted normal modes



   .. py:method:: change_masses(new_masses, mass_dictionary)

      Change the masses of elements in a output reader.

      This function updates the masses of the elements within the reader according to the new masses provided. If the object has already had its masses edited, those edited masses will be used. Otherwise, it sets up or updates the simulation's internal mass dictionary based on the provided `new_masses` and an optional external `mass_dictionary` for overrides. If debugging is enabled, various diagnostic messages will be printed during the function's execution.

      Parameters
      ----------
      new_masses : dict
          A dictionary where keys are element symbols as strings and values are the new masses for these elements.
      mass_dictionary : dict, optional
          An additional dictionary provided for mass overrides. If any element present in `new_masses` also exists in `mass_dictionary`, the mass from `mass_dictionary` will be used.

      Returns
      -------
      None

      Notes
      -----
      - It assumes that `cleanup_symbol()` is a function used to standardize or validate the element symbols in `self.species`.
      - It alters `self.masses` and `self.masses_per_type` to reflect changes in masses as per `new_masses` and `mass_dictionary`.
      - If `self.edited_masses` is already set to a truthy value, it bypasses the update process and uses these values instead.
      - `self.species` and `self.atom_type_list` are expected to be iterable attributes of the object containing symbols for elements and types of atoms, respectively.
      - Debugging messages are conditionally printed based on the boolean attribute `self.debug`.



   .. py:method:: getSpecies()

      Return a list of cleaned species symbols.

      This method applies a specified cleanup function to each element of 
      the `species` attribute and returns the resulting list.

      Parameters
      ----------
      None

      Returns
      -------
      list
          A list of cleaned species symbols.



   .. py:method:: get_crystal_density()

      Return the crystal density in g/cc

      The volume is in angstrom^3, the masses are in atomic mass units, the density is in g/cc

      Parameters
      ----------
      None

      Returns
      -------
      float
          Density in g/cc




   .. py:method:: get_unit_cell()

      Return the last unit cell in the reader

      The routine adds the current set of masses to the unit cell

      Parameters
      ----------
      None

      Returns
      -------
      unitCell object
          The last unit cell read by the reader




   .. py:method:: mass_dictionary()

      Generate a dictionary mapping chemical species symbols to their masses.

      Parameters
      ----------
      None

      Returns
      -------
      dictionary : dict
          A dictionary where keys are cleaned up species symbols and values are their corresponding masses.

      Notes
      -----
      The function uses a helper function `cleanup_symbol` to clean up the species symbols before using them as keys in the dictionary. If the instance's `debug` attribute is set to True, the function will print the newly created mass dictionary.

      Examples
      --------
      Assuming an object `molecule` with species `['H2', 'O']`, masses_per_type `[2.016, 15.999]`, and a debug attribute set to True, calling `molecule.mass_dictionary()` would print `{'H2': 2.016, 'O': 15.999}` and return this dictionary.



   .. py:method:: neutralise_born_charges()

      Neutralise Born charges within the object.

      Changes the state of `original_born_charges_are_being_used` 
      to False and saves the current `born_charges` as `original_born_charges` if
      `original_born_charges_are_being_used` is True, indicating that the 
      original Born charges are no longer being used directly. It then applies 
      the Born charge sum rule by calling the `_born_charge_sum_rule` method.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      This method is intended to be used within a context where Born charges 
      (representative of the polarization of ions in a solid under an electric field) 
      need to be neutralized or altered from their original state.



   .. py:method:: print()

      Print information about the reader.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      This function prints out detailed information about the reader it is run on.



   .. py:method:: project(hessian)

      Apply projection operators to remove translation.

      Parameters
      ----------
      hessian : np.array
          The given matrix.

      Returns
      -------
      np.array
          The matrix with translational modes projected out.



   .. py:method:: read_output()

      Interface to the private read output files methods.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: reset_born_charges()

      Resets the born charges to their original values if they are not currently being used.

      This method restores the `born_charges` attribute of the instance to the value stored in `original_born_charges`, but only if `original_born_charges_are_being_used` is `False`.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      This method changes the state of the reader by modifying its `born_charges` attribute to match `original_born_charges`, under the condition that `original_born_charges_are_being_used` is `False`.



   .. py:method:: reset_masses()

      Reset the mass values to the program's defaults.

      This function resets the mass dictionary of an object to the values specified
      by the object's `program_mass_dictionary`. Typically used when needing to revert
      any runtime changes to the object's mass values to their original state.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      If `debug` attribute of the object is True, it prints a message indicating 
      that the masses are being reset. This function does not return any value
      but modifies the object's state by changing its mass dictionary to match
      the `program_mass_dictionary`.

      Examples
      --------
      Assuming an object `obj` of a class that has `reset_masses` method, `debug` attribute,
      and `program_mass_dictionary`:

          >>> obj.debug = True
          >>> obj.reset_masses()
          Re setting mass dictionary to the program values

      Make sure that `program_mass_dictionary` is set properly before calling this
      method to avoid setting the masses to an unintended state.



   .. py:method:: set_edited_masses(masses)

      Sets the edited masses attribute if the length matches the original masses attribute.

      Parameters
      ----------
      masses : list
          A list of mass values to be set as the edited masses.

      Returns
      -------
      None

      Notes
      -----
      The method updates the `edited_masses` attribute only if the length of the input list matches the length of the `masses` attribute of the object. If they do not match, an error message is printed, and `edited_masses` is set to `None`.

      Returns
      -------
      None



.. py:class:: UnitCell(a=None, b=None, c=None, alpha=None, beta=None, gamma=None, units='Angstrom')

   Hold unit cell information and its associated calculated properties.

   Initialize the class instance with optional lattice parameters and calculate the reciprocal lattice.

   Parameters
   ----------
   a, b, c : float or array, optional
       Lattice vectors or cell lengths. If not specified, they default to [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], and [0.0, 0.0, 1.0], respectively.
   alpha, beta, gamma : float, optional
       Lattice angles (in degrees). These are only used if all three angles are specified, otherwise, the default lattice (orthorhombic) is used.
   units : str
       An optional unit such as 'a.u., au bohr angs angstrom Angs Angstrom or nm'  The default is Angstrom.

   Notes
   -----
   This constructor initializes an instance with empty lists for fractional coordinates, xyz coordinates, element names, atom labels, bonds, and molecules. It also initializes an empty list for atomic masses and zero for total mass. If the angles alpha, beta, and gamma are provided, it attempts to convert the provided lattice parameters (a, b, c, alpha, beta, gamma) into a 3x3 lattice matrix. If not, it directly assigns a, b, and c as lattice vectors. Finally, it calculates and sets the reciprocal lattice for the instance.

   Examples
   --------
   ::

       a = [2.853604, -1.647529, 0.0]
       b = [0.0,       3.295058, 0.0]
       c = [0.0,       0.0,      5.284824]
       cell = UnitCell( a, b, c )
       cell.set_element_names(['Zn', 'Zn', 'O', 'O'])
       coords = [ [ 0.333333,    0.666667,    0.000900 ]
                  [ 0.666667,    0.333333,    0.500900 ]
                  [ 0.333333,    0.666667,    0.381600 ]
                  [ 0.666667,    0.333333,    0.881600 ] ]
       cell.set_fractional_coordinates(coords)
       cell.print()


   .. py:method:: _calculate_reciprocal_lattice(lattice)

      Calculate the reciprocal lattice

      Parameters
      ----------
      3x3 list of floats
          Lattice as [a, b, c] where a/b/c are [x,y,z]

      Returns
      -------
      None

      Returns
      -------
      sets the reciprocal lattice vectors



   .. py:method:: calculateCentreOfMass(atom_list=None, output='xyz')

      Calculate the centre of mass for a given set of atoms.

      Parameters
      ----------
      atom_list : list, optional
          A list of atom indices for which the centre of mass should be calculated.
          If None, the centre of mass will be calculated for all atoms in the system. Default is None.
      output : {'xyz', 'mass', 'abc'}, optional
          The output requested:
          - 'xyz' returns the centre of mass coordinates in Cartesian (x, y, z) units.
          - 'mass' returns the total mass of the atoms in `atom_list`.
          - 'abc' returns the centre of mass in fractional (a, b, c) coordinates.
          If not specified, 'xyz' is used as default.

      Returns
      -------
      numpy.ndarray or float or tuple
          The centre of mass as requested by output:
          - If 'xyz', returns a numpy array with the x, y, z coordinates of the centre of mass.
          - If 'mass', returns a float representing the total mass of the specified atoms.
          - If 'abc', returns a numpy array with the a, b, c fractional coordinates of the centre of mass.
          - If the ouput are not recognized, a tuple containing the total mass, Cartesian coordinates, and fractional coordinates of the centre of mass is returned.

      See Also
      --------
      convert_xyz_to_abc : A method to convert Cartesian coordinates to fractional coordinates.

      Examples
      --------
      >>> calculateCentreOfMass(atom_list=[1, 2, 3], output='xyz')
      array([0.1, 0.2, 0.3])
      >>> calculateCentreOfMass(output='mass')
      50.2
      >>> calculateCentreOfMass(output='abc')
      array([0.4, 0.5, 0.6])



   .. py:method:: calculate_molecular_contents(scale=1.1, tolerance=0.1, radii=None)

      Finds whole molecules in the unit cell.

      Does this by creating a supercell and exploring adjacent cells to see if there is any bonding to atoms in the adjacent cell
      A new unit cell is created containing whole molecules, the order of the atoms in the new cell is different.
      The routine returns the new unit cell, the number of molecules and the old ordering of the atoms.

      Parameters
      ----------
      scale : float, optional
          The scale factor applied to the covalent radii. Default is 1.1
      tolerance : float, optional. Default is 0.1
          The tolerance added to the scaled sum of radii to determine the maximum allowable distance between atoms i and j for them to be considered bonded.
      radii : a dictionary, optional
          A dictionary of covalent radii for the atoms, key is the element name.  If not given then the package radii are used from PDielec.Constants

      Returns
      -------
      new_unit_cell, len(new_molecules), old_order

      Notes
      -----
      The formula used to calculate the largest distance apart atoms i and j can be for a bond is:
      `scale * (radi + radj) + tolerance`



   .. py:method:: convert_abc_to_unitcell(a, b, c, alpha_degs, beta_degs, gamma_degs)

      Convert a, b, c, alpha, beta, gamma to a unit cell

      Parameters
      ----------
      a : type
          Description of parameter `a`.
      b : type
          Description of parameter `b`.
      c : type
          Description of parameter `c`.
      alpha : type
          Description of parameter `alpha`.
      beta : type
          Description of parameter `beta`.
      gamma : type
          Description of parameter `gamma`.

      Returns
      -------
      lattice : list of floats (3,3) list
          The lattice parameters



   .. py:method:: convert_abc_to_xyz(abc)

      Convert abc coordinates to xyz coordinates.

      Parameters
      ----------
      abc : list of fractional coordinates

      Returns
      -------
      xyz : list of coordinates




   .. py:method:: convert_hkl_to_xyz(hkl)

      Convert hkl miller indices to xyz coordinates.

      Parameters
      ----------
      hkl : list of hkl coordinates

      Returns
      -------
      xyz : list of xyz coordinates



   .. py:method:: convert_unitcell_to_abc()

      Convert a unit cell to the equivalent a, b, c, alpha, beta, gamma designation.

      Parameters
      ----------
      None

      Returns
      -------
      a, b, c : float
          The lengths of the cell edges.
      alpha, beta, gamma : float
          The angles between the edges in degrees.



   .. py:method:: convert_xyz_to_abc(xyz)

      Convert xyz coordinates to abc lattice coordinates.

      Parameters
      ----------
      xyz: list of coordinates

      Returns
      -------
      abc : list of fractional coordinates



   .. py:method:: find_symmetry(symprec=1e-05, angle_tolerance=-1.0)

      Find the space group symmetry of the unit cell.

      Parameters
      ----------
      None

      Returns
      -------
      a tuple
          (international table symbol, number])



   .. py:method:: getBoundingBox(units='Angstrom')

      Generate the corners and edges of a bounding box.

      This method calculates the corners and edges of a bounding box based on predefined coordinates. These coordinates are transformed using a conversion method before being paired into edges.

      Parameters
      ----------
      units : str
          An optional unit of length required for output, default is Angstrom

      Returns
      -------
      tuple of list
          A tuple containing two elements:
          - The first element is a list of corners' coordinates after conversion (`list` of `np.ndarray`).
          - The second element is a list of tuples, each consisting of a pair of corners representing an edge (`list` of `tuple`).

      Example
      -------
      To fetch the bounding box coordinates and edges, simply call: ::

          corners_xyz, edges = object.getBoundingBox()




   .. py:method:: getDensity(units='cm')

      Calculate the density of the crystal.

      Returns the density in g/cc.  If the mass is not known, then returns 1.0

      Parameters
      ----------
      units : str
          Optional parameter giving the output unit of length, default is cm, so volume will be cm3

      Returns
      -------
      float
          The density in gms/cc



   .. py:method:: getVolume(units='cm')

      Calculate the volume

      Parameters
      ----------
      units : str
          An optional string indicating the required unit of length for the output value, default is cm

      Returns
      -------
      volume : float



   .. py:method:: get_atom_labels()

      get the atom labels for a molecule.

      If the labels have not been set, then a list of labels is created from the element names

      Parameters
      ----------
      None
          A list containing the labels of atoms.

      Returns
      -------
      A list of atom labels



   .. py:method:: get_atomic_masses()

      Get the atomic masses for the elements.

      Parameters
      ----------
      None

      Returns
      -------
      masses : list
          The atomic masses 



   .. py:method:: get_atomic_numbers()

      Get the atomic numbers for the elements.

      Parameters
      ----------
      None

      Returns
      -------
      list of ints
          The atomic numbers



   .. py:method:: get_bond_angles()

      Returns a list of atoms that form bonded angles for the unit cell

      It also returns a list of the angles in degrees

      Parameters
      ----------
      None

      Returns
      -------
      (list of 3 integer tuples, list of bond angles)
          list of angles is a list of 3 integers denoting involved in the angle
          list of angles is a list of floats



   .. py:method:: get_bonds()

      Returns a list of bonds for the unit cell

      It also returns a list of the bond lengths in angstrom

      Parameters
      ----------
      None

      Returns
      -------
      (list of bonds, list of bondlengths)
          list of bonds is a list of pairs of integers denoting a bond
          list of bond lengths is a list of floats



   .. py:method:: get_torsions()

      Returns a list of atoms that form torsion angles for the unit cell

      It also returns a list of the angles in degrees

      Parameters
      ----------
      None

      Returns
      -------
      (list of 4 integer tuples, list of torsion angles)
          list of torsions is a list of 4 integers denoting involved in the angle
          list of angles is a list of floats



   .. py:method:: print()

      Prints the details of the given unit cell.

      This method prints formatted details of the unit cell object, including lattice parameters (a, b, c, alpha, beta, gamma), lattice vectors, element names, fractional coordinates, Cartesian coordinates, and molecular information if any molecules are defined within the unit cell.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: set_atom_labels(atom_labels)

      Set the atom labels for a molecule.

      Parameters
      ----------
      atom_labels : list
          A list containing the labels of atoms.

      Returns
      -------
      None

      Notes
      -----
      This method updates the `atom_labels` attribute of the molecule with the
      provided list of atom labels. Each element in the input `atom_labels` list 
      is appended to the `self.atom_labels` attribute.



   .. py:method:: set_atomic_masses(masses)

      Set the atomic masses for the elements.

      Parameters
      ----------
      masses : list
          The atomic masses to be assigned. This can be a list or a dictionary of atomic masses.

      Returns
      -------
      None



   .. py:method:: set_bonds(bonds)

      Define a list of bonds for the unit cell

      Some checking is performed.  If the bonds has duplicates but in a different order, then they are removed.

      Parameters
      ----------
      bonds : a list of integer tuple
         The bonding list for the cell

      Returns
      -------
      None



   .. py:method:: set_element_names(element_names)

      Set the names of elements in the object after cleaning them up.

      Parameters
      ----------
      element_names : list
          A list of strings representing element names to be cleaned and stored.

      Returns
      -------
      None

      Notes
      -----
      This function takes a list of element names, cleans each name using the 
      `cleanup_symbol` function (not defined here), and then updates the object's 
      `element_names` attribute with the cleaned names.



   .. py:method:: set_fractional_coordinates(coords)

      Set the fractional coordinates and calculate the xyz coordinates.

      Parameters
      ----------
      coords : a list of fractional coordinates

      Returns
      -------
      None



   .. py:method:: set_molecules(molecules)

      Define a list of molecules, each molecule is a list of atom coordinates.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: set_xyz_coordinates(coords, units='Angstrom')

      Set the xyz coordinates and calculate the fractional coordinates.

      Parameters
      ----------
      coords : a list of xyz coordinates
          A list of xyz coordinates, the unit of length must agree with the lattice
      units : str
          A unit of length for the input values.  The default is Angstrom.

      Returns
      -------
      None



   .. py:method:: write_cif(filename=None, file_=sys.stdout)

      Write the crystallographic information file (CIF) representation of a structure.

      Parameters
      ----------
      filename : str, optional
          The name of the file to be written. If not provided, the CIF data is printed to stdout.
      file\_ : object, optional
          An output stream object. Default is sys.stdout.

      Returns
      -------
      None

      Notes
      -----
      This method prints the CIF representation of a structure, including the space group,
      cell dimensions, angles, volume, and the fractional coordinates of the atoms.
      Any lengths are converted to Angstrom, the volumes is give as Angstrom^3
      If a filename is provided, the CIF data will be written to that file. Otherwise,
      it will be printed to standard output.

      Examples
      --------
      To print the CIF representation to standard output, simply call the method without arguments:

      >>> cell.write_cif()

      To write the CIF representation to a file named "example.cif":

      >>> cell.write_cif('example.cif')



.. py:class:: pdielec_io(filename, mode)

   A class for reading lines from a file and providing an interface similar to file objects.

   The class opens a file upon initialization, reads its lines into memory,
   and allows sequential reading of these lines through the readline method.
   It also provides a close method to reset the reading process.
   This speeds up the reading of a file using the usual python readline() method.

   Parameters
   ----------
   filename : str
       The path to the file to be read.
   mode : str
       The mode in which the file should be opened (e.g., 'r' for read).

   Attributes
   ----------
   filename : str
       The path to the file that was opened.
   lines : list of str
       The lines read from the file.
   index : int
       The current position (line) in the file being read, initialized at 0.
   end : int
       The total number of lines in the file.

   Methods
   -------
   readline()
       Reads the next line from the file. If the end of the file has been reached,
       returns an empty string.
   close()
       Resets the reading process by resetting the current line index and
       deleting all lines read from the file from memory.


   .. py:method:: close()

      Closes the current object session.

      Resets the index to 0 and deletes the lines attribute from the object.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      This method is designed to perform cleanup tasks, such as resetting object state and freeing resources by deleting attributes. Calling this method on an object may render it unusable for certain operations that depend on the deleted attributes.



   .. py:method:: readline()

      Read and return the next line from the stored lines.

      This method reads a line from the current position within an internal list of lines
      and then advances the position so that subsequent calls will return subsequent lines.
      If the end of the list is reached, it returns an empty string.

      Parameters
      ----------
      None

      Returns
      -------
      str
          The next line in the internal list of lines, or an empty string if the end of the list is reached.



.. py:data:: amu

.. py:data:: hartree2ev
   :value: 27.211386245988


