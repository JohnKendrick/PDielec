PDielec.Materials
=================

.. py:module:: PDielec.Materials

.. autoapi-nested-parse::

   Materials DataBase

   An interface to the spreadsheet which holds materials data



Classes
-------

.. autoapisummary::

   PDielec.Materials.Constant
   PDielec.Materials.Debug
   PDielec.Materials.DrudeLorentz
   PDielec.Materials.External
   PDielec.Materials.FPSQ
   PDielec.Materials.Material
   PDielec.Materials.MaterialsDataBase
   PDielec.Materials.Sellmeier
   PDielec.Materials.Tabulated
   PDielec.Materials.UnitCell


Module Contents
---------------

.. py:class:: Constant(name, permittivity=None, density=None, cell=None)

   Bases: :py:obj:`Material`


   A class representing a material with constant scalar permittivity, inheriting from the `Material` class.

   Attributes
   ----------
   type : str
       The type of material, set to 'Constant permittivity'.

   Methods
   -------
   Inherits methods from the `Material` class.


.. py:class:: Debug(debug, text, level=0)

   A class aimed at providing a structured way to include debug messages in code.

   Methods
   -------
   print(args, level=0)
       Prints debug messages based on the debug level provided as argument compared to the object's debug level.
   state()
       Returns the current state (enabled or disabled) of debugging.

   Notes
   -----
   The `print` method provides a flexible way to include additional information along with the base debug message, allowing for a detailed and adjustable debugging output.


   .. py:method:: print(*args, level=0)

      Prints message if debugging level allows.

      Parameters
      ----------
      args
          Variable length argument list for the message to be printed.
      level : int, optional
          The level of the message that determines if it gets printed or not,
          based on the instance's `level`. Default value is 0.

      Notes
      -----
      This method will only print the message if the instance's `debug` flag is True
      and the provided `level` is less than or equal to the instance's `level`.



   .. py:method:: state()

      Get the debug state.

      Parameters
      ----------
      None

      Returns
      -------
      The current debug state.



.. py:class:: DrudeLorentz(name, epsinf, omegas, strengths, gammas, density=None, cell=None)

   Bases: :py:obj:`Material`


   A subclass representing a material with a Lorentz-Drude model permittivity.

   Parameters
   ----------
   name : str
       The name of the material.
   epsinf : array_like
       Epsilon infinity, either a 3x3 list or a 3x3 array representing the static dielectric constant.
   omegas : list
       The transverse optical (TO) frequencies.
   strengths : list
       The oscillator strengths for each resonance.
   gammas : list
       The damping (or broadening) factors for each resonance.
   density : float, optional
       The density of the material in grams per milliliter (g/ml). Default is None.
   cell : unitCell, optional
       The unit cell of the material. Default is None.

   Notes
   -----
   The Drude-Lorentz model is used to calculate the permittivity of the material
   by considering the contributions from both free electrons (Drude) and bound electrons
   (Lorentz). This class requires specifying the infinite frequency dielectric constant (`epsinf`),
   the transverse optical frequencies (`omegas`), the oscillator strengths (`strengths`),
   and the damping factors (`gammas`) for each resonance in the material.

   Examples
   --------
   >>> drude_lorentz_material = DrudeLorentz("Gold", [[1, 0, 0], [0, 1, 0], [0, 0, 1]],
   ...                                       [0.5, 1.0], [1.0, 2.0], [0.2, 0.1],
   ...                                       density=19.3)
   This represents a Drude-Lorentz material with the name "Gold", an isotropic epsilon infinity,
   two resonances with specified frequencies, strengths, and damping factors, and 
   a density of 19.3 g/ml.


.. py:class:: External(name, permittivityObject=None, density=None, cell=None)

   Bases: :py:obj:`Material`


   A class for representing materials with externally specified permittivity.

   This class inherits from the `Material` class and is used to define materials
   where the permittivity is specified externally, rather than calculated or predefined.
   Permittivity can be a complex value indicating both the real and imaginary parts.


.. py:class:: FPSQ(name, epsinf, omega_tos, gamma_tos, omega_los, gamma_los, density=None, cell=None)

   Bases: :py:obj:`Material`


   Class representing a material with a FPSQ model for permittivity.

   Parameters
   ----------
   name : str
       The name of the material.
   epsinf : array_like
       Epsilon infinity (eps0), either a 3x3 list or a 3x3 array representing the dielectric constant at infinite frequency.
   omega_tos : list
       The transverse optical (TO) frequencies.
   gamma_tos : list
       The TO absorption widths.
   omega_los : list
       The longitudinal optical (LO) frequencies.
   gamma_los : list
       The LO absorption widths.
   density : float, optional
       The density of the material in grams per milliliter (g/ml).
   cell : unitCell, optional
       The unit cell of the material.

   Notes
   -----
   The FPSQ (fitted phonon simple quantum) model is used to describe the permittivity of the material. This model is based on the harmonic oscillator model and describes the permittivity as a function of frequency.


.. py:class:: Material(name, density=None, permittivityObject=None, cell=None)

   A class for representing materials with properties like name, density, permittivity, and unit cell.

   The Material class also contains the permittivity object for the material.  
   The permittivity object is an instance of :class:`~PDielec.DielectricFunction.DielectricFunction` or one its children.
   The permittivity object is responsible for calculating the permittivity at the given frequency.
   The subclasses which inherit from the Material class are: Constant, External, DrudeLorentz, FPSQ, Sellmeier, and Tabulated.
   Each subclass has an initialisation routine which instantiates the permittivity object of the appropriate type for the material.
   The relationship between the Material subclass and the DielectricFunction subclass of the permittivity object is shown below.

   +---------------------------+-------------------------------------------------------------+
   + Material subclass         + DielectricFunction subclass                                 +
   +===========================+=============================================================+
   + :class:`Constant`         + :class:`~PDielec.DielectricFunction.Constant`               +
   +---------------------------+-------------------------------------------------------------+
   + :class:`External`         + This class is passed a permittivity object which has been   +
   +                           + defined externally                                          +
   +---------------------------+-------------------------------------------------------------+
   + :class:`DrudeLorentz`     + :class:`~PDielec.DielectricFunction.DrudeLorentz`           +
   +---------------------------+-------------------------------------------------------------+
   + :class:`FPSQ`             + :class:`~PDielec.DielectricFunction.FPSQ`                   +
   +---------------------------+-------------------------------------------------------------+
   + :class:`Sellmeier`        + :class:`~PDielec.DielectricFunction.Sellmeier`              +
   +---------------------------+-------------------------------------------------------------+
   + :class:`Tabulated`        +  - :class:`~PDielec.DielectricFunction.TabulateScalar`      +
   +                           +  - :class:`~PDielec.DielectricFunction.Tabulate3`           +
   +                           +  - :class:`~PDielec.DielectricFunction.Tabulate3`           +
   +                           +  - :class:`~PDielec.DielectricFunction.Tabulate6`           +
   +---------------------------+-------------------------------------------------------------+

   Parameters
   ----------
   name : str
       The name of the material.
   density : float, optional
       The density of the material. If not provided and a cell is given, it will be calculated based on the cell.
   permittivityObject : :class:`~PDielec.DielectricFunction.DielectricFunction`, optional
       An object representing the dielectric function of the material. This is intended to be passed by classes that inherit from Material, and it should contain methods for calculating scalar/tensor permittivity. (see :class:`~PDielec.DielectricFunction.DielectricFunction` and its sub-classes)
   cell : :class:`~PDielec.UnitCell.UnitCell`, optional
       An object representing the unit cell of the material. If provided without a density, the density will be calculated from this cell. (See :class:`~PDielec.UnitCell.UnitCell`)

   Attributes
   ----------
   density : float
       The density of the material, which may be calculated based on the cell if not provided initially.
   cell : Cell or None
       The unit cell of the material if provided.
   name : str
       The name of the material.
   type : str
       A string indicating the type of the object. Defaults to 'Base Class' for the base Material class.
   permittivityObject : DielectricFunction or None
       An object to handle the permittivity calculations for the material.

   Methods
   -------
   getName()
       Returns the name of the material.
   getInformation()
       Returns information about the material, including its type and, if applicable, its permittivity frequency range.
   getSigmas()
       If the material has a lorentzian dielectric this routine returns the sigma parameters
   setSigmas()
       If the material has a lorentzian dielectric this routine sets the sigma parameters
   getFrequencies()
       If the material has a lorentzian dielectric this routine returns the frequencies
   setFrequencies()
       If the material has a lorentzian dielectric this routine sets the frequencies
   getOscillatorStrengths()
       If the material has a lorentzian dielectric this routine returns the oscillator strengths
   setOscillatorStrengths()
       If the material has a lorentzian dielectric this routine sets the oscillator strengths
   print()
       Prints information about the material, such as its name, density, type, and permittivity details.
   isScalar()
       Checks and returns True if the material’s permittivity is scalar.
   isTensor()
       Checks and returns True if the material’s permittivity is tensor.
   getPermittivityObject()
       Returns the permittivityObject of the material.
   getPermittivityFunction()
       Returns the permittivity function from the permittivityObject.
   getDensity()
       Returns the density of the material.
   setCell(cell)
       Sets the cell of the material and updates the density if it was initially None.
   getCell()
       Returns the cell of the material.
   setDensity(value)
       Sets the density of the material.
   setEpsilonInfinity(eps)
       Sets the epsilon infinity of the material
   setPermittivityObject(permittivityObject)
       Sets the permittivityObject for the material.


   .. py:method:: getCell()

      Return the cell

      Parameters
      ----------
      None

      Returns
      -------
      self.cell



   .. py:method:: getDensity()

      Return the density

      Parameters
      ----------
      None

      Returns
      -------
      self.density



   .. py:method:: getFrequencies()

      Gets the frequencies for a Lorentzian permittivity

      Parameters
      ----------
      None

      Returns
      -------
      1d array of floats
          Returns the frequencies for a Lorentzian function in cm-1



   .. py:method:: getInformation()

      Returns information about the material.

      Parameters
      ----------
      None

      Returns
      -------
      str
          A description of the material.



   .. py:method:: getName()

      Get the name attribute of the object.

      Parameters
      ----------
      None

      Returns
      -------
      str
          The name attribute of the object.



   .. py:method:: getOscillatorStrengths()

      Gets the oscillator strengths for a Lorentzian permittivity

      The oscillator strength of each transition is a 3x3 matrix

      Parameters
      ----------
      None

      Returns
      -------
      list of 3x3 array of floats
          Returns the oscillator strengths for a Lorentzian permittivity function in cm-1



   .. py:method:: getPermittivityFunction()

      Returns the permittivity function.

      Parameters
      ----------
      None

      Returns
      -------
      permittivityObjectFunction
          Return the permittivity object function



   .. py:method:: getPermittivityObject()

      Returns the permittivity object.

      Parameters
      ----------
      None

      Returns
      -------
      permittivityObject
          Return the permittivity object (dielectric function object)



   .. py:method:: getSigmas()

      Gets the sigma parameters for a Lorentzian permittivity

      Parameters
      ----------
      None

      Returns
      -------
      1d array of floats
          Returns the sigma parameters for a Lorentz permittivity function in cm-1



   .. py:method:: isScalar()

      Returns true if the material returns a scalar permittivity.

      Parameters
      ----------
      None

      Returns
      -------
      bool
          True if the material returns a scalar permittivity, False otherwise.



   .. py:method:: isTensor()

      Returns true if the material returns a tensor permittivity.

      Parameters
      ----------
      None

      Returns
      -------
      bool
          True if the material returns a tensor permittivity, False otherwise.



   .. py:method:: print()

      Print information about the material.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: setCell(cell)

      Set the unit cell

      Parameters
      ----------
      cell : a unit cell

      Returns
      -------
      None



   .. py:method:: setDensity(value)

      Set the density

      Parameters
      ----------
      value : float

      Returns
      -------
      None



   .. py:method:: setFrequencies(frequencies)

      Sets the frequencies for a Lorentzian permittivity

      Parameters
      ----------
      frequencies : 1D array of floats
          The frequencies for a Drude-Lorentzian permittivity in cm-1

      Returns
      -------
      None




   .. py:method:: setOscillatorStrengths(strengths)

      Sets the oscillator strengths for a Lorentzian permittivity

      Parameters
      ----------
      strengths : a 3x3 array of floats for each frequency
          The oscillator strengths for a Lorentzian permittivity function in cm-1

      Returns
      -------
      None




   .. py:method:: setPermittivityObject(permittivityObject)

      Set the permittivity object.

      Parameters
      ----------
      permittivityObject : a permittivity object (dielectric function object)

      Returns
      -------
      None



   .. py:method:: setSigmas(sigmas)

      Sets the sigma parameters for a Lorentzian permittivity

      Parameters
      ----------
      sigmas : 1D array of floats
          The sigma parameters for a Lorentzian permittivity function in cm-1

      Returns
      -------
      None




.. py:class:: MaterialsDataBase(filename, debug=False)

   A class for managing a database of materials' properties.

   This database is initialized from an Excel spreadsheet which contains various material properties including names, densities, refractive indices, and permittivities, among others.
   Additional functionalities include validation checks, retrieval of sheet names, material information, and specific data based on the property of interest (e.g., constant permittivity, tabulated refractive index).
   The getMaterial() method returns a material with a dielectric function of the appropriate type.
   There are routines which read (process) the data stored for the following dielectric functions:

   - constant refractive index
   - constant permittivity
   - tabulated refractive index (may be 1, 3 or 6 parameters for isotropic, uniaxial or anisotropic)
   - tabulated permittivity (may be 1, 3 or 6 parameters for isotropic, uniaxial or anisotropic)
   - Lorentz-Drude
   - FPSQ (Four parameters semi-quantum model)
   - Sellmeier

   Further information can be found in the following classes and their sub-classes:

   - :class:`~PDielec.Materials.Material`
   - :class:`~PDielec.DielectricFunction.DielectricFunction`

   Parameters
   ----------
   filename : str
       The filename of the spreadsheet/database.
   debug : bool, optional
       Set to true for additional debugging information

   Attributes
   ----------
   filename : str
       The path to the Excel spreadsheet containing materials data.
   sheetNames : list
       A list of strings representing the names of the sheets within the Excel spreadsheet.
   debug : bool, optional
       A flag indicating whether debugging information should be printed. Default is False.

   Methods
   -------
   __init__(filename, debug=False)
       Initializes the MaterialsDataBase class with a given Excel spreadsheet and a debug flag.
   getFileName()
       Returns the filename of the Excel spreadsheet being used as the database.
   valid()
       Checks if the spreadsheet is a valid materials database based on certain criteria.
   getSheetNames()
       Retrieves a sorted list of sheet names within the spreadsheet, including additional predefined names.
   getMaterial(sheet)
       Returns a material object based on the data in a given sheet of the Excel spreadsheet.
   readConstantRefractiveIndex(sheet, worksheet, density)
       Reads constant refractive index data for a given material from the spreadsheet.
   readConstantPermittivity(sheet, worksheet, density)
       Reads constant permittivity data for a given material from the spreadsheet.
   readTabulatedRefractiveIndex(sheet, worksheet, density)
       Reads tabulated refractive index data for a given material from the spreadsheet.
   readTabulatedPermittivity(sheet, worksheet, density)
       Reads tabulated permittivity data for a given material from the spreadsheet.
   readLorentzDrude(sheet, worksheet, density, unitCell)
       Reads Drude-Lorentz model parameters for a given material from the spreadsheet.
   readFPSQ(sheet, worksheet, density, unitCell)
       Reads FPSQ model parameters for a given material from the spreadsheet.
   readSellmeier(sheet, worksheet, density, unitCell)
       Reads Sellmeier model parameters for a given material from the spreadsheet.


   .. py:method:: getFileName()

      Return the filename

      Parameters
      ----------
      None

      Returns
      -------
      str
          The filename.



   .. py:method:: getMaterial(sheet)

      Return a material object based on the data in sheet (an excel sheet).

      If one of the following is requested: air, vacuum, ptfe, ldpe, mdpe, kbr, nujol, then
      the material is created even if it is not in the database.

      Parameters
      ----------
      sheet : Excel sheet
          The excel sheet containing the material data.

      Returns
      -------
      Material object
          The material object created from the excel sheet data.



   .. py:method:: getSheetNames()

      Returns a list of the sheetnames in the database.

      As well as the sheets in the database, there are some default materials which will be added
      to the list of materials and which are provided internally by this module.

      Parameters
      ----------
      None

      Returns
      -------
      list
          A list of the sheet names present in the database.



   .. py:method:: readConstantPermittivity(sheet, worksheet, density)

      Read constant permittivity data from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The worksheet instance.
      density : float
          The density of the material.

      Returns
      -------
      None



   .. py:method:: readConstantRefractiveIndex(sheet, worksheet, density)

      Read constant refractive index from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The worksheet.
      density : float
          The density of the material.

      Returns
      -------
      None



   .. py:method:: readFPSQ(sheet, worksheet, density, unitCell)

      Read FPSQ data from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The actual worksheet object.
      density : float
          The density of the material.
      unitCell : object
          The unit cell.

      Returns
      -------
      None



   .. py:method:: readLorentzDrude(sheet, worksheet, density, unitCell)

      Read Drude-Lorentz data from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The worksheet.
      density : float
          The density of the material.
      unitCell : object
          The unit cell.

      Returns
      -------
      None



   .. py:method:: readSellmeier(sheet, worksheet, density, unitCell)

      Read Sellmeier data from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The worksheet.
      density : float
          The density of the material.
      unitCell : object
          The unit cell.

      Returns
      -------
      None



   .. py:method:: readTabulatedPermittivity(sheet, worksheet, density)

      Read tabulated permittivity data from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The worksheet.
      density : float
          The density of the material.

      Returns
      -------
      None



   .. py:method:: readTabulatedRefractiveIndex(sheet, worksheet, density)

      Read tabulated refractive index data from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The worksheet.
      density : float
          The density of the material.

      Returns
      -------
      None



   .. py:method:: valid()

      Test to see if the spreadsheet is a valid materials database.

      Parameters
      ----------
      None

      Returns
      -------
      bool
          True if the spreadshee is 'valid'

      Notes
      -----
      None



.. py:class:: Sellmeier(name, Bs, Cs, density=None, cell=None)

   Bases: :py:obj:`Material`


   A class to define materials using the Sellmeier model for permittivity.

   Parameters
   ----------
   name : str
       The name of the material.
   Bs : list or array_like
       The B parameters (coefficients) in the Sellmeier equation.
   Cs : list or array_like
       The C parameters (coefficients) in the Sellmeier equation.
   density : float, optional
       The density of the material in g/ml. Default is None.
   cell : unitCell, optional
       The unit cell of the material. Default is None.

   Attributes
   ----------
   type : str
       The type of the material, which is 'Sellmeier' for instances of this class.

   Methods
   -------
   __init__(self, name, Bs, Cs, density=None, cell=None)
       Initializes a Sellmeier material with specified parameters.


.. py:class:: Tabulated(name, vs_cm1=None, permittivities=None, density=None, cell=None)

   Bases: :py:obj:`Material`


   A class for materials with tabulated permittivities.

   Parameters
   ----------
   name : str
       The name of the material.
   vs_cm1 : list or None, optional
       The list of tabulated frequencies in cm-1. Defaults to None.
   permittivities : array-like or None, optional
       The permittivities, either as a single vector (n,) or a tensor (3,n) or (6,n) for more complex materials.
       Defaults to None.
   density : float or None, optional
       The density of the material in g/ml. Defaults to None.
   cell : unitCell or None, optional
       The unit cell of the material. Defaults to None.

   Notes
   -----
   - This class is designed to handle materials with a constant permittivity as well as those
     requiring more complex permittivity tensors.
   - The permittivity can be defined using either a scalar for simple materials or tensors for materials
     that require a support matrix.
   - The constructor converts the input lists of frequencies (`vs_cm1`) and permittivities into numpy arrays,
     and then generates the appropriate permittivity object depending on the complexity of the material's permittivities.

   Examples
   --------
   >>> material1 = Tabulated("Quartz", vs_cm1=[500, 1000, 1500], permittivities=[2.1, 2.3, 2.5], density=2.65)
   >>> material2 = Tabulated("Synthetic", vs_cm1=[200, 400, 600], permittivities=[[2.1, 2.3, 2.5], [2.4, 2.6, 2.8], [3.0, 3.2, 3.4]], density=1.5)


   .. py:method:: setEpsilonInfinity(eps)

      Sets the value of epsilon infinity for the material

      Parameters
      ----------
      eps : float or 3x3 np array
          The epsilon infinity tensor.  If a single float then an isotropic 3x3 np array is created

      Returns
      -------
      None



.. py:class:: UnitCell(a=None, b=None, c=None, alpha=None, beta=None, gamma=None, units='Angstrom')

   Hold unit cell information and its associated calculated properties.

   Initialize the class instance with optional lattice parameters and calculate the reciprocal lattice.

   Parameters
   ----------
   a, b, c : float or array, optional
       Lattice vectors or cell lengths. If not specified, they default to [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], and [0.0, 0.0, 1.0], respectively.
   alpha, beta, gamma : float, optional
       Lattice angles (in degrees). These are only used if all three angles are specified, otherwise, the default lattice (orthorhombic) is used.
   units : str
       An optional unit such as 'a.u., au bohr angs angstrom Angs Angstrom or nm'  The default is Angstrom.

   Notes
   -----
   This constructor initializes an instance with empty lists for fractional coordinates, xyz coordinates, element names, atom labels, bonds, and molecules. It also initializes an empty list for atomic masses and zero for total mass. If the angles alpha, beta, and gamma are provided, it attempts to convert the provided lattice parameters (a, b, c, alpha, beta, gamma) into a 3x3 lattice matrix. If not, it directly assigns a, b, and c as lattice vectors. Finally, it calculates and sets the reciprocal lattice for the instance.

   Examples
   --------
   ::

       a = [2.853604, -1.647529, 0.0]
       b = [0.0,       3.295058, 0.0]
       c = [0.0,       0.0,      5.284824]
       cell = UnitCell( a, b, c )
       cell.set_element_names(['Zn', 'Zn', 'O', 'O'])
       coords = [ [ 0.333333,    0.666667,    0.000900 ]
                  [ 0.666667,    0.333333,    0.500900 ]
                  [ 0.333333,    0.666667,    0.381600 ]
                  [ 0.666667,    0.333333,    0.881600 ] ]
       cell.set_fractional_coordinates(coords)
       cell.print()


   .. py:method:: _calculate_reciprocal_lattice(lattice)

      Calculate the reciprocal lattice

      Parameters
      ----------
      3x3 list of floats
          Lattice as [a, b, c] where a/b/c are [x,y,z]

      Returns
      -------
      None

      Returns
      -------
      sets the reciprocal lattice vectors



   .. py:method:: calculateCentreOfMass(atom_list=None, output='xyz')

      Calculate the centre of mass for a given set of atoms.

      Parameters
      ----------
      atom_list : list, optional
          A list of atom indices for which the centre of mass should be calculated.
          If None, the centre of mass will be calculated for all atoms in the system. Default is None.
      output : {'xyz', 'mass', 'abc'}, optional
          The output requested:
          - 'xyz' returns the centre of mass coordinates in Cartesian (x, y, z) units.
          - 'mass' returns the total mass of the atoms in `atom_list`.
          - 'abc' returns the centre of mass in fractional (a, b, c) coordinates.
          If not specified, 'xyz' is used as default.

      Returns
      -------
      numpy.ndarray or float or tuple
          The centre of mass as requested by output:
          - If 'xyz', returns a numpy array with the x, y, z coordinates of the centre of mass.
          - If 'mass', returns a float representing the total mass of the specified atoms.
          - If 'abc', returns a numpy array with the a, b, c fractional coordinates of the centre of mass.
          - If the ouput are not recognized, a tuple containing the total mass, Cartesian coordinates, and fractional coordinates of the centre of mass is returned.

      See Also
      --------
      convert_xyz_to_abc : A method to convert Cartesian coordinates to fractional coordinates.

      Examples
      --------
      >>> calculateCentreOfMass(atom_list=[1, 2, 3], output='xyz')
      array([0.1, 0.2, 0.3])
      >>> calculateCentreOfMass(output='mass')
      50.2
      >>> calculateCentreOfMass(output='abc')
      array([0.4, 0.5, 0.6])



   .. py:method:: calculate_molecular_contents(scale=1.1, tolerance=0.1, radii=None)

      Finds whole molecules in the unit cell.

      Does this by creating a supercell and exploring adjacent cells to see if there is any bonding to atoms in the adjacent cell
      A new unit cell is created containing whole molecules, the order of the atoms in the new cell is different.
      The routine returns the new unit cell, the number of molecules and the old ordering of the atoms.

      Parameters
      ----------
      scale : float, optional
          The scale factor applied to the covalent radii. Default is 1.1
      tolerance : float, optional. Default is 0.1
          The tolerance added to the scaled sum of radii to determine the maximum allowable distance between atoms i and j for them to be considered bonded.
      radii : a dictionary, optional
          A dictionary of covalent radii for the atoms, key is the element name.  If not given then the package radii are used from PDielec.Constants

      Returns
      -------
      new_unit_cell, len(new_molecules), old_order

      Notes
      -----
      The formula used to calculate the largest distance apart atoms i and j can be for a bond is:
      `scale * (radi + radj) + tolerance`



   .. py:method:: convert_abc_to_unitcell(a, b, c, alpha_degs, beta_degs, gamma_degs)

      Convert a, b, c, alpha, beta, gamma to a unit cell

      Parameters
      ----------
      a : type
          Description of parameter `a`.
      b : type
          Description of parameter `b`.
      c : type
          Description of parameter `c`.
      alpha : type
          Description of parameter `alpha`.
      beta : type
          Description of parameter `beta`.
      gamma : type
          Description of parameter `gamma`.

      Returns
      -------
      lattice : list of floats (3,3) list
          The lattice parameters



   .. py:method:: convert_abc_to_xyz(abc)

      Convert abc coordinates to xyz coordinates.

      Parameters
      ----------
      abc : list of fractional coordinates

      Returns
      -------
      xyz : list of coordinates




   .. py:method:: convert_hkl_to_xyz(hkl)

      Convert hkl miller indices to xyz coordinates.

      Parameters
      ----------
      hkl : list of hkl coordinates

      Returns
      -------
      xyz : list of xyz coordinates



   .. py:method:: convert_unitcell_to_abc()

      Convert a unit cell to the equivalent a, b, c, alpha, beta, gamma designation.

      Parameters
      ----------
      None

      Returns
      -------
      a, b, c : float
          The lengths of the cell edges.
      alpha, beta, gamma : float
          The angles between the edges in degrees.



   .. py:method:: convert_xyz_to_abc(xyz)

      Convert xyz coordinates to abc lattice coordinates.

      Parameters
      ----------
      xyz: list of coordinates

      Returns
      -------
      abc : list of fractional coordinates



   .. py:method:: find_symmetry(symprec=1e-05, angle_tolerance=-1.0)

      Find the space group symmetry of the unit cell.

      Parameters
      ----------
      None

      Returns
      -------
      a tuple
          (international table symbol, number])



   .. py:method:: getBoundingBox(units='Angstrom')

      Generate the corners and edges of a bounding box.

      This method calculates the corners and edges of a bounding box based on predefined coordinates. These coordinates are transformed using a conversion method before being paired into edges.

      Parameters
      ----------
      units : str
          An optional unit of length required for output, default is Angstrom

      Returns
      -------
      tuple of list
          A tuple containing two elements:
          - The first element is a list of corners' coordinates after conversion (`list` of `np.ndarray`).
          - The second element is a list of tuples, each consisting of a pair of corners representing an edge (`list` of `tuple`).

      Example
      -------
      To fetch the bounding box coordinates and edges, simply call: ::

          corners_xyz, edges = object.getBoundingBox()




   .. py:method:: getDensity(units='cm')

      Calculate the density of the crystal.

      Returns the density in g/cc.  If the mass is not known, then returns 1.0

      Parameters
      ----------
      units : str
          Optional parameter giving the output unit of length, default is cm, so volume will be cm3

      Returns
      -------
      float
          The density in gms/cc



   .. py:method:: getVolume(units='cm')

      Calculate the volume

      Parameters
      ----------
      units : str
          An optional string indicating the required unit of length for the output value, default is cm

      Returns
      -------
      volume : float



   .. py:method:: get_atom_labels()

      get the atom labels for a molecule.

      If the labels have not been set, then a list of labels is created from the element names

      Parameters
      ----------
      None
          A list containing the labels of atoms.

      Returns
      -------
      A list of atom labels



   .. py:method:: get_atomic_masses()

      Get the atomic masses for the elements.

      Parameters
      ----------
      None

      Returns
      -------
      masses : list
          The atomic masses 



   .. py:method:: get_atomic_numbers()

      Get the atomic numbers for the elements.

      Parameters
      ----------
      None

      Returns
      -------
      list of ints
          The atomic numbers



   .. py:method:: get_bond_angles()

      Returns a list of atoms that form bonded angles for the unit cell

      It also returns a list of the angles in degrees

      Parameters
      ----------
      None

      Returns
      -------
      (list of 3 integer tuples, list of bond angles)
          list of angles is a list of 3 integers denoting involved in the angle
          list of angles is a list of floats



   .. py:method:: get_bonds()

      Returns a list of bonds for the unit cell

      It also returns a list of the bond lengths in angstrom

      Parameters
      ----------
      None

      Returns
      -------
      (list of bonds, list of bondlengths)
          list of bonds is a list of pairs of integers denoting a bond
          list of bond lengths is a list of floats



   .. py:method:: get_torsions()

      Returns a list of atoms that form torsion angles for the unit cell

      It also returns a list of the angles in degrees

      Parameters
      ----------
      None

      Returns
      -------
      (list of 4 integer tuples, list of torsion angles)
          list of torsions is a list of 4 integers denoting involved in the angle
          list of angles is a list of floats



   .. py:method:: print()

      Prints the details of the given unit cell.

      This method prints formatted details of the unit cell object, including lattice parameters (a, b, c, alpha, beta, gamma), lattice vectors, element names, fractional coordinates, Cartesian coordinates, and molecular information if any molecules are defined within the unit cell.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: set_atom_labels(atom_labels)

      Set the atom labels for a molecule.

      Parameters
      ----------
      atom_labels : list
          A list containing the labels of atoms.

      Returns
      -------
      None

      Notes
      -----
      This method updates the `atom_labels` attribute of the molecule with the
      provided list of atom labels. Each element in the input `atom_labels` list 
      is appended to the `self.atom_labels` attribute.



   .. py:method:: set_atomic_masses(masses)

      Set the atomic masses for the elements.

      Parameters
      ----------
      masses : list
          The atomic masses to be assigned. This can be a list or a dictionary of atomic masses.

      Returns
      -------
      None



   .. py:method:: set_bonds(bonds)

      Define a list of bonds for the unit cell

      Some checking is performed.  If the bonds has duplicates but in a different order, then they are removed.

      Parameters
      ----------
      bonds : a list of integer tuple
         The bonding list for the cell

      Returns
      -------
      None



   .. py:method:: set_element_names(element_names)

      Set the names of elements in the object after cleaning them up.

      Parameters
      ----------
      element_names : list
          A list of strings representing element names to be cleaned and stored.

      Returns
      -------
      None

      Notes
      -----
      This function takes a list of element names, cleans each name using the 
      `cleanup_symbol` function (not defined here), and then updates the object's 
      `element_names` attribute with the cleaned names.



   .. py:method:: set_fractional_coordinates(coords)

      Set the fractional coordinates and calculate the xyz coordinates.

      Parameters
      ----------
      coords : a list of fractional coordinates

      Returns
      -------
      None



   .. py:method:: set_molecules(molecules)

      Define a list of molecules, each molecule is a list of atom coordinates.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: set_xyz_coordinates(coords, units='Angstrom')

      Set the xyz coordinates and calculate the fractional coordinates.

      Parameters
      ----------
      coords : a list of xyz coordinates
          A list of xyz coordinates, the unit of length must agree with the lattice
      units : str
          A unit of length for the input values.  The default is Angstrom.

      Returns
      -------
      None



   .. py:method:: write_cif(filename=None, file_=sys.stdout)

      Write the crystallographic information file (CIF) representation of a structure.

      Parameters
      ----------
      filename : str, optional
          The name of the file to be written. If not provided, the CIF data is printed to stdout.
      file\_ : object, optional
          An output stream object. Default is sys.stdout.

      Returns
      -------
      None

      Notes
      -----
      This method prints the CIF representation of a structure, including the space group,
      cell dimensions, angles, volume, and the fractional coordinates of the atoms.
      Any lengths are converted to Angstrom, the volumes is give as Angstrom^3
      If a filename is provided, the CIF data will be written to that file. Otherwise,
      it will be printed to standard output.

      Examples
      --------
      To print the CIF representation to standard output, simply call the method without arguments:

      >>> cell.write_cif()

      To write the CIF representation to a file named "example.cif":

      >>> cell.write_cif('example.cif')



