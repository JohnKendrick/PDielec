PDielec.HelperRoutines
======================

.. py:module:: PDielec.HelperRoutines

.. autoapi-nested-parse::

   Helper Routines - Useful for scripting and in Jupyter Notebooks

   These routines are a useful starting point for investigating the way the code operates



Attributes
----------

.. autoapisummary::

   PDielec.HelperRoutines.amu
   PDielec.HelperRoutines.angstrom
   PDielec.HelperRoutines.average_masses
   PDielec.HelperRoutines.isotope_masses
   PDielec.HelperRoutines.wavenumber


Classes
-------

.. autoapisummary::

   PDielec.HelperRoutines.External
   PDielec.HelperRoutines.Material
   PDielec.HelperRoutines.MaterialsDataBase
   PDielec.HelperRoutines.SingleCrystalLayer


Functions
---------

.. autoapisummary::

   PDielec.HelperRoutines.calculateDFTPermittivityObject
   PDielec.HelperRoutines.calculatePowderSpectrum
   PDielec.HelperRoutines.calculateSingleCrystalSpectrum
   PDielec.HelperRoutines.getMaterial
   PDielec.HelperRoutines.solve_single_crystal_equations


Module Contents
---------------

.. py:class:: External(name, permittivityObject=None, density=None, cell=None)

   Bases: :py:obj:`Material`


   A class for representing materials with externally specified permittivity.

   This class inherits from the `Material` class and is used to define materials
   where the permittivity is specified externally, rather than calculated or predefined.
   Permittivity can be a complex value indicating both the real and imaginary parts.


.. py:class:: Material(name, density=None, permittivityObject=None, cell=None)

   A class for representing materials with properties like name, density, permittivity, and unit cell.

   The Material class also contains the permittivity object for the material.  
   The permittivity object is an instance of :class:`~PDielec.DielectricFunction.DielectricFunction` or one its children.
   The permittivity object is responsible for calculating the permittivity at the given frequency.
   The subclasses which inherit from the Material class are: Constant, External, DrudeLorentz, FPSQ, Sellmeier, and Tabulated.
   Each subclass has an initialisation routine which instantiates the permittivity object of the appropriate type for the material.
   The relationship between the Material subclass and the DielectricFunction subclass of the permittivity object is shown below.

   +---------------------------+-------------------------------------------------------------+
   + Material subclass         + DielectricFunction subclass                                 +
   +===========================+=============================================================+
   + :class:`Constant`         + :class:`~PDielec.DielectricFunction.Constant`               +
   +---------------------------+-------------------------------------------------------------+
   + :class:`External`         + This class is passed a permittivity object which has been   +
   +                           + defined externally                                          +
   +---------------------------+-------------------------------------------------------------+
   + :class:`DrudeLorentz`     + :class:`~PDielec.DielectricFunction.DrudeLorentz`           +
   +---------------------------+-------------------------------------------------------------+
   + :class:`FPSQ`             + :class:`~PDielec.DielectricFunction.FPSQ`                   +
   +---------------------------+-------------------------------------------------------------+
   + :class:`Sellmeier`        + :class:`~PDielec.DielectricFunction.Sellmeier`              +
   +---------------------------+-------------------------------------------------------------+
   + :class:`Tabulated`        +  - :class:`~PDielec.DielectricFunction.TabulateScalar`      +
   +                           +  - :class:`~PDielec.DielectricFunction.Tabulate3`           +
   +                           +  - :class:`~PDielec.DielectricFunction.Tabulate3`           +
   +                           +  - :class:`~PDielec.DielectricFunction.Tabulate6`           +
   +---------------------------+-------------------------------------------------------------+

   Parameters
   ----------
   name : str
       The name of the material.
   density : float, optional
       The density of the material. If not provided and a cell is given, it will be calculated based on the cell.
   permittivityObject : :class:`~PDielec.DielectricFunction.DielectricFunction`, optional
       An object representing the dielectric function of the material. This is intended to be passed by classes that inherit from Material, and it should contain methods for calculating scalar/tensor permittivity. (see :class:`~PDielec.DielectricFunction.DielectricFunction` and its sub-classes)
   cell : :class:`~PDielec.UnitCell.UnitCell`, optional
       An object representing the unit cell of the material. If provided without a density, the density will be calculated from this cell. (See :class:`~PDielec.UnitCell.UnitCell`)

   Attributes
   ----------
   density : float
       The density of the material, which may be calculated based on the cell if not provided initially.
   cell : Cell or None
       The unit cell of the material if provided.
   name : str
       The name of the material.
   type : str
       A string indicating the type of the object. Defaults to 'Base Class' for the base Material class.
   permittivityObject : DielectricFunction or None
       An object to handle the permittivity calculations for the material.

   Methods
   -------
   getName()
       Returns the name of the material.
   getInformation()
       Returns information about the material, including its type and, if applicable, its permittivity frequency range.
   getSigmas()
       If the material has a lorentzian dielectric this routine returns the sigma parameters
   setSigmas()
       If the material has a lorentzian dielectric this routine sets the sigma parameters
   getFrequencies()
       If the material has a lorentzian dielectric this routine returns the frequencies
   setFrequencies()
       If the material has a lorentzian dielectric this routine sets the frequencies
   getOscillatorStrengths()
       If the material has a lorentzian dielectric this routine returns the oscillator strengths
   setOscillatorStrengths()
       If the material has a lorentzian dielectric this routine sets the oscillator strengths
   print()
       Prints information about the material, such as its name, density, type, and permittivity details.
   isScalar()
       Checks and returns True if the material’s permittivity is scalar.
   isTensor()
       Checks and returns True if the material’s permittivity is tensor.
   getPermittivityObject()
       Returns the permittivityObject of the material.
   getPermittivityFunction()
       Returns the permittivity function from the permittivityObject.
   getDensity()
       Returns the density of the material.
   setCell(cell)
       Sets the cell of the material and updates the density if it was initially None.
   getCell()
       Returns the cell of the material.
   setDensity(value)
       Sets the density of the material.
   setEpsilonInfinity(eps)
       Sets the epsilon infinity of the material
   setPermittivityObject(permittivityObject)
       Sets the permittivityObject for the material.


   .. py:method:: getCell()

      Return the cell

      Parameters
      ----------
      None

      Returns
      -------
      self.cell



   .. py:method:: getDensity()

      Return the density

      Parameters
      ----------
      None

      Returns
      -------
      self.density



   .. py:method:: getFrequencies()

      Gets the frequencies for a Lorentzian permittivity

      Parameters
      ----------
      None

      Returns
      -------
      1d array of floats
          Returns the frequencies for a Lorentzian function in cm-1



   .. py:method:: getInformation()

      Returns information about the material.

      Parameters
      ----------
      None

      Returns
      -------
      str
          A description of the material.



   .. py:method:: getName()

      Get the name attribute of the object.

      Parameters
      ----------
      None

      Returns
      -------
      str
          The name attribute of the object.



   .. py:method:: getOscillatorStrengths()

      Gets the oscillator strengths for a Lorentzian permittivity

      The oscillator strength of each transition is a 3x3 matrix

      Parameters
      ----------
      None

      Returns
      -------
      list of 3x3 array of floats
          Returns the oscillator strengths for a Lorentzian permittivity function in cm-1



   .. py:method:: getPermittivityFunction()

      Returns the permittivity function.

      Parameters
      ----------
      None

      Returns
      -------
      permittivityObjectFunction
          Return the permittivity object function



   .. py:method:: getPermittivityObject()

      Returns the permittivity object.

      Parameters
      ----------
      None

      Returns
      -------
      permittivityObject
          Return the permittivity object (dielectric function object)



   .. py:method:: getSigmas()

      Gets the sigma parameters for a Lorentzian permittivity

      Parameters
      ----------
      None

      Returns
      -------
      1d array of floats
          Returns the sigma parameters for a Lorentz permittivity function in cm-1



   .. py:method:: isScalar()

      Returns true if the material returns a scalar permittivity.

      Parameters
      ----------
      None

      Returns
      -------
      bool
          True if the material returns a scalar permittivity, False otherwise.



   .. py:method:: isTensor()

      Returns true if the material returns a tensor permittivity.

      Parameters
      ----------
      None

      Returns
      -------
      bool
          True if the material returns a tensor permittivity, False otherwise.



   .. py:method:: print()

      Print information about the material.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: setCell(cell)

      Set the unit cell

      Parameters
      ----------
      cell : a unit cell

      Returns
      -------
      None



   .. py:method:: setDensity(value)

      Set the density

      Parameters
      ----------
      value : float

      Returns
      -------
      None



   .. py:method:: setFrequencies(frequencies)

      Sets the frequencies for a Lorentzian permittivity

      Parameters
      ----------
      frequencies : 1D array of floats
          The frequencies for a Drude-Lorentzian permittivity in cm-1

      Returns
      -------
      None




   .. py:method:: setOscillatorStrengths(strengths)

      Sets the oscillator strengths for a Lorentzian permittivity

      Parameters
      ----------
      strengths : a 3x3 array of floats for each frequency
          The oscillator strengths for a Lorentzian permittivity function in cm-1

      Returns
      -------
      None




   .. py:method:: setPermittivityObject(permittivityObject)

      Set the permittivity object.

      Parameters
      ----------
      permittivityObject : a permittivity object (dielectric function object)

      Returns
      -------
      None



   .. py:method:: setSigmas(sigmas)

      Sets the sigma parameters for a Lorentzian permittivity

      Parameters
      ----------
      sigmas : 1D array of floats
          The sigma parameters for a Lorentzian permittivity function in cm-1

      Returns
      -------
      None




.. py:class:: MaterialsDataBase(filename, debug=False)

   A class for managing a database of materials' properties.

   This database is initialized from an Excel spreadsheet which contains various material properties including names, densities, refractive indices, and permittivities, among others.
   Additional functionalities include validation checks, retrieval of sheet names, material information, and specific data based on the property of interest (e.g., constant permittivity, tabulated refractive index).
   The getMaterial() method returns a material with a dielectric function of the appropriate type.
   There are routines which read (process) the data stored for the following dielectric functions:

   - constant refractive index
   - constant permittivity
   - tabulated refractive index (may be 1, 3 or 6 parameters for isotropic, uniaxial or anisotropic)
   - tabulated permittivity (may be 1, 3 or 6 parameters for isotropic, uniaxial or anisotropic)
   - Lorentz-Drude
   - FPSQ (Four parameters semi-quantum model)
   - Sellmeier

   Further information can be found in the following classes and their sub-classes:

   - :class:`~PDielec.Materials.Material`
   - :class:`~PDielec.DielectricFunction.DielectricFunction`

   Parameters
   ----------
   filename : str
       The filename of the spreadsheet/database.
   debug : bool, optional
       Set to true for additional debugging information

   Attributes
   ----------
   filename : str
       The path to the Excel spreadsheet containing materials data.
   sheetNames : list
       A list of strings representing the names of the sheets within the Excel spreadsheet.
   debug : bool, optional
       A flag indicating whether debugging information should be printed. Default is False.

   Methods
   -------
   __init__(filename, debug=False)
       Initializes the MaterialsDataBase class with a given Excel spreadsheet and a debug flag.
   getFileName()
       Returns the filename of the Excel spreadsheet being used as the database.
   valid()
       Checks if the spreadsheet is a valid materials database based on certain criteria.
   getSheetNames()
       Retrieves a sorted list of sheet names within the spreadsheet, including additional predefined names.
   getMaterial(sheet)
       Returns a material object based on the data in a given sheet of the Excel spreadsheet.
   readConstantRefractiveIndex(sheet, worksheet, density)
       Reads constant refractive index data for a given material from the spreadsheet.
   readConstantPermittivity(sheet, worksheet, density)
       Reads constant permittivity data for a given material from the spreadsheet.
   readTabulatedRefractiveIndex(sheet, worksheet, density)
       Reads tabulated refractive index data for a given material from the spreadsheet.
   readTabulatedPermittivity(sheet, worksheet, density)
       Reads tabulated permittivity data for a given material from the spreadsheet.
   readLorentzDrude(sheet, worksheet, density, unitCell)
       Reads Drude-Lorentz model parameters for a given material from the spreadsheet.
   readFPSQ(sheet, worksheet, density, unitCell)
       Reads FPSQ model parameters for a given material from the spreadsheet.
   readSellmeier(sheet, worksheet, density, unitCell)
       Reads Sellmeier model parameters for a given material from the spreadsheet.


   .. py:method:: getFileName()

      Return the filename

      Parameters
      ----------
      None

      Returns
      -------
      str
          The filename.



   .. py:method:: getMaterial(sheet)

      Return a material object based on the data in sheet (an excel sheet).

      If one of the following is requested: air, vacuum, ptfe, ldpe, mdpe, kbr, nujol, then
      the material is created even if it is not in the database.

      Parameters
      ----------
      sheet : Excel sheet
          The excel sheet containing the material data.

      Returns
      -------
      Material object
          The material object created from the excel sheet data.



   .. py:method:: getSheetNames()

      Returns a list of the sheetnames in the database.

      As well as the sheets in the database, there are some default materials which will be added
      to the list of materials and which are provided internally by this module.

      Parameters
      ----------
      None

      Returns
      -------
      list
          A list of the sheet names present in the database.



   .. py:method:: readConstantPermittivity(sheet, worksheet, density)

      Read constant permittivity data from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The worksheet instance.
      density : float
          The density of the material.

      Returns
      -------
      None



   .. py:method:: readConstantRefractiveIndex(sheet, worksheet, density)

      Read constant refractive index from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The worksheet.
      density : float
          The density of the material.

      Returns
      -------
      None



   .. py:method:: readFPSQ(sheet, worksheet, density, unitCell)

      Read FPSQ data from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The actual worksheet object.
      density : float
          The density of the material.
      unitCell : object
          The unit cell.

      Returns
      -------
      None



   .. py:method:: readLorentzDrude(sheet, worksheet, density, unitCell)

      Read Drude-Lorentz data from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The worksheet.
      density : float
          The density of the material.
      unitCell : object
          The unit cell.

      Returns
      -------
      None



   .. py:method:: readSellmeier(sheet, worksheet, density, unitCell)

      Read Sellmeier data from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The worksheet.
      density : float
          The density of the material.
      unitCell : object
          The unit cell.

      Returns
      -------
      None



   .. py:method:: readTabulatedPermittivity(sheet, worksheet, density)

      Read tabulated permittivity data from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The worksheet.
      density : float
          The density of the material.

      Returns
      -------
      None



   .. py:method:: readTabulatedRefractiveIndex(sheet, worksheet, density)

      Read tabulated refractive index data from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The worksheet.
      density : float
          The density of the material.

      Returns
      -------
      None



   .. py:method:: valid()

      Test to see if the spreadsheet is a valid materials database.

      Parameters
      ----------
      None

      Returns
      -------
      bool
          True if the spreadshee is 'valid'

      Notes
      -----
      None



.. py:class:: SingleCrystalLayer(material, hkl=[0, 0, 1], azimuthal=0.0, thickness=0.0, thicknessUnit='nm', incoherentOption='Coherent', dielectricFlag=False)

   A class representing a single crystal layer.

   Parameters
   ----------
   material : Material
       An instance of Material object (see :class:`~PDielec.Materials.Material`), which contains:
         - name (str)
         - density (float)
         - permittivity (float)
         - unit cell (UnitCell)
   hkl : list of int
       A list of 3 integers defining the plane of interest.
   azimuthal : float
       The azimuthal angle of rotation of the crystal about the z-axis.
   thickness : float
       The thickness of the layer in the specified thickness units.
   thicknessUnits : {'ang','nm', 'um', 'mm', 'cm'}
       The units of thickness measurement.
   incoherentOption : {'Coherent', 'Incoherent (intensity)', 'Incoherent (phase cancelling)', 'Incoherent (phase averaging)', 'Incoherent non-reflective'}
       The option for handling incoherent scattering. 
   dielectricFlag : bool
       True if the layer material is the dielectric being studied (ie it was read in as a DFT calculation), False otherwise.

   Attributes
   ----------
   material : Material
       The material of the layer. (See :class:`~PDielec.Materials.Material`)
   hkl : list of int
       The Miller indices of the plane of interest in the crystal.
   incoherentOption : str
       The incoherent option for the layer.
   azimuthal : float
       The azimuthal angle of rotation of the crystal about the z-axis, in degrees.
   thickness : float
       The thickness of the layer in the specified units.
   thicknessUnit : str
       The units used for the thickness measurement.
   dielectricFlag : bool
       A flag indicating if the layer material is the dielectric material.
   euler : ndarray
       The Euler rotation matrix for the crystal to laboratory frame transformation, stored as a 3x3 numpy array with `dtype=np.longdouble`.
   euler_inverse : ndarray
       The inverse of the Euler rotation matrix, stored as a 3x3 numpy array with `dtype=np.longdouble`.
   labframe_w : 
       Placeholder attribute for GUI interactions, not initialized within the class definition.
   labframe : ndarray
       The lattice vectors of the crystal in the laboratory frame, stored as a numpy array.
   phaseShift : float
       The phase shift for the layer.

   Methods
   -------
   print()
       Prints the main attributes of the layer.
   getPhaseShift()
       Returns the phase shift for the layer.
   setPhaseShift(phaseShift)
       Sets the phase shift for the layer.
   setAzimuthal(angle)
       Sets the azimuthal angle of the layer and recalculates the Euler matrix.
   isCoherent()
       Returns True if the layer is coherent, False otherwise.
   getIncoherentOption()
       Returns the incoherent interaction option for the layer.
   setIncoherentOption(option)
       Sets the incoherent interaction option for the layer.
   getAzimuthal()
       Returns the azimuthal angle.
   setThickness(thickness)
       Sets the thickness of the layer.
   getThickness()
       Returns the thickness of the layer.
   getThicknessInMetres()
       Converts and returns the thickness of the layer in meters.
   setThicknessUnit(thicknessUnit)
       Sets the unit of thickness measurement.
   getThicknessUnit()
       Returns the unit of thickness measurement.
   setHKL(hkl)
       Sets the Miller indices for the plane of interest in the crystal.
   getHKL()
       Returns the Miller indices of the plane of interest.
   getName()
       Returns the name of the material.
   getMaterial()
       Returns the material object associated with the layer.
   getPermittivityFunction()
       Returns the permittivity tensor for the crystal at the surface and azimuthal angle specified.
   isTensor()
       Returns True if the material of the layer is a tensor material, False otherwise.
   isScalar()
       Returns True if the material of the layer is a scalar material, False otherwise.
   isDielectric()
       Returns True if the material of the layer is the dielectric being studied.
   calculate_euler_matrix()
       Calculates the Euler angles for the crystal to lab frame transformation.
   azimuthalRotationMatrix(angle)
       Calculates a rotation matrix for the azimuthal angle.
   changeLabFrameInfo()
       Changes the Lab Frame Information, used with GUI interactions.
   getLabFrame()
       Returns the information of the crystal axes in the laboratory frame.
   calculateLabFrameEpsilon(v)
       Computes the permittivity tensor for the material at a given frequency and transforms it to the laboratory frame.
   invert(m)
       Calculates the inverse of a given 3x3 complex matrix.

   Notes
   -----
   The class heavily relies on numpy for various calculations including matrix manipulations and rotation calculations.


   .. py:method:: azimuthalRotationMatrix(angle)

      Calculate a rotation matrix for the azimuthal angle (in degrees).

      Parameters
      ----------
      angle : float

      Returns
      -------
      ndarray 3x3
          The rotation matrix for the given azimuthal angle.



   .. py:method:: calculateLabFrameEpsilon(v)

      Get the permittivity for this material at frequency v and transform it to the laboratory frame.

      Parameters
      ----------
      None

      Parameters
      ----------
      v : float
          Frequency at which the permittivity is evaluated.

      Returns
      -------
      float
          The permittivity of the material in the laboratory frame.



   .. py:method:: calculate_euler_matrix()

      Calculate the Euler angles for the crystal to lab transformation.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: changeLabFrameInfo()

      Change the Lab Frame Info panel.

      Information about the relationship between the crystal and labframe coordinate systems is presented.



   .. py:method:: getAzimuthal()

      Get the azimuthal angle

      Parameters
      ----------
      None

      Returns
      -------
      float
          The azimuthal angle.



   .. py:method:: getHKL()

      Get the hkl.

      Parameters
      ----------
      None

      Returns
      -------
      list of 3 ints



   .. py:method:: getIncoherentOption()

      Returns the value of the incoherent option attribute.

      This will return 'Coherent' for a coherent layer

      Parameters
      ----------
      None

      Returns
      -------
      type
          The value of the `incoherentOption` attribute of the object.



   .. py:method:: getLabFrame()

      Return the a, b, and c cell axes in the laboratory frame coordinates.

      Parameters
      ----------
      None

      Returns
      -------
      (a, b, c) : 3 lists of floats each with 3 elements
          - a, The a cell axis in the laboratory frame.
          - b, The b cell axis in the laboratory frame.
          - c, The c cell axis in the laboratory frame.




   .. py:method:: getMaterial()

      Return the material

      Parameters
      ----------
      None

      Returns
      -------
      an instance of a Materials object



   .. py:method:: getName()

      Return the material name

      Parameters
      ----------
      None

      Returns
      -------
      str
          The name of the material.



   .. py:method:: getPermittivityFunction()

      Return the permittivity function associated with this material

      Parameters
      ----------
      None

      Returns
      -------
      A permittivity function



   .. py:method:: getPhaseShift()

      Get the phase shift for the layer

      Parameters
      ----------
      None

      Returns
      -------
      float
          The phase shift used in the averaged phase shift method



   .. py:method:: getThickness()

      Get the thickness

      Parameters
      ----------
      None

      Returns
      -------
      float



   .. py:method:: getThicknessInMetres()

      Get the thickness in metres

      Parameters
      ----------
      None

      Returns
      -------
      float



   .. py:method:: getThicknessUnit()

      Get the thickness unit

      Parameters
      ----------
      None

      Returns
      -------
      str



   .. py:method:: invert(m)

      Calculate the inverse of m

      Parameters
      ----------
      m : complex 3x3 array
          The input matrix for which to calculate the inverse.

      Returns
      -------
      numpy.ndarray
          The inverse of `m` as a 3x3 complex numpy array.



   .. py:method:: isCoherent()

      Returns True if this is a coherent layer, False otherwise.

      Parameters
      ----------
      None

      Returns
      -------
      bool
          True if this is a coherent layer, False otherwise.



   .. py:method:: isDielectric()

      Return true if the material of the layer is the dielectric material.

      Parameters
      ----------
      None

      Returns
      -------
      bool
          True if the material of the layer is the dielectric material, otherwise False.



   .. py:method:: isScalar()

      Return true if the material of the layer is a scalar material.

      Parameters
      ----------
      None

      Returns
      -------
      bool
          True if the material of the layer is a scalar material, False otherwise.



   .. py:method:: isTensor()

      Return true if the material of the layer is a tensor material.

      Parameters
      ----------
      None

      Returns
      -------
      bool
          True if the material of the layer is a tensor material, False otherwise.



   .. py:method:: print()

      Print the main attributes of the layer.

      Parameters
      ----------
      None



   .. py:method:: setAzimuthal(angle)

      Set the azimuthal angle of the layer and calculate the Euler matrix.

      Parameters
      ----------
      angle : float
         The azimuthal angle in degrees

      Returns
      -------
      None



   .. py:method:: setHKL(hkl)

      Set the hkl and recalculate the Euler matrix

      Parameters
      ----------
      hkl : list of 3 ints

      Returns
      -------
      None



   .. py:method:: setIncoherentOption(option)

      Set the incoherent option

      Parameters
      ----------
      option : string

      Returns
      -------
      None



   .. py:method:: setPhaseShift(phaseShift)

      Set the phase shift for the layer

      Parameters
      ----------
      phaseShift : float
         The phase shift

      Returns
      -------
      None



   .. py:method:: setThickness(thickness)

      Set the thickness.

      Parameters
      ----------
      thickness : float

      Returns
      -------
      None



   .. py:method:: setThicknessUnit(thicknessUnit)

      Set the thickness unit.

      Parameters
      ----------
      thicknessUnit

      Returns
      -------
      None



.. py:function:: calculateDFTPermittivityObject(reader, sigma=5.0, eckart=True, mass_definition='Average')

   Define a permittivity object for the DFT calculation from the given reader

   This routine reads in the details of the DFT calculation
   Calculates the hessian and normal modes
   Calculates the oscillator strength
   Finally it defines a permittivity object from which the permittivity can be calculated

   Parameters
   ----------
   reader : outputReader object
       An output reader object, see :class:`~PDielec.GenericOutputReader` and its sub-classes.
   sigma  : float
       Default Lorentzian widths in cm-1
   eckart  : boolean
       If true apply eckart conditions in the reader
   mass_definition : string or list of floats
       Default is 'Average'
       If a list of floats it is a list of the masses to be used.
       If a string it must be one of 'Average', 'Isotope' or 'Program' (case is irrelevant)
       - Average causes the average weight for the element to be used
       - Isotope causes the most common isotope weight to be used
       - Program means use the mass used by the program

   Returns
   -------
   permittivityObject (see :class:`~PDielec.DielectricFunction.DielectricFunction` and its sub-classes)



.. py:function:: calculatePowderSpectrum(frequencies_cm1, dielectric, matrix, volume_fraction, method='Maxwell-Garnett')

   Calculate the powder IR spectrum of a mixture of spherical dielectric particles in a matrix with a given volume fraction.

   Parameters
   ----------
   frequencies_cm1 : list
       A list of frequencies in cm-1.
   dielectric : material
       A material with a tensor permittivity.
   matrix : material
       A material with a scalar permittivity.
   volume_fraction : float
       The volume fraction of dielectric.
   method : str
       One of 'Maxwell-Garnett', 'Bruggeman'.

   Returns
   -------
   absorption,permittivity : tuple of np.arrays
       absorption: Absorption coefficients in cm-1.
       permittivity: Complex permittivities

   Example
   -------
   ```
   frequencies_cm1 = np.arange( 0, 200, 0.2 )
   matrix = getMaterial('ptfe')
   dielectric = getMaterial('Sapphire')
   method = 'Maxwell-Garnett' 
   volume_fraction = 0.1
   absorption,permittivity = calculatePowderSpectrum(frequencies_cm1,dielectric, matrix, volume_fraction)
   ```


.. py:function:: calculateSingleCrystalSpectrum(frequencies_cm1, layers, incident_angle, global_azimuthal_angle, method='Scattering matrix')

   Calculate a single crystal spectrum.

   Calculate a single crystal spectrum from the frequencies, a list of layers (:class:`~PDielec.GUI.SingleCrystalLayer.SingleCrystalLayer`), the incident angle
   the global azimuthal angle and optional specification of the method of calculation.
   Information about the layer class can be found here (:class:`~PDielec.GUI.SingleCrystalLayer.SingleCrystalLayer`)

   Parameters
   ----------
   frequencies_cm1 : list
       A list of frequencies in cm-1.
   layers : list
       A list of layers ( :class:`~PDielec.GUI.SingleCrystalLayer.SingleCrystalLayer`)
   incident_angle : float
       The incident angle in degrees.
   global_azimuthal_angle : float
       The global azimuthal angle in degrees.
   method : str
       The method for solving Maxwell's equation either 'Scattering matrix' (the default) or 'Transfer matrix. See (:class:`~PDielec.GTMcore.ScatteringMatrixSystem` or :class:`~PDielec.GTMcore.TransferMatrixSystem`) for more information.

   Returns
   -------
   ((reflp,refls) (tranp, trans) (absop, absos)) : list of nd.arrrays
       - reflp the p- polarised reflection at each frequency as an np.array
       - refls the s- polarised reflection at each frequency as an np.array
       - tranp the p- polarised transmittance at each frequency as an np.array
       - trans the s- polarised transmittance at each frequency as an np.array
       - absop the p- polarised absorptance at each frequency as an np.array
       - absos the s- polarised absorptance at each frequency as an np.array

   Example
   -------

   ::

       air = getMaterial('air')
       ptfe = getMaterial('ptfe')
       Sapphire = getMaterial('Sapphire')
       layers = []
       # Add a substrate
       layers.append(SingleCrystalLayer(ptfe,thickness=1.0,thicknessUnit='um'))
        # Add the dielectric layer
       layers.append(SingleCrystalLayer(Sapphire,hkl=[0,0,1],azimuthal=0.0,thickness=1.0,thicknessUnit='um',
                                        incoherentOption='Coherent'))
        # Add the superstrate
       layers.append(SingleCrystalLayer(air,thickness=1.0,thicknessUnit='um'))
       frequencies_cm1 = np.arange( 0, 200, 0.2 )
       incident_angle = 80.0
       global_azimuthal_angle = 0.0
       (reflectance, transmittance, absorptance) = calculateSingleCrystalSpectrum(frequencies_cm1,layers,incident_angl e, global_azimuthal_angle, method='Scattering matrix')



.. py:function:: getMaterial(name, dataBaseName='MaterialsDataBase.xlsx', qmprogram='vasp', eckart=True, mass_definition='Average')

   Get a material with the given name.

   If the name is a file name, it is treated as a DFT (Density Functional Theory) or experimental file.
   If the name is a material name in the material database, this is used instead.
   Information about the material class can be found here (:class:`~PDielec.Materials.Material`)

   Parameters
   ----------
   name : str
       The name of the material, which can be a file name or a material name existing in the database.
   dataBaseName : str
       The name of the database which will be searched from the material
   qmprogram : str, optional
       The name of the QM program used in the case of Phonopy DFT calculations
       Defaults to 'vasp'
   eckart  : boolean, optional
       If true apply eckart conditions in the reader. Defaults to true.
   mass_definition : string or list of floats, optional
       Default is 'Average'
       If a list of floats it is a list of the masses to be used.
       If a string it must be one of 'Average', 'Isotope' or 'Program' (case is irrelevant)
       - Average causes the average weight for the element to be used
       - Isotope causes the most common isotope weight to be used
       - Program means use the mass used by the program


   Returns
   -------
   Material (see :class:`~PDielec.Materials.Material`)
       The material obtained based on the given name.

   Examples
   --------
   ```
   material1 = get_material("example.dft")
   material2 = get_material("gold")
   ```


.. py:function:: solve_single_crystal_equations(layers, mode, theta, phi, psi, angleOfIncidence, sliceThickness, exponent_threshold, v)

   This is a routine suitable for a parallel call to the single crystal equation solver, system is a GTM system.

   Parameters
   ----------
   layers : list
       A list of material layers (their permittivity functions).
   mode : {'Transfer matrix', 'Scattering matrix'}
       The mode of calculation.
   theta : float
       The theta angle of the slab.
   phi : float
       The phi angle of the slab.
   psi : float
       The psi angle of the slab.
   angleOfIncidence : float
       The angle of incidence.
   sliceThickness : float
       A thickness in meters, used to subdivide thicker films.
       If zero, then the full thickness film is used.
   exponent_threshold : float
       The largest exponent allowed in the calculation of the propagation matrix.
   v : float
       The frequency of the light in cm^-1.

   Returns
   -------
       A tuple of :
           - v                 : the frequency
           - r                 : the reflectance coefficients
           - R                 : the reflectance 
           - t                 : the transmittance coefficients
           - T                 : the transmittance 
           - epsilon           : the DFT permittivity
           - errors            : a list of errors
           - largest_exponent  : the largest exponent



.. py:data:: amu

.. py:data:: angstrom

.. py:data:: average_masses

.. py:data:: isotope_masses

.. py:data:: wavenumber

