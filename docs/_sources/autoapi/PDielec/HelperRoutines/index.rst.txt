:py:mod:`PDielec.HelperRoutines`
================================

.. py:module:: PDielec.HelperRoutines

.. autoapi-nested-parse::

   Helper Routines - Useful for scripting and in Jupyter Notebooks.

   These routines are a useful starting point for investigating the way the code operates



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   PDielec.HelperRoutines.calculateDFTPermittivityObject
   PDielec.HelperRoutines.calculatePowderSpectrum
   PDielec.HelperRoutines.calculateSingleCrystalSpectrum
   PDielec.HelperRoutines.getMaterial



.. py:function:: calculateDFTPermittivityObject(reader, sigma=5.0, eckart=True, mass_definition='Average')

   Define a permittivity object for the DFT calculation from the given reader.

   This routine reads in the details of the DFT calculation
   Calculates the hessian and normal modes
   Calculates the oscillator strength
   Finally it defines a permittivity object from which the permittivity can be calculated

   Parameters
   ----------
   reader : outputReader object
       An output reader object, see :class:`~PDielec.GenericOutputReader` and its sub-classes.
   sigma  : float
       Default Lorentzian widths in cm-1
   eckart  : boolean
       If true apply eckart conditions in the reader
   mass_definition : string or list of floats
       Default is 'Average'
       If a list of floats it is a list of the masses to be used.
       If a string it must be one of 'Average', 'Isotope' or 'Program' (case is irrelevant)
       - Average causes the average weight for the element to be used
       - Isotope causes the most common isotope weight to be used
       - Program means use the mass used by the program

   Returns
   -------
   permittivityObject (see :class:`~PDielec.DielectricFunction.DielectricFunction` and its sub-classes)



.. py:function:: calculatePowderSpectrum(frequencies_cm1, dielectric, matrix, volume_fraction, method='Maxwell-Garnett')

   Calculate the powder IR spectrum of a mixture of spherical dielectric particles in a matrix with a given volume fraction.

   Parameters
   ----------
   frequencies_cm1 : list
       A list of frequencies in cm-1.
   dielectric : material
       A material with a tensor permittivity.
   matrix : material
       A material with a scalar permittivity.
   volume_fraction : float
       The volume fraction of dielectric.
   method : str
       One of 'Maxwell-Garnett', 'Bruggeman'.

   Returns
   -------
   absorption,permittivity : tuple of np.arrays
       absorption: Absorption coefficients in cm-1.
       permittivity: Complex permittivities

   Example
   -------
   ```
   frequencies_cm1 = np.arange( 0, 200, 0.2 )
   matrix = getMaterial('ptfe')
   dielectric = getMaterial('Sapphire')
   method = 'Maxwell-Garnett' 
   volume_fraction = 0.1
   absorption,permittivity = calculatePowderSpectrum(frequencies_cm1,dielectric, matrix, volume_fraction)
   ```



.. py:function:: calculateSingleCrystalSpectrum(frequencies_cm1, layers, incident_angle, global_azimuthal_angle, method='Scattering matrix')

   Calculate a single crystal spectrum.

   Calculate a single crystal spectrum from the frequencies, a list of layers (:class:`~PDielec.GUI.SingleCrystalLayer.SingleCrystalLayer`), the incident angle
   the global azimuthal angle and optional specification of the method of calculation.
   Information about the layer class can be found here (:class:`~PDielec.GUI.SingleCrystalLayer.SingleCrystalLayer`)

   Parameters
   ----------
   frequencies_cm1 : list
       A list of frequencies in cm-1.
   layers : list
       A list of layers ( :class:`~PDielec.GUI.SingleCrystalLayer.SingleCrystalLayer`)
   incident_angle : float
       The incident angle in degrees.
   global_azimuthal_angle : float
       The global azimuthal angle in degrees.
   method : str
       The method for solving Maxwell's equation either 'Scattering matrix' (the default) or 'Transfer matrix. See (:class:`~PDielec.GTMcore.ScatteringMatrixSystem` or :class:`~PDielec.GTMcore.TransferMatrixSystem`) for more information.

   Returns
   -------
   ((reflp,refls) (tranp, trans) (absop, absos)) : list of nd.arrrays
       - reflp the p- polarised reflection at each frequency as an np.array
       - refls the s- polarised reflection at each frequency as an np.array
       - tranp the p- polarised transmittance at each frequency as an np.array
       - trans the s- polarised transmittance at each frequency as an np.array
       - absop the p- polarised absorptance at each frequency as an np.array
       - absos the s- polarised absorptance at each frequency as an np.array

   Example
   -------

   ::

       air = getMaterial('air')
       ptfe = getMaterial('ptfe')
       Sapphire = getMaterial('Sapphire')
       layers = []
       # Add a substrate
       layers.append(SingleCrystalLayer(ptfe,thickness=1.0,thicknessUnit='um'))
        # Add the dielectric layer
       layers.append(SingleCrystalLayer(Sapphire,hkl=[0,0,1],azimuthal=0.0,thickness=1.0,thicknessUnit='um',
                                        incoherentOption='Coherent'))
        # Add the superstrate
       layers.append(SingleCrystalLayer(air,thickness=1.0,thicknessUnit='um'))
       frequencies_cm1 = np.arange( 0, 200, 0.2 )
       incident_angle = 80.0
       global_azimuthal_angle = 0.0
       (reflectance, transmittance, absorptance) = calculateSingleCrystalSpectrum(frequencies_cm1,layers,incident_angl e, global_azimuthal_angle, method='Scattering matrix')



.. py:function:: getMaterial(name, dataBaseName='MaterialsDataBase.xlsx', eckart=True, mass_definition='Average')

   Get a material with the given name.

   If the name is a file name, it is treated as a DFT (Density Functional Theory) or experimental file.
   If the name is a material name in the material database, this is used instead.
   Information about the material class can be found here (:class:`~PDielec.Materials.Material`)

   Parameters
   ----------
   name : str
       The name of the material, which can be a file name or a material name existing in the database.
   dataBaseName : str
       The name of the database which will be searched from the material
   eckart  : boolean, optional
       If true apply eckart conditions in the reader. Defaults to true.
   mass_definition : string or list of floats, optional
       Default is 'Average'
       If a list of floats it is a list of the masses to be used.
       If a string it must be one of 'Average', 'Isotope' or 'Program' (case is irrelevant)
       - Average causes the average weight for the element to be used
       - Isotope causes the most common isotope weight to be used
       - Program means use the mass used by the program


   Returns
   -------
   Material (see :class:`~PDielec.Materials.Material`)
       The material obtained based on the given name.

   Examples
   --------
   ```
   material1 = get_material("example.dft")
   material2 = get_material("gold")
   ```



