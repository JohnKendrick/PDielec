:py:mod:`PDielec.preader`
=========================

.. py:module:: PDielec.preader

.. autoapi-nested-parse::

   Read the contents of a directory containing DFT output and create a csv style file of information

   ::

       preader -program program [-eckart] [-neutral] [-nocalculation] [-masses average] [-pickle name] [-version] filenames .....
         "program" must be one of "abinit", "castep", "crystal", "gulp"
                  "phonopy", "qe", "vasp", "experiment", "auto"
                  The default is auto, so the program tries to guess the package from
                  the contents of the directory.  However this is not fool-proof!
                  If phonopy is used it must be followed by the QM package
                  in auto mode if the file was created by a phonopy VASP is assumed
         -masses [average|isotope|program]  chooses the atomic mass definition average
                 The default is "average"
         -mass  element mass
                 Change the mass of the element specified
         -eckart projects out the translational components. Default is no projection
         -neutral imposes neutrality on the Born charges of the molecule.
                  Default is no neutrality is imposed
         -nocalculation requests no calculations are performed
                  A single line is output with results obtained by reading the output
                  any of -mass -masses -eckart -neutral or -crystal are ignored
         -debug   to switch on more debug information
         -pickle  write each file reader to a pickled dump file for later processing
                  the name of the file to hold all the pickled readers is given
                  If the file exists it is not overwritten
         -version print the version of PDielec library being used



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   PDielec.preader.main
   PDielec.preader.print_help
   PDielec.preader.read_a_file
   PDielec.preader.set_affinity_on_worker



Attributes
~~~~~~~~~~

.. autoapisummary::

   PDielec.preader.version


.. py:function:: main()

   Process command line arguments


   ::

       preader -program program [-eckart] [-neutral] [-nocalculation] [-masses average] [-pickle name] [-version] filenames .....
         "program" must be one of "abinit", "castep", "crystal", "gulp"
                  "phonopy", "qe", "vasp", "experiment", "auto"
                  The default is auto, so the program tries to guess the package from
                  the contents of the directory.  However this is not fool-proof!
                  If phonopy is used it must be followed by the QM package
                  in auto mode if the file was created by a phonopy VASP is assumed
         -masses [average|isotope|program]  chooses the atomic mass definition average
                 The default is "average"
         -mass  element mass
                 Change the mass of the element specified
         -eckart projects out the translational components. Default is no projection
         -neutral imposes neutrality on the Born charges of the molecule.
                  Default is no neutrality is imposed
         -nocalculation requests no calculations are performed
                  A single line is output with results obtained by reading the output
                  any of -mass -masses -eckart -neutral or -crystal are ignored
         -debug   to switch on more debug information
         -pickle  write each file reader to a pickled dump file for later processing
                  the name of the file to hold all the pickled readers is given
                  If the file exists it is not overwritten
         -version print the version of PDielec library being used



.. py:function:: print_help()

   Display the help message for the preader program.

   This function prints out the usage of the preader program, including the supported flags and their descriptions.

   Notes
   -----
   The function internally directs its output to `sys.stderr` instead of the default `sys.stdout`, to separate the help message from other outputs. It also exits the program after displaying the help message by calling `exit()`. 

   Examples
   --------
   To display the help message, simply call the function without any arguments:

       >>> print_help()

   No output is returned by this function as it directs its message to `sys.stderr` and exits the program.


.. py:function:: read_a_file(calling_parameters)

   Read data from a file and process it based on the given parameters.

   Parameters
   ----------
   calling_parameters : tuple
       A tuple that contains various parameters used for reading and processing the file. This includes:
       - name : str (Name of the file.)
       - eckart : bool (Specifies whether Eckart conditions should be applied.)
       - neutral : bool (Specifies whether to neutralise Born charges.)
       - mass_definition : str (Specifies the method of mass calculation ('average', 'isotope', or 'program').)
       - mass_dictionary : dict (A dictionary containing mass information when `mass_definition` is not 'program'.)
       - global_no_calculation : bool (A flag to indicate whether any calculations should be performed.)
       - program : str (Name of the computational chemistry program used to generate the file.)
       - qmprogram : str (Specifies the quantum mechanics program used.)
       - debug : bool (If set to True, additional debug information will be printed.)

   Returns
   -------
   tuple
       A tuple containing:
       - reader : object (An object capable of reading and processing the data from the specified file.)
       - name : str (Name of the file that was processed.)
       - results_string : list (A list of strings that represent the processed data ready for output. Depending on conditions, it includes the initial and modified frequencies, intensities, and optionally calculated molar absorption rates.)



.. py:function:: set_affinity_on_worker()

   When a new worker process is created, the affinity is set to all CPUs.


.. py:data:: version

   

