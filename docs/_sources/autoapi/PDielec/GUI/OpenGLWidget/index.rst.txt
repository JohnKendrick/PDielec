:py:mod:`PDielec.GUI.OpenGLWidget`
==================================

.. py:module:: PDielec.GUI.OpenGLWidget

.. autoapi-nested-parse::

   OpenGLWidget module



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   PDielec.GUI.OpenGLWidget.Arrow
   PDielec.GUI.OpenGLWidget.Cylinder
   PDielec.GUI.OpenGLWidget.OpenGLWidget
   PDielec.GUI.OpenGLWidget.Sphere




.. py:class:: Arrow(colour, radius, direction, scale)


   A class to represent a 3D arrow for graphical display.

   This class encapsulates properties of a 3D arrow including its color,
   size (radius), direction, and scaling factor. It uses numpy for
   calculations to set up the appropriate direction, height, and rotation
   angle for the arrow based on the provided parameters.

   Parameters
   ----------
   colour : list of int
       The RGB values of the arrow colour, where each value is in the range [0, 255].
   radius : float
       The radius of the arrow's base.
   direction : list or numpy.ndarray
       A 3-element list or array defining the direction of the arrow in 3D space.
   scale : float
       A scaling factor to adjust the size of the arrow.

   Attributes
   ----------
   colour : numpy.ndarray
       The normalized RGB colour of the arrow, with each channel value in the range [0.0, 1.0].
   angle : float
       The angle between the arrow direction and the z-axis, in degrees.
   height : float
       The length of the arrow scaled by the `scale` parameter.
   rotation : numpy.ndarray
       A 3-element array representing the rotation axis for aligning the arrow with its direction.
   direction : numpy.ndarray
       A normalized 3-element array representing the direction of the arrow.
   radius : float
       The radius of the arrow's base as provided during instantiation.


.. py:class:: Cylinder(colour, radius, pos1, pos2)


   A class representing a 3D cylinder.

   Parameters
   ----------
   colour : array_like
       The colour of the cylinder, expected to be a list or array of three elements (R, G, B) where each value is in the range 0-255.
   radius : float
       The radius of the cylinder.
   pos1 : array_like
       The 3D coordinates (as a list or array) of one end of the cylinder's central axis.
   pos2 : array_like
       The 3D coordinates (as a list or array) of the other end of the cylinder's central axis.

   Attributes
   ----------
   colour : ndarray
       The normalized colour of the cylinder (R, G, B) with values ranging from 0.0 to 1.0.
   radius : float
       The radius of the cylinder.
   position1 : ndarray
       The 3D position of one end of the cylinder's central axis.
   position2 : ndarray
       The 3D position of the other end of the cylinder's central axis.
   angle : float
       The angle in degrees between the cylinder's central axis and the z-axis.
   height : float
       The height of the cylinder, determined as the distance between `pos1` and `pos2`.
   rotation : ndarray
       The 3D vector representing the axis of rotation to align the cylinder with the z-axis (used together with `angle` for setting the cylinder's orientation in 3D space).


.. py:class:: OpenGLWidget(parent, debug=False)


   Bases: :py:obj:`PyQt5.QtWidgets.QOpenGLWidget`

   A widget for the Qt framework specialized in OpenGL graphics rendering.

   This widget is designed to act as a capable 3D rendering environment
   for OpenGL within a Qt application. It supports a wide range of 3D
   visualization tasks, including rendering spheres, cylinders, and arrows
   to represent molecular structures or other 3D objects.

   Parameters
   ----------
   parent : QWidget
       The parent widget.
   debug : bool, optional
       Enables debug output if True.

   Attributes
   ----------
   format : QSurfaceFormat
       Specifies the format options for the rendering context. Common settings include
       samples for multisampling and the swap behavior for double buffering.
   spheres : deque
       A queue that holds sphere objects to be rendered. These can represent atoms or other spherical entities.
   cylinders : deque
       A queue that holds cylinder objects representing bonds or connections between spheres.
   arrows : deque
       A queue that holds arrow objects, useful for indicating directions or forces.
   light_positions : list
       Defines positions for up to eight lights in the 3D space.
   lights : list
       References to OpenGL light objects, typically provided as constants like GL_LIGHT0, GL_LIGHT1, etc.

   Methods
   -------
   enterEvent(event)
       Handles the mouse entering the widget's area.
   showArrows(show)
       Toggles the visibility of arrows.
   timeoutHandler()
       Advances the current animation phase or shifts direction at bounds.
   myMakeCurrent()
       Ensures the OpenGL context is current and checks for errors.
   moleculeRotate(scale, x, y, z)
       Applies a rotation to the molecule model.
   keyPressEvent(event)
       Custom key press event handler for zooming and rotating the model.
   save_movie(filename)
       Saves a rendered animation to a movie file.
   snapshot(filename)
       Takes a snapshot of the current OpenGL frame and saves it as an image.
   translate(x, y)
       Translates the scene.
   wheelEvent(event)
       Handles mouse wheel events for zooming.
   mousePressEvent(event), mouseReleaseEvent(event), mouseMoveEvent(event)
       Handles mouse interactions for rotating and translating the scene.
   zoom(zoom)
       Applies zoom to the scene based on input.
   stopAnimation()
       Stops the animation timer.
   startAnimation()
       Starts or restarts the animation timer.
   paintGL()
       The main rendering function called by the Qt framework to draw the OpenGL scene.
   drawSpheres(), drawCylinders(), drawArrows()
       Functions responsible for drawing the respective geometric objects.
   resizeGL(w, h)
       Adjusts the viewport and projection matrix on widget resize.
   initializeGL()
       Initializes OpenGL states and geometry.
   setImageSize()
       Calculates the ideal image size for the viewport.
   setProjectionMatrix()
       Sets up the projection matrix based on the current image size and viewport dimensions.
   defineLights()
       Configures the light sources.
   setRotationCentre(pos)
       Sets the center of rotation for the scene.
   createArrays(nphases)
       Initializes storage for drawable objects across animation phases.
   deleteSpheres(), deleteCylinders(), deleteArrows()
       Convenience methods for clearing the drawable objects.
   addArrows(colour, radius, direction, length, phase=0)
       Adds an arrow to the scene.
   addCylinder(colour, radius, pos1, pos2, phase=0)
       Adds a cylinder to the scene.
   addSphere(colour, radius, pos, phase=0)
       Adds a sphere to the scene.

   .. py:attribute:: format

      

   .. py:method:: addArrows(colour, radius, direction, length, phase=0)

      Add an arrow to the list of arrows.

      Parameters
      ----------
      colour : str
          The color of the arrow.
      radius : int or float
          The radius from the center where the arrow will be placed.
      direction : int or float
          The direction in which the arrow points.
      length : int or float
          The length of the arrow.
      phase : int or float, optional
          The phase of the arrow, defaults to 0.

      Returns
      -------
      None


   .. py:method:: addCylinder(colour, radius, pos1, pos2, phase=0)

      Adds a Cylinder object to the specified phase collection of cylinders.

      Parameters
      ----------
      colour : str
          The color of the cylinder.
      radius : float
          The radius of the cylinder.
      pos1 : tuple
          The starting position of the cylinder (x, y, z coordinates).
      pos2 : tuple
          The ending position of the cylinder (x, y, z coordinates).
      phase : int, optional
          The phase to which the cylinder should be added. Default is 0.

      Returns
      -------
      None


   .. py:method:: addSphere(colour, radius, pos, phase=0)

      Add a sphere to a collection within an object.

      Parameters
      ----------
      colour : Any
          The colour of the sphere, can vary depending on representation (e.g., string, tuple of RGB values).
      radius : float
          The radius of the sphere.
      pos : tuple
          Position of the sphere, usually a tuple of coordinates (x, y, z).
      phase : int, optional
          The specific phase (or collection) to which the sphere should be added. Defaults to 0.

      Returns
      -------
      None


   .. py:method:: createArrays(nphases)

      Create or reinitialize arrays for spheres and cylinders for each phase.

      This method creates or clears and then repopulates `self.spheres` and `self.cylinders` with an empty `deque` for each phase. It also sets `self.number_of_phases` to the given `nphases` and initializes `self.current_phase` to the midpoint of the range of phases (rounded down if `nphases` is an odd number).

      Parameters
      ----------
      nphases : int
          The number of phases for which to create arrays.

      Returns
      -------
      None

      Notes
      -----
      - Assumes `self.spheres` and `self.cylinders` are already defined as lists.
      - It uses the `clear` method on both `self.spheres` and `self.cylinders`, which is available for lists in Python 3.3 and later.


   .. py:method:: defineLights()

      Define light configurations for the viewer.

      This method sets up the lighting for a 3D viewer by configuring ambient, diffuse, and specular light properties, as well as light positions. It also controls which lights are enabled or disabled based on the object's `light_switches` attribute.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      - `self.light_switches` needs to be initially set or inherited from `self.viewerTab.light_switches` if `self.light_switches` is None.
      - Lighting is enabled globally with `glEnable(GL_LIGHTING)`.
      - For each light defined by the `self.light_positions`, `self.light_switches`, and `self.lights` attributes, this method sets up:
        - Ambient light properties with `glLightfv(light, GL_AMBIENT, [...])`.
        - Diffuse light properties with `glLightfv(light, GL_DIFFUSE, [...])`.
        - Specular light properties with `glLightfv(light, GL_SPECULAR, [...])`.
        - The position of each light with `glLightfv(light, GL_POSITION, position)`.
      - If `self.linearAttenuation` is True, linear attenuation is set for each light with `glLight(light, GL_LINEAR_ATTENUATION, 1.0)`.
      - Each light in `self.lights` is either enabled or disabled based on its corresponding status in `self.light_switches`.


   .. py:method:: deleteArrows()

      Deletes all arrows from a collection.

      This method clears the collection of arrows by removing all elements from it.

      Parameters
      ----------
      None

      Returns
      -------
      None


   .. py:method:: deleteCylinders()

      Deletes all cylinder objects from the storage.

      This method clears the list that stores cylinder objects, effectively
      removing all the cylinders managed by the instance.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      This method should be used with caution as it irreversibly deletes all 
      cylinder data from the instance.


   .. py:method:: deleteSpheres()

      Deletes all spheres from the current context.

      This method clears the collection of spheres.

      Parameters
      ----------
      None

      Returns
      -------
      None


   .. py:method:: drawArrows()

      Draw the designated arrows with specified properties.

      This method draws a series of arrows based on the properties stored within instances of the class. The arrows are displayed on the viewer associated with `self`. Each arrow has an associated sphere from which it originates. These spheres have positional data that dictate where the arrow is drawn. Furthermore, arrows have several visual properties such as color and size that are applied when rendering. Error handling for absent arrows is included, halting the function early if no arrows are to be drawn.

      Parameters
      ----------
      None

      Returns
      -------
      None


      Notes
      -----
      - The arrow drawing process involves translating and rotating the OpenGL context to the appropriate position and orientation before drawing cylinders to represent the arrows.
      - Material properties such as diffuse, ambient, and specular colors are calculated from the arrow's color and applied to the OpenGL material.
      - Arrows consist of a cylindrical shaft and a conical tip, whose dimensions and orientations are based on the properties of each arrow (e.g., direction, length, angle, rotation, colour, and radius).
      - This method depends on the `self.arrows` list and the corresponding `self.spheres` for the current phase stored in `self.current_phase`. It leverages OpenGL functions and assumes that `self.viewerTab.settings['Arrow colour']`, along with other properties like `self.diffuseMaterialFactor`, `self.ambientMaterialFactor`, `self.specularLightFactor`, and `self.glintMaterialFactor` are predefined and correctly configured.


   .. py:method:: drawCylinders()

      Draw the cylinders stored in the object.

      This method iterates through the list of cylinder objects for the current phase, 
      computes the required material colors based on predefined factors, and renders 
      each cylinder using OpenGL commands.

      Parameters
      ----------
      None

      Returns
      -------
      None


      Notes
      -----
      Each cylinder is represented by an object with attributes such as colour, radius,
      position1, position2, height, angle, and rotation. These attributes are used to 
      determine the cylinder's appearance and placement in the 3D space.

      This function assumes that OpenGL context is correctly set up, and global variables 
      such as `self.diffuseMaterialFactor`, `self.ambientMaterialFactor`, `self.specularLightFactor`,
      `self.white`, `self.glintMaterialFactor`, `self.quadric`, `self.cylinder_slices`, and 
      `self.cylinder_stacks` are predefined and configured.

      It is also assumed that `self.cylinders` is a dictionary where each key corresponds to a 
      different phase, and the value is a list of cylinder objects for that phase. The current 
      phase is determined by `self.current_phase`.


   .. py:method:: drawSpheres()

      Draw spheres based on the object's current phase and spheres attributes.

      This method iterates through the spheres assigned to the current phase of the invoking object. For each sphere, it sets the material properties based on the sphere's color and predefined material factors. Then, it translates the drawing location to the sphere's position and draws the sphere using OpenGL functions.

      Parameters
      ----------
      None

      Returns
      -------
      None


      Notes
      -----
      Requires OpenGL (PyOpenGL) for rendering. The method modifies the OpenGL state to draw spheres at specified locations with given radii and colors. Assumes the presence of attributes like `spheres`, `current_phase`, `diffuseMaterialFactor`, `ambientMaterialFactor`, `specularLightFactor`, and methods or attributes for rendering parameters such as `quadric`, `sphere_slices`, `sphere_stacks`.


   .. py:method:: enterEvent(event)

      Handle the entering of an event.

      Parameters
      ----------
      event : QEvent
          The event that triggers the enterEvent.

      Returns
      -------
      None

      Notes
      -----
      This function primarily ensures that the focus is set accordingly when an event occurs, and then it passes the event on to the viewerTab's own enterEvent handler for further processing.


   .. py:method:: initializeGL()

      Initializes OpenGL rendering context.

      This function sets up various OpenGL attributes and states including lighting, depth test, smooth shading, and anti-aliasing features to prepare for rendering in a GL context. It configures the viewport settings based on the associated viewer tab's background color settings.

      Parameters
      ----------
      None

      Returns
      -------
      None


   .. py:method:: keyPressEvent(event)

      Handle keyboard events for specific actions.

      This method is triggered whenever a keyboard event occurs. 
      It interprets key presses to perform various actions such as rotating the molecule, zooming in or out, 
      saving the current state, toggling between full screen mode, and resetting the view. 

      Parameters
      ----------
      event : QKeyEvent
          The event object that contains information about the key press event.

      Returns
      -------
      None

      Notes
      -----
      This function checks for specific keys and their combinations with modifiers like Shift and Control to determine the required action. 
      For rotation and zoom actions, the amount of change is determined based on whether 
      any modifiers are pressed (larger rotation if Shift or Control is held). 
      Saving, toggling the full screen mode, and resetting the view do not require modifiers.

      The following keys perform actions as described:
      - Left/Right Arrow: Rotate the molecule along the Y-axis.
      - Up/Down Arrow: Rotate the molecule along the X-axis.
      - Plus/Minus: Zoom in or out.
      - P: Save current state/configuration.
      - F: Toggle full screen mode.
      - Home: Reset the view to the initial state.

      Modifiers:
      - Shift: Increases the rotation amount.
      - Control: Increases the rotation amount.

      Attributes modified:
      - This method modifies various attributes of the instance based on the key pressed, including rotation angles, zoom levels, screen mode, and view matrix.

      Requires
      --------
      This function requires `Qt`, `GL_MODELVIEW`, `glLoadIdentity`, `np`, and the instance methods 
      `myMakeCurrent`, `moleculeRotate`, `zoom`, `save_movie`, `showFullScreen`, and `showNormal` to be properly defined. 
      It also assumes an external debugger tool for logging.

      Raises
      ------
      This method does not explicitly raise any exceptions but might propagate exceptions from methods it calls.


   .. py:method:: moleculeRotate(scale, x, y, z)

      Rotate a molecule object around the specified axes.

      This method applies a rotation transformation to a molecule object
      around the x, y, and z axes, scaled by a given factor.

      Parameters
      ----------
      scale : float
          The scaling factor for the rotation. Represents how much the rotation is amplified.
      x : float
          The degree of rotation around the x-axis (degrees).
      y : float
          The degree of rotation around the y-axis (degrees).
      z : float
          Degree of rotation around the z-axis (degrees) is ignored, the parameter is preserved for interface consistency or future use.

      Returns
      -------
      None

      Notes
      -----
      - This function assumes that the GL_MODELVIEW matrix mode is active and manipulates the current matrix stack accordingly.
      - It first saves the current model view matrix, then resets it to the identity.
      - Rotations for the x and y axes are applied in sequence, scaled by the provided `scale` factor.
      - Finally, the original matrix is restored and multiplied by the new rotation transformations.
      - The function uses OpenGL calls like `glRotatef` and `glMultMatrixf`, making sure the graphical representation of the molecule is updated to reflect the rotation.

      Examples
      --------
      >>> mol_object = Molecule()
      >>> mol_object.moleculeRotate(45, 1, 0, 0)
      This would rotate the molecule 45 degrees around the x-axis.

      See Also
      --------
      glRotatef : Rotates the current matrix a specified number of degrees about a specified axis.
      glMultMatrixf : Multiplies the current matrix by the specified matrix.
      glLoadIdentity : Replaces the current matrix with the identity matrix.

      Raises
      ------
      This function does not explicitly raise exceptions but relies on the OpenGL context and the `update` method's implementation.


   .. py:method:: mouseMoveEvent(event)

      Handle the mouse move events to perform various actions.

      Parameters
      ----------
      event : QMouseEvent
          The mouse event that contains information about the state of the mouse.

      Returns
      -------
      None

      Notes
      -----
      This method checks if the left or middle mouse button is pressed and applies different transformations (zoom, rotate, or translate) based on the mouse movement and whether certain modifier keys (Shift or Control) are pressed.
      - If the left mouse button is pressed:
      - With no modifiers or with Shift or Control modifier pressed: Performs rotation.
      - With Shift or Control modifier pressed: Performs zoom.
      - If the middle mouse button is pressed: Performs translation.

      Mouse coordinates are updated at the end of the method to reflect the current position.


   .. py:method:: mousePressEvent(event)

      Handle the mouse press event.

      Parameters
      ----------
      event : QMouseEvent
          The mouse event instance containing data of the mouse press.

      Returns
      -------
      None


   .. py:method:: mouseReleaseEvent(event)

      Handles the mouse release event.

      Parameters
      ----------
      event : QMouseEvent
          The event object containing information about the mouse release event.

      Returns
      -------
      None

      Notes
      -----
      This method records the x and y coordinates of the mouse at the moment it is released.


   .. py:method:: myMakeCurrent()

      Make the current OpenGL context active and clear any errors.

      This method activates the current OpenGL context by calling `makeCurrent`,
      then repeatedly calls `glGetError` to clear any accumulated OpenGL errors.

      Notes
      -----
      This function requires that an OpenGL context is available and that `makeCurrent`
      and `glGetError` are correctly implemented in the class this method belongs to.
      `makeCurrent` should make the OpenGL context current, and `glGetError` should
      return the current OpenGL error code, with `GL_NO_ERROR` indicating no error.

      This method does not return any value or raise exceptions. It is designed to
      ensure that the OpenGL context is error-free after making it current.


   .. py:method:: paintGL()

      Render OpenGL graphics for the current scene.

      This method prepares the graphics context, clears the buffer, sets the background color,
      and draws the current scene which may include spheres, cylinders, and arrows based on the object's state.

      Parameters
      ----------
      None

      Returns
      -------
      None


      Notes
      -----
      Requires access to OpenGL context and assumes that necessary OpenGL libraries
      and the debugger object are available in the scope. `paintGL` is typically called
      by the OpenGL rendering loop.

      Attributes Modified
      -------------------
      - Utilizes several attributes of the instance (`self`), including `background_colour`,
        `rotation_centre`, and `show_arrows`, to determine how to render the scene.
      - The OpenGL context is modified by setting the clear color and transforming the modelview matrix.


   .. py:method:: resizeGL(w, h)

      Resizes the OpenGL widget to a new width and height.

      Notes
      -----
      This is typically overridden in a subclass and used to adjust the OpenGL viewport or projection matrix when the widget is resized.

      Parameters
      ----------
      w : int
          The new width of the OpenGL widget.
      h : int
          The new height of the OpenGL widget.

      Returns
      -------
      None



   .. py:method:: save_movie(filename)

      Save the current state as a movie file.

      This method captures snapshots of the current state at different phases,
      processes them, and compiles them into a movie file.

      Parameters
      ----------
      filename : str
          The filename (including path) where the movie should be saved.

      Returns
      -------
      None

      Notes
      -----
      Relies on `imageio` for writing the movie file and handling images.
      If a timer is present, it's temporarily stopped to ensure snapshots are
      taken consistently, and then restarted once the movie is saved.
      Temporary storage is used for intermediate images



   .. py:method:: setImageSize()

      Set the maximum image size based on the furthest object from the rotation center.

      This method evaluates the position of spheres and cylinders in the current phase, calculates their distance from a fixed point (rotation center), and updates the `image_size` attribute to the maximum distance found. It ensures the all objects will fit within the rendered image. Finally, it updates the projection matrix and logs the new image size.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      The `self` parameter represents the instance of the class in which the function is called. This function relies on the `math.sqrt`, `np.dot` for calculations, and expects `self.spheres`, `self.cylinders`, `self.current_phase`, `self.rotation_centre`, and `self.setProjectionMatrix` to be defined.


   .. py:method:: setProjectionMatrix()

      Set the projection matrix for rendering.

      This method configures the projection matrix based on the current image size, width, and height attributes of the object. It's intended to set up an orthographic projection suited to the object's dimensions. If any of the required attributes (`image_size`, `my_width`, or `my_height`) are not set, the method will exit early. The method also sets the view to the middle phase of an unspecified number of total phases and resets the model view matrix.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      This method makes several OpenGL calls to configure the projection and model view matrices and assumes that `self.myMakeCurrent()` makes the required OpenGL context current. It also updates `self.matrix` with an identity matrix and sets `self.current_phase` based on the total number of phases.


   .. py:method:: setRotationCentre(pos)

      Set the rotation centre to a specified position.

      Parameters
      ----------
      pos : array_like
          The position to set the rotation centre. Expected to be an iterable
          with numerical values that can be converted to a NumPy array.

      Returns
      -------
      None


   .. py:method:: showArrows(show)

      Set the visibility of arrows

      Parameters
      ----------
      show : bool
          A boolean indicating whether to show arrows (True) or not (False).

      Returns
      -------
      None

      Notes
      -----
      This function updates the `show_arrows` attribute based on the "show" parameter and prints the current status to the debugger.


   .. py:method:: snapshot(filename)

      Capture and save a snapshot of the current framebuffer to a file.

      Parameters
      ----------
      filename : str
          The name of the file where the snapshot will be saved.

      Returns
      -------
      None

      Examples
      --------
      Assuming an instance `display` of the class containing this method:

      ```python
      display.snapshot('screenshot.png')
      ```

      This will grab the current framebuffer content and save it as 'screenshot.png'.


   .. py:method:: startAnimation()

      Starts or restarts an animation timer.

      This method checks if an animation timer is already running.
      If so, it stops the current timer. If not, it initializes and starts a new timer
      with the interval specified in `self.timer_interval`. When the timer times out,
      it triggers `self.timeoutHandler`.

      Parameters
      ----------
      None

      Returns
      -------
      None


      Notes
      -----
      - `self.timer` is expected to be an attribute of the instance which either holds
        a QTimer object or None.
      - This method directly modifies `self.timer` to either stop the current timer
        or create, set up, and start a new timer.
      - This method is designed for use within a class that manages animations or
        timed events, utilizing a QTimer from the PyQt or PySide frameworks.


   .. py:method:: stopAnimation()

      Stop the ongoing animation.

      This method stops the animation by stopping the timer associated with it.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      This function assumes that `self.timer` is an instance with a `stop` method, which is called to halt any ongoing animation. If `self.timer` is `None`, indicating no animation is currently active, this method does nothing.


   .. py:method:: timeoutHandler()

      Handles the timeout event in a cyclic phase system by updating the current phase and direction.

      This function updates the `current_phase` by advancing or reversing it based on the `phase_direction`.
      When the end or the start of the phases is reached, the direction is reversed, ensuring cyclic behavior
      through the phases. After updating the phase and direction, the function logs the current phase and
      updates the system state.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      - `self.current_phase` is the index of the current phase in the cycle.
      - `self.number_of_phases` indicates the total number of available phases.
      - `self.phase_direction` is either +1 or -1, indicating the direction of phase progression.
      - The `update` method is called at the end to apply any changes made to the state as a result of this timeout event.


   .. py:method:: translate(x, y)

      Translate an object by modifying its current position.

      Parameters
      ----------
      x : float
          The distance to translate along the x-axis.
      y : float
          The distance to translate along the y-axis.

      Returns
      -------
      None

      Notes
      -----
      This method updates the current position of the object by adding the specified distances along the x and y axes, respectively. It does not return a value.

      This function involves a call to `glTranslatef`, which applies a translation transformation to the current matrix. Ensure that the appropriate OpenGL context is made current before calling this function by using `self.myMakeCurrent()`.


   .. py:method:: wheelEvent(event)

      Handles a wheel event to zoom in or out.

      Parameters
      ----------
      event : QWheelEvent
          The wheel event containing information about the wheel movement.

      Returns
      -------
      None

      Notes
      -----
      This function first logs the occurrence of a wheel event. It then sets
      the current context to this object before determining the direction and
      intensity of the zoom based on the vertical angle delta of the wheel event.
      Lastly, it refreshes the display to reflect any changes.


   .. py:method:: zoom(zoom)

      Zoom in or out on an object.

      Parameters
      ----------
      zoom : int or float
          The zoom level. Positive values zoom in, negative values zoom out.

      Returns
      -------
      None

      Notes
      -----
      - This function requires a current context and will make itself the current one before applying transformations.
      - Updates the object's state after zooming.

      Uses `glScalef` from OpenGL for scaling transformations and assumes that `debugger` and `glScalef` are accessible in the current context, with `debugger.print` used for debug logging.



.. py:class:: Sphere(colour, radius, position)


   A class representing a sphere.

   Parameters
   ----------
   colour : list of int
       The RGB colour of the sphere as a list of three integers ranging from 0 to 255.
   radius : float
       The radius of the sphere.
   position : list of float
       The position of the sphere in 3D space as a list of three coordinates (x, y, z).

   Attributes
   ----------
   colour : ndarray
       The normalized RGB colour of the sphere, with each element ranging from 0.0 to 1.0.
   radius : float
       The radius of the sphere.
   position : ndarray
       The position of the sphere in 3D space as a NumPy array with three elements (x, y, z).


