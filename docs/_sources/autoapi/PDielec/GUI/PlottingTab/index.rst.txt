:py:mod:`PDielec.GUI.PlottingTab`
=================================

.. py:module:: PDielec.GUI.PlottingTab

.. autoapi-nested-parse::

   PlottingTab module.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   PDielec.GUI.PlottingTab.PlottingTab



Functions
~~~~~~~~~

.. autoapisummary::

   PDielec.GUI.PlottingTab.convert_frequency_units
   PDielec.GUI.PlottingTab.isThisAFrequencyUnit



Attributes
~~~~~~~~~~

.. autoapisummary::

   PDielec.GUI.PlottingTab.possible_frequency_units


.. py:class:: PlottingTab(parent, debug=False)


   Bases: :py:obj:`qtpy.QtWidgets.QWidget`

   A class used for creating and managing a plotting tab in a graphical user interface. It inherits from QWidget.

   This class is responsible for handling plotting functionalities like choosing plot types, setting molar definitions and frequency values, managing interactions with UI components such as spin boxes, combo boxes, and buttons, and plotting the data using matplotlib.

   Parameters
   ----------
   parent : QWidget
       The parent widget.
   debug : bool, optional
       Enables debug mode which provides additional logging details. Defaults to False.

   Attributes
   ----------
   settings : dict
       A dictionary containing settings related to plotting such as minimum frequency, maximum frequency, frequency increment, molar definitions, number of atoms, plot type, and frequency unit.
   refreshRequired : bool
       A flag indicating whether the plot needs to be refreshed.
   subplot : matplotlib subplot object
       The subplot used for plotting data.
   vmin, vmax, vinc : float
       Variables to store current minimum frequency, maximum frequency, and frequency increment values for the plot.
   molar_cb_current_index : int
       Tracks the current index of the molar definition combo box to handle changes.
   notebook : QWidget
       A reference to the parent widget which contains the widget structure.
   reader : object
       An object to read and handle data from different file formats or sources.
   legends, vs_cm1 : list
       Lists used for storing legends for the plots and frequency values respectively.
   frequency_length : int
       Stores the length of the frequency array to check for changes.
   progressbar : QProgressBar
       A progress bar widget to display operation progress.

   Methods
   -------
   get_total_number_of_frequency_calculations()
       Calculates the total number of frequency calculations required.
   requestRefresh()
       Requests a refresh for the plotting.
   requestScenarioRefresh()
       Requests a refresh for all scenarios in the application.
   on_vmin_changed(), on_vmax_changed(), on_vinc_changed(value), on_funits_cb_activated(index), on_molar_cb_activated(index), on_natoms_changed(value), on_plot_type_cb_activated(index)
       Event handlers for UI component changes.
   refresh(force=False)
       Refreshes the plot based on current settings and data.
   plot()
       Generates and displays the plot based on the selected plot type and data.
   get_number_of_califications_required()
       Returns the number of calculations needed for updating the plot.
   greyed_out()
       Greys out options in the UI that are not available.
   writeSpreadsheet()
       Writes results to a spreadsheet.
   set_concentrations()
       Sets the concentrations for the plotting based on the molar definition.


   .. py:method:: get_number_of_calculations_required()

      Return the total number of spectra that need to be calculated.

      Only spectra that need a refresh are included.

      Parameters
      ----------
      None

      Returns
      -------
      int
          The total number of spectra that require calculation.



   .. py:method:: get_total_number_of_frequency_calculations()

      Calculate and return the total number of frequency calculations required.

      This method computes the total number of frequency calculations based on the current settings for minimum frequency, maximum frequency, and frequency increment. It updates the scenario if the frequency range or the increment has changed since the last update.

      Parameters
      ----------
      None

      Returns
      -------
      int
          The total number of frequency calculations required, which is the product of the number of calculations required (as obtained from `get_number_of_calculations_required`) and the new length of frequency range computed.



   .. py:method:: greyed_out()

      Handle items that should be greyed out if they are not needed.

      Parameters
      ----------
      None

      Returns
      -------
      int



   .. py:method:: on_funits_cb_activated(index)

      Handle the activation of a frequency unit combo box item.

      This method updates the active frequency unit in the settings, triggers necessary refresh processes and logs the change.

      Parameters
      ----------
      index : int
          The index of the activated item in the frequency units combo box.

      Returns
      -------
      None

      Notes
      -----
      This method is part of a GUI application where `self` refers to an instance of the application or a relevant widget. It manages updates to the application's settings and GUI components based on the user's selection of a frequency unit from a combo box.

      - `self.settings` is a dictionary where application settings are stored.
      - `self.refreshRequired` is a boolean flag used to indicate whether a refresh of certain GUI components is necessary.
      - `self.notebook` appears to be a widget container (like a tab widget), with `fitterTab` being one of its child tabs.
      - `self.vmin_sb` is another component (likely a spin box or similar input widget) that may need its signals blocked/unblocked during the process to avoid unwanted signal emission.
      - The `debugger.print` calls are used for logging and are not a standard Python function; they imply the existence of a custom logging or debugging utility named `debugger`.

      The actual refreshing of the GUI and handling of signal blocking is done within other methods not shown here, such as `self.refresh()` and `self.notebook.fitterTab.requestRefresh()`.

      Raises
      ------
      This function does not explicitly raise any exceptions but depends on the proper functioning of the methods it calls and the state of `self` and its attributes.



   .. py:method:: on_molar_cb_activated(index)

      Handle the activation of the molar combobox option.

      This method is tied to a GUI event where a selection from a molar combobox triggers various updates in the application state, including setting concentrations, refreshing UI elements, and potentially triggering further calculations or refreshes as needed.

      Parameters
      ----------
      index : int
          The index of the selected item in the molar combobox. This index corresponds to a specific molar definition and is used to update the application settings and state accordingly.

      Returns
      -------
      None

      See Also
      --------
      set_concentrations : A method to update the concentrations based on the selected molar definition.
      refresh : A method to refresh the UI elements.



   .. py:method:: on_natoms_changed(value)

      Handle the change in the number of atoms.

      This method is called when the number of atoms changes. It updates the relevant setting in the instance, recalculates the concentration based on the new number of atoms, flags that a refresh is required, and then triggers the refresh process.

      Parameters
      ----------
      value : int or float
          The new number of atoms. This value is used to update settings and recalculate concentrations.

      Notes
      -----
      - `self.reader.volume` and `self.reader.nions` are expected to be available and contain the volume of the container and the number of ions, respectively.
      - The method refreshes `self.notebook.fitterTab` object with a `requestRefresh` method to initiate the refresh process.



   .. py:method:: on_plot_type_cb_activated(index)

      Handle plot type change from a combo box.

      This method gets triggered when the plot type in a combo box is changed.
      It updates the plot type in the settings, marks the current state as needing a refresh,
      requests the fitter tab to refresh, and finally refreshes the current view.

      Parameters
      ----------
      index : int
          The index of the selected item in the combo box.

      Returns
      -------
      None



   .. py:method:: on_vinc_changed(value)

      Handle the change in frequency increment and update GUI accordingly.

      This function is triggered when there's a change in the frequency increment value. It adjusts the number of GUI elements based on 
      new values of minimum and maximum frequency and the changed frequency increment. It also updates the settings dict with the 
      new frequency increment value.

      Parameters
      ----------
      value : float
          The new value of the frequency increment.

      Returns
      -------
      None

      Side Effects
      ------------
      - Temporarily blocks signals from the vinc_sb spin box to prevent recursive calls.
      - Updates 'Frequency increment' in the settings dictionary with the new frequency increment value.
      - Requests a refresh of the fitterTab if needed.



   .. py:method:: on_vmax_changed()

      Handle the event when the maximum frequency setting is changed.

      This method is triggered whenever there is a change in the maximum frequency setting (`vmax`). It blocks signal emission from the `vmax_sb` spinner box (presumably, a GUI element for setting `vmax`), reads the current minimum (`vmin`) and maximum (`vmax`) frequency settings, and updates the corresponding setting based on the specified frequency unit. If the frequency unit denotes a frequency, `vmax` is converted and stored as the 'Maximum frequency' in the settings dictionary in the 'wavenumber' unit. Otherwise, it updates the 'Minimum frequency' with the converted value. This method also triggers any necessary refresh operations in the user interface and finally unblocks signal emissions from the `vmax_sb`.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      - This method assumes the existence of `vmin_sb` and `vmax_sb` attributes, which should be spinner box GUI elements (or similar) for setting minimum and maximum frequencies, respectively.
      - The `settings` dictionary must have a 'Frequency unit' key, and possibly 'Maximum frequency' and 'Minimum frequency' keys which are updated based on the condition.



   .. py:method:: on_vmin_changed()

      Handle the change in the minimum frequency setting.

      This method adjusts the stored minimum frequency in the settings according to the new
      minimum frequency input by the user. It first blocks the signals of the minimum frequency spinbox
      to prevent recursive calls during the adjustment process. It then updates the setting based
      on whether the frequency units are compatible with a predefined list, converting the frequency
      accordingly. After adjusting the settings, it triggers a refresh request for the application's
      fitter tab and marks the need for a general refresh. Finally, it re-enables the signals for
      the minimum frequency spinbox and logs the completion of the process.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      - Uses the `blockSignals` method on `self.vmin_sb` to prevent signal-slot recursion.
      - Adjusts settings based on a unit conversion utility function, `convert_frequency_units`.
      - The effect of this method extends beyond just the internal state changes; it influences the UI and possibly other components' states through the requested refresh.



   .. py:method:: plot()

      Plot the results based on specified settings and scenarios.

      This function generates a plot for the given scenarios under the analysis settings
      defined in the notebook object's tabs. It handles various conditions to properly format
      the plot, including checking if necessary parameters and objects are set, converting
      frequency units, and adjusting data for display based on plot type. The actual plotting
      is done using matplotlib, and various attributes like plot legends, titles, and axes labels
      are dynamically set based on the configuration.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      - self.notebook.mainTab.settings: Dictionary containing program settings.
      - self.notebook.mainTab.getFullFileName(): Method that returns the currently selected filename.
      - self.notebook.mainTab.reader: Object used for reading data files.
      - self.notebook.settingsTab.CrystalPermittivityObject: Object containing crystal permittivity settings.
      - self.settings: Dictionary containing plot-related settings such as frequency range and plot type.
      - self.notebook.scenarios: List of scenarios to be plotted.



   .. py:method:: refresh(force=False)

      Refresh the current state based on the changes in settings, forces refresh if needed.

      This function updates the frequency settings (minimum frequency, maximum frequency, and frequency increment) based on the current settings. It ensures that these settings are within logical limits. The function updates GUI elements (spin boxes and combo boxes) with these new calculations. Additionally, it handles the conversion of frequency units, updates GUI tooltips based on the frequency unit, and builds or refreshes the visualization plot based on the refreshed data. If the 'force' flag is set or if a refresh is deemed necessary due to significant changes in the settings, it proceeds with the refresh operation, else it skips the refresh to optimize performance.

      Parameters
      ----------
      force : bool, optional
          A boolean flag indicating whether to forcefully execute a refresh regardless of whether it was deemed necessary based on internal conditions. The default is False.

      Returns
      -------
      None

      Notes
      -----
      - The actual refresh operation involves several steps:
          - Checking if a refresh is required based on the current settings and the 'force' parameter.
          - Temporarily blocking signals from all child widgets to prevent unintended side effects during settings updates.
          - Verifying and updating frequency settings to maintain logical constraints.
          - Updating GUI components with new settings values and tooltips based on the current frequency unit.
          - Processing and plotting data based on the updated settings.
          - Re-enabling signals for child widgets after modifications are complete.
      - The processEvents call is used to ensure the UI remains responsive during long operations.



   .. py:method:: requestRefresh()

      Initiate a refresh request.

      This function flags that a refresh is required
      It doesn't return any value.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: requestScenarioRefresh()

      Request a refresh on all scenarios within a notebook.

      This function triggers a refresh process for the settings tab and all scenarios within the notebook. 

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: set_concentrations()

      Set the concentration based on the molar definition in settings.

      This method updates the concentration value in the settings dictionary based on the 'Molar definition' key. It calculates concentration values differently based on whether the molar definition is set to 'Molecules', 'Unit cells', or 'Atoms'. It also enables or disables the `natoms_sb` spin box accordingly.


   .. py:method:: writeSpreadsheet()

      Update and write the results of powder and crystal scenarios to a spreadsheet.

      This function navigates through each scenario defined in the `notebook` attribute, extracts relevant data such as absorption coefficients, permittivities, and reflectances, and writes these along with scenario settings to a spreadsheet. It handles different types of scenarios (Powder or Crystal) and makes use of the spreadsheet object's methods for selecting worksheets, writing rows, and dealing with data transformation. The function also handles the calculation of molar absorption coefficients with unit conversion when necessary.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: write_crystal_results(sp, name, vs, legends, yss)

      Write single crystal results to a spread sheet.

      Parameters
      ----------
      sp : object
          The spreadsheet object.
      name : str
          The worksheet name used for writing.
      vs : np.array
          An array of the frequencies.
      legends : list
          The heading names for the yss.
      yss : list of np.arrays
          A list of numpy arrays of the reflections and transmittance.

      Returns
      -------
      None



   .. py:method:: write_eps_results(sp, vs, dielecv)

      Write real and imaginary parts of crystal permittivity to a spreadsheet.

      Parameters
      ----------
      sp : object
          An instance of a spreadsheet processing class with methods to manipulate data in a spreadsheet.
      vs : list
          A list containing frequency values.
      dielecv : numpy.ndarray
          A complex numpy array where the real parts represent the real permittivities and the imaginary parts represent the imaginary permittivities of a crystal. The array should have a shape of (N,3,3) where N is the number of frequency values, and the 3x3 inner arrays represent the permittivity tensor for each frequency.

      Returns
      -------
      None

      Notes
      -----
      The function does two main tasks:
      1. Selects the 'Real Crystal Permittivity' sheet, deletes its current content if any, and writes the real parts of the permittivity tensor for each frequency along with the frequency values themselves.
      2. Selects the 'Imag Crystal Permittivity' sheet, deletes its current content if any, and writes the imaginary parts of the permittivity tensor for each frequency along with the frequency values themselves.

      Both sections write data in the format: frequencies (cm-1), xx, yy, zz, xy, xz, yz, where xx, yy, zz, xy, xz, and yz are components of the permittivity tensor.
      The output data starts from the second column (index 1), and for each row written, a 'check' flag is set to 1.



   .. py:method:: write_powder_results(sp, name, vs, legends, yss)

      Write the powder simulation results to a worksheet.

      Parameters
      ----------
      sp : object
          An object with methods for manipulating a worksheet.
      name : str
          The name of the worksheet to select or create.
      vs : list
          A list of frequency values (in cm-1).
      legends : list of str
          The legends to be used as headers, alongside 'frequencies (cm-1)'.
      yss : list of lists
          A list where each element is a list of intensities corresponding to each frequency in `vs`.

      Returns
      -------
      None




.. py:function:: convert_frequency_units(value, unit_in, unit_out)

   Convert between frequency and wavelength units.

   The input can be either a scalar value or a numpy array of values. The function will return the converted value(s) in the output units specified.
   The unit strings are turned into lower-case so case is irrelevant

   Parameters
   ----------
   value : scalar or numpy array
       The value(s) for which the conversion is to be made.
   unit_in : str
       The units of the input value(s). Can be one of 'cm-1' (or 'wavenumber'), 'GHz', 'THz', 'nm', 'um', 'mm', 'cm', 'm'.
   unit_out : str
       The units of the output value(s). Must be one of 'cm-1' (or 'wavenumber'), 'GHz', 'THz', 'nm', 'um', 'mm', 'cm', 'm'.

   Returns
   -------
   scalar or numpy array
       The converted value(s) in the output units specified.



.. py:function:: isThisAFrequencyUnit(unit)

   Return true if this is a frequency unit, false if a wavelength.

   Units of frequency are 'wavenumber','THz','GHz'
   Units of wavelength are 'ang','nm','um','mm','cm' or 'm'

   Returns
   -------
   bool
       True if this is a frequency unit, False if a wavelength.



.. py:data:: possible_frequency_units
   :value: ['wavenumber', 'THz', 'GHz', 'ang', 'nm', 'um', 'mm', 'cm', 'm']

   

