PDielec.GUI.ScenarioTab
=======================

.. py:module:: PDielec.GUI.ScenarioTab

.. autoapi-nested-parse::

   ScenarioTab module



Classes
-------

.. autoapisummary::

   PDielec.GUI.ScenarioTab.Debug
   PDielec.GUI.ScenarioTab.Material
   PDielec.GUI.ScenarioTab.MaterialsDataBase
   PDielec.GUI.ScenarioTab.ScenarioTab


Module Contents
---------------

.. py:class:: Debug(debug, text, level=0)

   A class aimed at providing a structured way to include debug messages in code.

   Methods
   -------
   print(args, level=0)
       Prints debug messages based on the debug level provided as argument compared to the object's debug level.
   state()
       Returns the current state (enabled or disabled) of debugging.

   Notes
   -----
   The `print` method provides a flexible way to include additional information along with the base debug message, allowing for a detailed and adjustable debugging output.


   .. py:method:: print(*args, level=0)

      Prints message if debugging level allows.

      Parameters
      ----------
      args
          Variable length argument list for the message to be printed.
      level : int, optional
          The level of the message that determines if it gets printed or not,
          based on the instance's `level`. Default value is 0.

      Notes
      -----
      This method will only print the message if the instance's `debug` flag is True
      and the provided `level` is less than or equal to the instance's `level`.



   .. py:method:: state()

      Get the debug state.

      Parameters
      ----------
      None

      Returns
      -------
      The current debug state.



.. py:class:: Material(name, density=None, permittivityObject=None, cell=None)

   A class for representing materials with properties like name, density, permittivity, and unit cell.

   The Material class also contains the permittivity object for the material.  
   The permittivity object is an instance of :class:`~PDielec.DielectricFunction.DielectricFunction` or one its children.
   The permittivity object is responsible for calculating the permittivity at the given frequency.
   The subclasses which inherit from the Material class are: Constant, External, DrudeLorentz, FPSQ, Sellmeier, and Tabulated.
   Each subclass has an initialisation routine which instantiates the permittivity object of the appropriate type for the material.
   The relationship between the Material subclass and the DielectricFunction subclass of the permittivity object is shown below.

   +---------------------------+-------------------------------------------------------------+
   + Material subclass         + DielectricFunction subclass                                 +
   +===========================+=============================================================+
   + :class:`Constant`         + :class:`~PDielec.DielectricFunction.Constant`               +
   +---------------------------+-------------------------------------------------------------+
   + :class:`External`         + This class is passed a permittivity object which has been   +
   +                           + defined externally                                          +
   +---------------------------+-------------------------------------------------------------+
   + :class:`DrudeLorentz`     + :class:`~PDielec.DielectricFunction.DrudeLorentz`           +
   +---------------------------+-------------------------------------------------------------+
   + :class:`FPSQ`             + :class:`~PDielec.DielectricFunction.FPSQ`                   +
   +---------------------------+-------------------------------------------------------------+
   + :class:`Sellmeier`        + :class:`~PDielec.DielectricFunction.Sellmeier`              +
   +---------------------------+-------------------------------------------------------------+
   + :class:`Tabulated`        +  - :class:`~PDielec.DielectricFunction.TabulateScalar`      +
   +                           +  - :class:`~PDielec.DielectricFunction.Tabulate3`           +
   +                           +  - :class:`~PDielec.DielectricFunction.Tabulate3`           +
   +                           +  - :class:`~PDielec.DielectricFunction.Tabulate6`           +
   +---------------------------+-------------------------------------------------------------+

   Parameters
   ----------
   name : str
       The name of the material.
   density : float, optional
       The density of the material. If not provided and a cell is given, it will be calculated based on the cell.
   permittivityObject : :class:`~PDielec.DielectricFunction.DielectricFunction`, optional
       An object representing the dielectric function of the material. This is intended to be passed by classes that inherit from Material, and it should contain methods for calculating scalar/tensor permittivity. (see :class:`~PDielec.DielectricFunction.DielectricFunction` and its sub-classes)
   cell : :class:`~PDielec.UnitCell.UnitCell`, optional
       An object representing the unit cell of the material. If provided without a density, the density will be calculated from this cell. (See :class:`~PDielec.UnitCell.UnitCell`)

   Attributes
   ----------
   density : float
       The density of the material, which may be calculated based on the cell if not provided initially.
   cell : Cell or None
       The unit cell of the material if provided.
   name : str
       The name of the material.
   type : str
       A string indicating the type of the object. Defaults to 'Base Class' for the base Material class.
   permittivityObject : DielectricFunction or None
       An object to handle the permittivity calculations for the material.

   Methods
   -------
   getName()
       Returns the name of the material.
   getInformation()
       Returns information about the material, including its type and, if applicable, its permittivity frequency range.
   getSigmas()
       If the material has a lorentzian dielectric this routine returns the sigma parameters
   setSigmas()
       If the material has a lorentzian dielectric this routine sets the sigma parameters
   getFrequencies()
       If the material has a lorentzian dielectric this routine returns the frequencies
   setFrequencies()
       If the material has a lorentzian dielectric this routine sets the frequencies
   getOscillatorStrengths()
       If the material has a lorentzian dielectric this routine returns the oscillator strengths
   setOscillatorStrengths()
       If the material has a lorentzian dielectric this routine sets the oscillator strengths
   print()
       Prints information about the material, such as its name, density, type, and permittivity details.
   isScalar()
       Checks and returns True if the material’s permittivity is scalar.
   isTensor()
       Checks and returns True if the material’s permittivity is tensor.
   getPermittivityObject()
       Returns the permittivityObject of the material.
   getPermittivityFunction()
       Returns the permittivity function from the permittivityObject.
   getDensity()
       Returns the density of the material.
   setCell(cell)
       Sets the cell of the material and updates the density if it was initially None.
   getCell()
       Returns the cell of the material.
   setDensity(value)
       Sets the density of the material.
   setEpsilonInfinity(eps)
       Sets the epsilon infinity of the material
   setPermittivityObject(permittivityObject)
       Sets the permittivityObject for the material.


   .. py:method:: getCell()

      Return the cell

      Parameters
      ----------
      None

      Returns
      -------
      self.cell



   .. py:method:: getDensity()

      Return the density

      Parameters
      ----------
      None

      Returns
      -------
      self.density



   .. py:method:: getFrequencies()

      Gets the frequencies for a Lorentzian permittivity

      Parameters
      ----------
      None

      Returns
      -------
      1d array of floats
          Returns the frequencies for a Lorentzian function in cm-1



   .. py:method:: getInformation()

      Returns information about the material.

      Parameters
      ----------
      None

      Returns
      -------
      str
          A description of the material.



   .. py:method:: getName()

      Get the name attribute of the object.

      Parameters
      ----------
      None

      Returns
      -------
      str
          The name attribute of the object.



   .. py:method:: getOscillatorStrengths()

      Gets the oscillator strengths for a Lorentzian permittivity

      The oscillator strength of each transition is a 3x3 matrix

      Parameters
      ----------
      None

      Returns
      -------
      list of 3x3 array of floats
          Returns the oscillator strengths for a Lorentzian permittivity function in cm-1



   .. py:method:: getPermittivityFunction()

      Returns the permittivity function.

      Parameters
      ----------
      None

      Returns
      -------
      permittivityObjectFunction
          Return the permittivity object function



   .. py:method:: getPermittivityObject()

      Returns the permittivity object.

      Parameters
      ----------
      None

      Returns
      -------
      permittivityObject
          Return the permittivity object (dielectric function object)



   .. py:method:: getSigmas()

      Gets the sigma parameters for a Lorentzian permittivity

      Parameters
      ----------
      None

      Returns
      -------
      1d array of floats
          Returns the sigma parameters for a Lorentz permittivity function in cm-1



   .. py:method:: isScalar()

      Returns true if the material returns a scalar permittivity.

      Parameters
      ----------
      None

      Returns
      -------
      bool
          True if the material returns a scalar permittivity, False otherwise.



   .. py:method:: isTensor()

      Returns true if the material returns a tensor permittivity.

      Parameters
      ----------
      None

      Returns
      -------
      bool
          True if the material returns a tensor permittivity, False otherwise.



   .. py:method:: print()

      Print information about the material.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: setCell(cell)

      Set the unit cell

      Parameters
      ----------
      cell : a unit cell

      Returns
      -------
      None



   .. py:method:: setDensity(value)

      Set the density

      Parameters
      ----------
      value : float

      Returns
      -------
      None



   .. py:method:: setFrequencies(frequencies)

      Sets the frequencies for a Lorentzian permittivity

      Parameters
      ----------
      frequencies : 1D array of floats
          The frequencies for a Drude-Lorentzian permittivity in cm-1

      Returns
      -------
      None




   .. py:method:: setOscillatorStrengths(strengths)

      Sets the oscillator strengths for a Lorentzian permittivity

      Parameters
      ----------
      strengths : a 3x3 array of floats for each frequency
          The oscillator strengths for a Lorentzian permittivity function in cm-1

      Returns
      -------
      None




   .. py:method:: setPermittivityObject(permittivityObject)

      Set the permittivity object.

      Parameters
      ----------
      permittivityObject : a permittivity object (dielectric function object)

      Returns
      -------
      None



   .. py:method:: setSigmas(sigmas)

      Sets the sigma parameters for a Lorentzian permittivity

      Parameters
      ----------
      sigmas : 1D array of floats
          The sigma parameters for a Lorentzian permittivity function in cm-1

      Returns
      -------
      None




.. py:class:: MaterialsDataBase(filename, debug=False)

   A class for managing a database of materials' properties.

   This database is initialized from an Excel spreadsheet which contains various material properties including names, densities, refractive indices, and permittivities, among others.
   Additional functionalities include validation checks, retrieval of sheet names, material information, and specific data based on the property of interest (e.g., constant permittivity, tabulated refractive index).
   The getMaterial() method returns a material with a dielectric function of the appropriate type.
   There are routines which read (process) the data stored for the following dielectric functions:

   - constant refractive index
   - constant permittivity
   - tabulated refractive index (may be 1, 3 or 6 parameters for isotropic, uniaxial or anisotropic)
   - tabulated permittivity (may be 1, 3 or 6 parameters for isotropic, uniaxial or anisotropic)
   - Lorentz-Drude
   - FPSQ (Four parameters semi-quantum model)
   - Sellmeier

   Further information can be found in the following classes and their sub-classes:

   - :class:`~PDielec.Materials.Material`
   - :class:`~PDielec.DielectricFunction.DielectricFunction`

   Parameters
   ----------
   filename : str
       The filename of the spreadsheet/database.
   debug : bool, optional
       Set to true for additional debugging information

   Attributes
   ----------
   filename : str
       The path to the Excel spreadsheet containing materials data.
   sheetNames : list
       A list of strings representing the names of the sheets within the Excel spreadsheet.
   debug : bool, optional
       A flag indicating whether debugging information should be printed. Default is False.

   Methods
   -------
   __init__(filename, debug=False)
       Initializes the MaterialsDataBase class with a given Excel spreadsheet and a debug flag.
   getFileName()
       Returns the filename of the Excel spreadsheet being used as the database.
   valid()
       Checks if the spreadsheet is a valid materials database based on certain criteria.
   getSheetNames()
       Retrieves a sorted list of sheet names within the spreadsheet, including additional predefined names.
   getMaterial(sheet)
       Returns a material object based on the data in a given sheet of the Excel spreadsheet.
   readConstantRefractiveIndex(sheet, worksheet, density)
       Reads constant refractive index data for a given material from the spreadsheet.
   readConstantPermittivity(sheet, worksheet, density)
       Reads constant permittivity data for a given material from the spreadsheet.
   readTabulatedRefractiveIndex(sheet, worksheet, density)
       Reads tabulated refractive index data for a given material from the spreadsheet.
   readTabulatedPermittivity(sheet, worksheet, density)
       Reads tabulated permittivity data for a given material from the spreadsheet.
   readLorentzDrude(sheet, worksheet, density, unitCell)
       Reads Drude-Lorentz model parameters for a given material from the spreadsheet.
   readFPSQ(sheet, worksheet, density, unitCell)
       Reads FPSQ model parameters for a given material from the spreadsheet.
   readSellmeier(sheet, worksheet, density, unitCell)
       Reads Sellmeier model parameters for a given material from the spreadsheet.


   .. py:method:: getFileName()

      Return the filename

      Parameters
      ----------
      None

      Returns
      -------
      str
          The filename.



   .. py:method:: getMaterial(sheet)

      Return a material object based on the data in sheet (an excel sheet).

      If one of the following is requested: air, vacuum, ptfe, ldpe, mdpe, kbr, nujol, then
      the material is created even if it is not in the database.

      Parameters
      ----------
      sheet : Excel sheet
          The excel sheet containing the material data.

      Returns
      -------
      Material object
          The material object created from the excel sheet data.



   .. py:method:: getSheetNames()

      Returns a list of the sheetnames in the database.

      As well as the sheets in the database, there are some default materials which will be added
      to the list of materials and which are provided internally by this module.

      Parameters
      ----------
      None

      Returns
      -------
      list
          A list of the sheet names present in the database.



   .. py:method:: readConstantPermittivity(sheet, worksheet, density)

      Read constant permittivity data from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The worksheet instance.
      density : float
          The density of the material.

      Returns
      -------
      None



   .. py:method:: readConstantRefractiveIndex(sheet, worksheet, density)

      Read constant refractive index from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The worksheet.
      density : float
          The density of the material.

      Returns
      -------
      None



   .. py:method:: readFPSQ(sheet, worksheet, density, unitCell)

      Read FPSQ data from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The actual worksheet object.
      density : float
          The density of the material.
      unitCell : object
          The unit cell.

      Returns
      -------
      None



   .. py:method:: readLorentzDrude(sheet, worksheet, density, unitCell)

      Read Drude-Lorentz data from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The worksheet.
      density : float
          The density of the material.
      unitCell : object
          The unit cell.

      Returns
      -------
      None



   .. py:method:: readSellmeier(sheet, worksheet, density, unitCell)

      Read Sellmeier data from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The worksheet.
      density : float
          The density of the material.
      unitCell : object
          The unit cell.

      Returns
      -------
      None



   .. py:method:: readTabulatedPermittivity(sheet, worksheet, density)

      Read tabulated permittivity data from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The worksheet.
      density : float
          The density of the material.

      Returns
      -------
      None



   .. py:method:: readTabulatedRefractiveIndex(sheet, worksheet, density)

      Read tabulated refractive index data from the spreadsheet.

      Parameters
      ----------
      sheet : str
          The worksheet name.
      worksheet : worksheet
          The worksheet.
      density : float
          The density of the material.

      Returns
      -------
      None



   .. py:method:: valid()

      Test to see if the spreadsheet is a valid materials database.

      Parameters
      ----------
      None

      Returns
      -------
      bool
          True if the spreadshee is 'valid'

      Notes
      -----
      None



.. py:class:: ScenarioTab(parent, debug=False)

   Bases: :py:obj:`PyQt5.QtWidgets.QWidget`


   A class representing a tab for scenario configurations within a user interface.

   This class provides functionalities for managing and interacting with scenarios.
   It allows users to create, delete, and switch between different scenarios, as well as open and manipulate a materials database.
   :class:`~PDielec.GUI.PowderScenarioTab.PowderScenarioTab` and :class:`~PDielec.GUI.SingleCrystalScenarioTab.SingleCrystalScenarioTab` inherit from this class.

   Attributes
   ----------
   refreshRequired : bool
       Indicates whether a refresh is required.
   noCalculationsRequired : int
       The number of calculations that need to be performed.
   settings : dict
       A dictionary of settings for the scenario.
   notebook : QWidget
       The parent widget, which is expected to be the notebook container for the scenarios.
   scenarioType : type, optional
       The type of the scenario, e.g., powder, crystal.
   vs_cm1 : list
       List containing default values for some settings.
   DataBase : MaterialsDataBase
       An instance of a class for interacting with a materials database.
   openDB_button : QPushButton
       Button to open the materials database.
   openDB_label : QLabel
       Label associated with the openDB_button.
   database_le : QLineEdit
       Line edit showing the path/name of the current materials database.
   database_le_label : QLabel
       Label associated with the database_le.
   legend_le : QLineEdit
       Line edit for specifying a custom legend for the scenario.
   addScenarioButton : QPushButton
       Button to add another scenario.
   deleteScenarioButton : QPushButton
       Button to delete the current scenario.
   switchScenarioButton : QPushButton
       Button to switch between scenario types (e.g., powder to crystal).

   Methods
   -------
   openDataBase()
       Open the database and set the material names.

   getNoCalculationsRequired()
       Get the number of spectra that need recalculating from this scenario.

   requestRefresh()
       Request a refresh of the scenario

   set_reader(reader)
       Set the reader associated with this scenario

   setScenarioIndex(index)
       Set the index for the current scenario and a default legend name based on the index.

   print_settings()
       Print all the settings for this scenario.

   on_legend_le_changed(text)
       Handle a change in the scenario legend.

   add_scenario_buttons()
       Add a set of scenario buttons in an hbox. Return the hbox.

   addScenarioButtonClicked()
       Handle when the "add another scenario" button has been clicked.

   deleteScenarioButtonClicked()
       Handle when a delete button has been clicked.

   switchScenarioButtonClicked()
       Handle the scenario when a button has been clicked.



   .. py:method:: addScenarioButtonClicked()

      Handle when the "add another scenario" button has been clicked.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: add_scenario_buttons()

      Add a set of scenario buttons in an hbox. Return the hbox.

      Parameters
      ----------
      None

      Returns
      -------
      hbox
          The hbox containing the scenario buttons.



   .. py:method:: deleteScenarioButtonClicked()

      Handle when a delete button has been clicked.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: getNoCalculationsRequired()

      Get the number of spectra that need recalculating from this scenario.

      Parameters
      ----------
      None

      Returns
      -------
      int
          The number of spectra requiring recalculation.



   .. py:method:: on_legend_le_changed(text)

      Handle a change in the scenario legend.

      Parameters
      ----------
      text : str
          The new legend for this scenario

      Returns
      -------
      None




   .. py:method:: openDataBase()

      Open the database and set the material names.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: print_settings()

      Print all the settings for this scenario.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: requestRefresh()

      Request a refresh of the scenario

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: setScenarioIndex(index)

      Set the index for the current scenario.  Also set a default legend name based on the index

      Parameters
      ----------
      index : int
          The scenario index.  

      Returns
      -------
      None



   .. py:method:: set_reader(reader)

      Set the reader associated with this scenario

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: switchScenarioButtonClicked()

      Handle the switch scenario when a button has been clicked.

      Asks the notebook to change the scenario type (Powder or Crystal) to the other.

      Parameters
      ----------
      None

      Returns
      -------
      None



