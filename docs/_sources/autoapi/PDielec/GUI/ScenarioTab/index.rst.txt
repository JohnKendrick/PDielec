PDielec.GUI.ScenarioTab
=======================

.. py:module:: PDielec.GUI.ScenarioTab

.. autoapi-nested-parse::

   ScenarioTab module.



Classes
-------

.. autoapisummary::

   PDielec.GUI.ScenarioTab.ScenarioTab


Module Contents
---------------

.. py:class:: ScenarioTab(parent, debug=False)

   Bases: :py:obj:`qtpy.QtWidgets.QWidget`


   A class representing a tab for scenario configurations within a user interface.

   This class provides functionalities for managing and interacting with scenarios.
   It allows users to create, delete, and switch between different scenarios, as well as open and manipulate a materials database.
   :class:`~PDielec.GUI.PowderScenarioTab.PowderScenarioTab` and :class:`~PDielec.GUI.SingleCrystalScenarioTab.SingleCrystalScenarioTab` inherit from this class.

   Attributes
   ----------
   refreshRequired : bool
       Indicates whether a refresh is required.
   noCalculationsRequired : int
       The number of calculations that need to be performed.
   settings : dict
       A dictionary of settings for the scenario.
   notebook : QWidget
       The parent widget, which is expected to be the notebook container for the scenarios.
   scenarioType : type, optional
       The type of the scenario, e.g., powder, crystal.
   vs_cm1 : list
       List containing default values for some settings.
   DataBase : MaterialsDataBase
       An instance of a class for interacting with a materials database.
   openDB_button : QPushButton
       Button to open the materials database.
   openDB_label : QLabel
       Label associated with the openDB_button.
   database_le : QLineEdit
       Line edit showing the path/name of the current materials database.
   database_le_label : QLabel
       Label associated with the database_le.
   legend_le : QLineEdit
       Line edit for specifying a custom legend for the scenario.
   addScenarioButton : QPushButton
       Button to add another scenario.
   deleteScenarioButton : QPushButton
       Button to delete the current scenario.
   switchScenarioButton : QPushButton
       Button to switch between scenario types (e.g., powder to crystal).

   Methods
   -------
   openDataBase()
       Open the database and set the material names.

   getNoCalculationsRequired()
       Get the number of spectra that need recalculating from this scenario.

   requestRefresh()
       Request a refresh of the scenario

   set_reader(reader)
       Set the reader associated with this scenario

   setScenarioIndex(index)
       Set the index for the current scenario and a default legend name based on the index.

   print_settings()
       Print all the settings for this scenario.

   on_legend_le_changed(text)
       Handle a change in the scenario legend.

   add_scenario_buttons()
       Add a set of scenario buttons in an hbox. Return the hbox.

   addScenarioButtonClicked()
       Handle when the "add another scenario" button has been clicked.

   deleteScenarioButtonClicked()
       Handle when a delete button has been clicked.

   switchScenarioButtonClicked()
       Handle the scenario when a button has been clicked.



   .. py:method:: addScenarioButtonClicked()

      Handle when the "add another scenario" button has been clicked.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: add_scenario_buttons()

      Add a set of scenario buttons in an hbox. Return the hbox.

      Parameters
      ----------
      None

      Returns
      -------
      hbox
          The hbox containing the scenario buttons.




   .. py:method:: deleteScenarioButtonClicked()

      Handle when a delete button has been clicked.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: getNoCalculationsRequired()

      Get the number of spectra that need recalculating from this scenario.

      Parameters
      ----------
      None

      Returns
      -------
      int
          The number of spectra requiring recalculation.




   .. py:method:: on_legend_le_changed(text)

      Handle a change in the scenario legend.

      Parameters
      ----------
      text : str
          The new legend for this scenario

      Returns
      -------
      None




   .. py:method:: openDataBase()

      Open the database and set the material names.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: print_settings()

      Print all the settings for this scenario.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: requestRefresh()

      Request a refresh of the scenario.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: setScenarioIndex(index)

      Set the index for the current scenario and a default legend name based on the index.

      Parameters
      ----------
      index : int
          The scenario index.  

      Returns
      -------
      None




   .. py:method:: set_reader(reader)

      Set the reader associated with this scenario.

      Parameters
      ----------
      reader : a reader object
          The reader to be used for this scenario

      Returns
      -------
      None




   .. py:method:: switchScenarioButtonClicked()

      Handle the switch scenario when a button has been clicked.

      Asks the notebook to change the scenario type (Powder or Crystal) to the other.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:attribute:: DataBase


   .. py:attribute:: PDielec_Directory


   .. py:attribute:: database_le


   .. py:attribute:: database_le_label


   .. py:attribute:: debugger


   .. py:attribute:: filename


   .. py:attribute:: noCalculationsRequired
      :value: 0



   .. py:attribute:: notebook


   .. py:attribute:: openDB_button


   .. py:attribute:: openDB_label


   .. py:attribute:: refreshRequired
      :value: True



   .. py:attribute:: scenarioType
      :value: None



   .. py:attribute:: settings


   .. py:attribute:: vs_cm1
      :value: [0, 0]



