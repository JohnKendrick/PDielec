:py:mod:`PDielec.GUI.ScenarioTab`
=================================

.. py:module:: PDielec.GUI.ScenarioTab

.. autoapi-nested-parse::

   ScenarioTab

   The MIT License (MIT)

   Copyright (c) 2024 John Kendrick

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   PDielec.GUI.ScenarioTab.ScenarioTab




.. py:class:: ScenarioTab(parent, debug=False)


   Bases: :py:obj:`PyQt5.QtWidgets.QWidget`

   A class representing a tab for scenario configurations within a user interface.

   This class provides functionalities for managing and interacting with scenarios.
   It allows users to create, delete, and switch between different scenarios, as well as open and manipulate a materials database.
   The Powder and SingleCrystal scenarios inherit from this class.


   Attributes
   ----------
   refreshRequired : bool
       Indicates whether a refresh is required.
   noCalculationsRequired : int
       The number of calculations that need to be performed.
   settings : dict
       A dictionary of settings for the scenario.
   notebook : QWidget
       The parent widget, which is expected to be the notebook container for the scenarios.
   scenarioType : type, optional
       The type of the scenario, e.g., powder, crystal.
   vs_cm1 : list
       List containing default values for some settings.
   DataBase : MaterialsDataBase
       An instance of a class for interacting with a materials database.
   openDB_button : QPushButton
       Button to open the materials database.
   openDB_label : QLabel
       Label associated with the openDB_button.
   database_le : QLineEdit
       Line edit showing the path/name of the current materials database.
   database_le_label : QLabel
       Label associated with the database_le.
   legend_le : QLineEdit
       Line edit for specifying a custom legend for the scenario.
   addScenarioButton : QPushButton
       Button to add another scenario.
   deleteScenarioButton : QPushButton
       Button to delete the current scenario.
   switchScenarioButton : QPushButton
       Button to switch between scenario types (e.g., powder to crystal).

   Methods
   -------
   openDataBase()
       Open the database and set the material names.

   getNoCalculationsRequired()
       Get the number of spectra that need recalculating from this scenario.

   requestRefresh()
       Request a refresh of the scenario

   set_reader(reader)
       Set the reader associated with this scenario

   setScenarioIndex(index)
       Set the index for the current scenario and a default legend name based on the index.

   print_settings()
       Print all the settings for this scenario.

   on_legend_le_changed(text)
       Handle a change in the scenario legend.

   add_scenario_buttons()
       Add a set of scenario buttons in an hbox. Return the hbox.

   addScenarioButtonClicked()
       Handle when the "add another scenario" button has been clicked.

   deleteScenarioButtonClicked()
       Handle when a delete button has been clicked.

   switchScenarioButtonClicked()
       Handle the scenario when a button has been clicked.


   .. py:method:: addScenarioButtonClicked()

      Handle when the "add another scenario" button has been clicked.

      Parameters
      ----------
      None

      Returns
      -------
      None


   .. py:method:: add_scenario_buttons()

      Add a set of scenario buttons in an hbox. Return the hbox.

      Parameters
      ----------
      None

      Returns
      -------
      hbox
          The hbox containing the scenario buttons.


   .. py:method:: deleteScenarioButtonClicked()

      Handle when a delete button has been clicked.

      Parameters
      ----------
      None

      Returns
      -------
      None


   .. py:method:: getNoCalculationsRequired()

      Get the number of spectra that need recalculating from this scenario.

      Parameters
      ----------
      None

      Returns
      -------
      int
          The number of spectra requiring recalculation.


   .. py:method:: on_legend_le_changed(text)

      Handle a change in the scenario legend.

      Parameters
      ----------
      text : str
          The new legend for this scenario

      Returns
      -------
      None



   .. py:method:: openDataBase()

      Open the database and set the material names.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: print_settings()

      Print all the settings for this scenario.

      Parameters
      ----------
      None

      Returns
      -------
      None


   .. py:method:: requestRefresh()

      Request a refresh of the scenario

      Parameters
      ----------
      None

      Returns
      -------
      None


   .. py:method:: setScenarioIndex(index)

      Set the index for the current scenario.  Also set a default legend name based on the index

      Parameters
      ----------
      index : int
          The scenario index.  

      Returns
      -------
      None


   .. py:method:: set_reader(reader)

      Set the reader associated with this scenario

      Parameters
      ----------
      None

      Returns
      -------
      None


   .. py:method:: switchScenarioButtonClicked()

      Handle the switch scenario when a button has been clicked.

      Asks the notebook to change the scenario type (Powder or Crystal) to the other.

      Parameters
      ----------
      None

      Returns
      -------
      None



