PDielec.GUI.ViewerTab
=====================

.. py:module:: PDielec.GUI.ViewerTab

.. autoapi-nested-parse::

   ViewerTab module



Attributes
----------

.. autoapisummary::

   PDielec.GUI.ViewerTab.angstrom
   PDielec.GUI.ViewerTab.elemental_colours
   PDielec.GUI.ViewerTab.wavenumber


Classes
-------

.. autoapisummary::

   PDielec.GUI.ViewerTab.Debug
   PDielec.GUI.ViewerTab.OpenGLWidget
   PDielec.GUI.ViewerTab.SuperCell
   PDielec.GUI.ViewerTab.ViewerTab


Module Contents
---------------

.. py:class:: Debug(debug, text, level=0)

   A class aimed at providing a structured way to include debug messages in code.

   Methods
   -------
   print(args, level=0)
       Prints debug messages based on the debug level provided as argument compared to the object's debug level.
   state()
       Returns the current state (enabled or disabled) of debugging.

   Notes
   -----
   The `print` method provides a flexible way to include additional information along with the base debug message, allowing for a detailed and adjustable debugging output.


   .. py:method:: print(*args, level=0)

      Prints message if debugging level allows.

      Parameters
      ----------
      args
          Variable length argument list for the message to be printed.
      level : int, optional
          The level of the message that determines if it gets printed or not,
          based on the instance's `level`. Default value is 0.

      Notes
      -----
      This method will only print the message if the instance's `debug` flag is True
      and the provided `level` is less than or equal to the instance's `level`.



   .. py:method:: state()

      Get the debug state.

      Parameters
      ----------
      None

      Returns
      -------
      The current debug state.



.. py:class:: OpenGLWidget(parent, debug=False)

   Bases: :py:obj:`PyQt5.QtWidgets.QOpenGLWidget`


   A widget for the Qt framework specialized in OpenGL graphics rendering.

   This widget is designed to act as a capable 3D rendering environment
   for OpenGL within a Qt application. It supports a wide range of 3D
   visualization tasks, including rendering spheres, cylinders, and arrows
   to represent molecular structures or other 3D objects.

   Parameters
   ----------
   parent : QWidget
       The parent widget.
   debug : bool, optional
       Enables debug output if True.

   Attributes
   ----------
   format : QSurfaceFormat
       Specifies the format options for the rendering context. Common settings include
       samples for multisampling and the swap behavior for double buffering.
   spheres : deque
       A queue that holds sphere objects to be rendered. These can represent atoms or other spherical entities.
   cylinders : deque
       A queue that holds cylinder objects representing bonds or connections between spheres.
   arrows : deque
       A queue that holds arrow objects, useful for indicating directions or forces.
   light_positions : list
       Defines positions for up to eight lights in the 3D space.
   lights : list
       References to OpenGL light objects, typically provided as constants like GL_LIGHT0, GL_LIGHT1, etc.

   Methods
   -------
   enterEvent(event)
       Handles the mouse entering the widget's area.
   showArrows(show)
       Toggles the visibility of arrows.
   timeoutHandler()
       Advances the current animation phase or shifts direction at bounds.
   myMakeCurrent()
       Ensures the OpenGL context is current and checks for errors.
   moleculeRotate(scale, x, y, z)
       Applies a rotation to the molecule model.
   keyPressEvent(event)
       Custom key press event handler for zooming and rotating the model.
   save_movie(filename)
       Saves a rendered animation to a movie file.
   snapshot(filename)
       Takes a snapshot of the current OpenGL frame and saves it as an image.
   translate(x, y)
       Translates the scene.
   wheelEvent(event)
       Handles mouse wheel events for zooming.
   mousePressEvent(event), mouseReleaseEvent(event), mouseMoveEvent(event)
       Handles mouse interactions for rotating and translating the scene.
   zoom(zoom)
       Applies zoom to the scene based on input.
   stopAnimation()
       Stops the animation timer.
   startAnimation()
       Starts or restarts the animation timer.
   paintGL()
       The main rendering function called by the Qt framework to draw the OpenGL scene.
   drawSpheres(), drawCylinders(), drawArrows()
       Functions responsible for drawing the respective geometric objects.
   resizeGL(w, h)
       Adjusts the viewport and projection matrix on widget resize.
   initializeGL()
       Initializes OpenGL states and geometry.
   setImageSize()
       Calculates the ideal image size for the viewport.
   setProjectionMatrix()
       Sets up the projection matrix based on the current image size and viewport dimensions.
   defineLights()
       Configures the light sources.
   setRotationCentre(pos)
       Sets the center of rotation for the scene.
   createArrays(nphases)
       Initializes storage for drawable objects across animation phases.
   deleteSpheres(), deleteCylinders(), deleteArrows()
       Convenience methods for clearing the drawable objects.
   addArrows(colour, radius, direction, length, phase=0)
       Adds an arrow to the scene.
   addCylinder(colour, radius, pos1, pos2, phase=0)
       Adds a cylinder to the scene.
   addSphere(colour, radius, pos, phase=0)
       Adds a sphere to the scene.


   .. py:method:: addArrows(colour, radius, direction, length, phase=0)

      Add an arrow to the list of arrows.

      Parameters
      ----------
      colour : str
          The color of the arrow.
      radius : int or float
          The radius from the center where the arrow will be placed.
      direction : int or float
          The direction in which the arrow points.
      length : int or float
          The length of the arrow.
      phase : int or float, optional
          The phase of the arrow, defaults to 0.

      Returns
      -------
      None



   .. py:method:: addCylinder(colour, radius, pos1, pos2, phase=0)

      Adds a Cylinder object to the specified phase collection of cylinders.

      Parameters
      ----------
      colour : str
          The color of the cylinder.
      radius : float
          The radius of the cylinder.
      pos1 : tuple
          The starting position of the cylinder (x, y, z coordinates).
      pos2 : tuple
          The ending position of the cylinder (x, y, z coordinates).
      phase : int, optional
          The phase to which the cylinder should be added. Default is 0.

      Returns
      -------
      None



   .. py:method:: addSphere(colour, radius, pos, phase=0)

      Add a sphere to a collection within an object.

      Parameters
      ----------
      colour : Any
          The colour of the sphere, can vary depending on representation (e.g., string, tuple of RGB values).
      radius : float
          The radius of the sphere.
      pos : tuple
          Position of the sphere, usually a tuple of coordinates (x, y, z).
      phase : int, optional
          The specific phase (or collection) to which the sphere should be added. Defaults to 0.

      Returns
      -------
      None



   .. py:method:: createArrays(nphases)

      Create or reinitialize arrays for spheres and cylinders for each phase.

      This method creates or clears and then repopulates `self.spheres` and `self.cylinders` with an empty `deque` for each phase. It also sets `self.number_of_phases` to the given `nphases` and initializes `self.current_phase` to the midpoint of the range of phases (rounded down if `nphases` is an odd number).

      Parameters
      ----------
      nphases : int
          The number of phases for which to create arrays.

      Returns
      -------
      None

      Notes
      -----
      - Assumes `self.spheres` and `self.cylinders` are already defined as lists.
      - It uses the `clear` method on both `self.spheres` and `self.cylinders`, which is available for lists in Python 3.3 and later.



   .. py:method:: defineLights()

      Define light configurations for the viewer.

      This method sets up the lighting for a 3D viewer by configuring ambient, diffuse, and specular light properties, as well as light positions. It also controls which lights are enabled or disabled based on the object's `light_switches` attribute.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      - `self.light_switches` needs to be initially set or inherited from `self.viewerTab.light_switches` if `self.light_switches` is None.
      - Lighting is enabled globally with `glEnable(GL_LIGHTING)`.
      - For each light defined by the `self.light_positions`, `self.light_switches`, and `self.lights` attributes, this method sets up:
        - Ambient light properties with `glLightfv(light, GL_AMBIENT, [...])`.
        - Diffuse light properties with `glLightfv(light, GL_DIFFUSE, [...])`.
        - Specular light properties with `glLightfv(light, GL_SPECULAR, [...])`.
        - The position of each light with `glLightfv(light, GL_POSITION, position)`.
      - If `self.linearAttenuation` is True, linear attenuation is set for each light with `glLight(light, GL_LINEAR_ATTENUATION, 1.0)`.
      - Each light in `self.lights` is either enabled or disabled based on its corresponding status in `self.light_switches`.



   .. py:method:: deleteArrows()

      Deletes all arrows from a collection.

      This method clears the collection of arrows by removing all elements from it.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: deleteCylinders()

      Deletes all cylinder objects from the storage.

      This method clears the list that stores cylinder objects, effectively
      removing all the cylinders managed by the instance.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      This method should be used with caution as it irreversibly deletes all 
      cylinder data from the instance.



   .. py:method:: deleteSpheres()

      Deletes all spheres from the current context.

      This method clears the collection of spheres.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: drawArrows()

      Draw the designated arrows with specified properties.

      This method draws a series of arrows based on the properties stored within instances of the class. The arrows are displayed on the viewer associated with `self`. Each arrow has an associated sphere from which it originates. These spheres have positional data that dictate where the arrow is drawn. Furthermore, arrows have several visual properties such as color and size that are applied when rendering. Error handling for absent arrows is included, halting the function early if no arrows are to be drawn.

      Parameters
      ----------
      None

      Returns
      -------
      None


      Notes
      -----
      - The arrow drawing process involves translating and rotating the OpenGL context to the appropriate position and orientation before drawing cylinders to represent the arrows.
      - Material properties such as diffuse, ambient, and specular colors are calculated from the arrow's color and applied to the OpenGL material.
      - Arrows consist of a cylindrical shaft and a conical tip, whose dimensions and orientations are based on the properties of each arrow (e.g., direction, length, angle, rotation, colour, and radius).
      - This method depends on the `self.arrows` list and the corresponding `self.spheres` for the current phase stored in `self.current_phase`. It leverages OpenGL functions and assumes that `self.viewerTab.settings['Arrow colour']`, along with other properties like `self.diffuseMaterialFactor`, `self.ambientMaterialFactor`, `self.specularLightFactor`, and `self.glintMaterialFactor` are predefined and correctly configured.



   .. py:method:: drawCylinders()

      Draw the cylinders stored in the object.

      This method iterates through the list of cylinder objects for the current phase, 
      computes the required material colors based on predefined factors, and renders 
      each cylinder using OpenGL commands.

      Parameters
      ----------
      None

      Returns
      -------
      None


      Notes
      -----
      Each cylinder is represented by an object with attributes such as colour, radius,
      position1, position2, height, angle, and rotation. These attributes are used to 
      determine the cylinder's appearance and placement in the 3D space.

      This function assumes that OpenGL context is correctly set up, and global variables 
      such as `self.diffuseMaterialFactor`, `self.ambientMaterialFactor`, `self.specularLightFactor`,
      `self.white`, `self.glintMaterialFactor`, `self.quadric`, `self.cylinder_slices`, and 
      `self.cylinder_stacks` are predefined and configured.

      It is also assumed that `self.cylinders` is a dictionary where each key corresponds to a 
      different phase, and the value is a list of cylinder objects for that phase. The current 
      phase is determined by `self.current_phase`.



   .. py:method:: drawSpheres()

      Draw spheres based on the object's current phase and spheres attributes.

      This method iterates through the spheres assigned to the current phase of the invoking object. For each sphere, it sets the material properties based on the sphere's color and predefined material factors. Then, it translates the drawing location to the sphere's position and draws the sphere using OpenGL functions.

      Parameters
      ----------
      None

      Returns
      -------
      None


      Notes
      -----
      Requires OpenGL (PyOpenGL) for rendering. The method modifies the OpenGL state to draw spheres at specified locations with given radii and colors. Assumes the presence of attributes like `spheres`, `current_phase`, `diffuseMaterialFactor`, `ambientMaterialFactor`, `specularLightFactor`, and methods or attributes for rendering parameters such as `quadric`, `sphere_slices`, `sphere_stacks`.



   .. py:method:: enterEvent(event)

      Handle the entering of an event.

      Parameters
      ----------
      event : QEvent
          The event that triggers the enterEvent.

      Returns
      -------
      None

      Notes
      -----
      This function primarily ensures that the focus is set accordingly when an event occurs, and then it passes the event on to the viewerTab's own enterEvent handler for further processing.



   .. py:method:: initializeGL()

      Initializes OpenGL rendering context.

      This function sets up various OpenGL attributes and states including lighting, depth test, smooth shading, and anti-aliasing features to prepare for rendering in a GL context. It configures the viewport settings based on the associated viewer tab's background color settings.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: keyPressEvent(event)

      Handle keyboard events for specific actions.

      This method is triggered whenever a keyboard event occurs. 
      It interprets key presses to perform various actions such as rotating the molecule, zooming in or out, 
      saving the current state, toggling between full screen mode, and resetting the view. 

      Parameters
      ----------
      event : QKeyEvent
          The event object that contains information about the key press event.

      Returns
      -------
      None

      Notes
      -----
      This function checks for specific keys and their combinations with modifiers like Shift and Control to determine the required action. 
      For rotation and zoom actions, the amount of change is determined based on whether 
      any modifiers are pressed (larger rotation if Shift or Control is held). 
      Saving, toggling the full screen mode, and resetting the view do not require modifiers.

      The following keys perform actions as described:
      - Left/Right Arrow: Rotate the molecule along the Y-axis.
      - Up/Down Arrow: Rotate the molecule along the X-axis.
      - Plus/Minus: Zoom in or out.
      - P: Save current state/configuration.
      - F: Toggle full screen mode.
      - Home: Reset the view to the initial state.

      Modifiers:
      - Shift: Increases the rotation amount.
      - Control: Increases the rotation amount.

      Attributes modified:
      - This method modifies various attributes of the instance based on the key pressed, including rotation angles, zoom levels, screen mode, and view matrix.

      Requires
      --------
      This function requires `Qt`, `GL_MODELVIEW`, `glLoadIdentity`, `np`, and the instance methods 
      `myMakeCurrent`, `moleculeRotate`, `zoom`, `save_movie`, `showFullScreen`, and `showNormal` to be properly defined. 
      It also assumes an external debugger tool for logging.

      Raises
      ------
      This method does not explicitly raise any exceptions but might propagate exceptions from methods it calls.



   .. py:method:: moleculeRotate(scale, x, y, z)

      Rotate a molecule object around the specified axes.

      This method applies a rotation transformation to a molecule object
      around the x, y, and z axes, scaled by a given factor.

      Parameters
      ----------
      scale : float
          The scaling factor for the rotation. Represents how much the rotation is amplified.
      x : float
          The degree of rotation around the x-axis (degrees).
      y : float
          The degree of rotation around the y-axis (degrees).
      z : float
          Degree of rotation around the z-axis (degrees) is ignored, the parameter is preserved for interface consistency or future use.

      Returns
      -------
      None

      Notes
      -----
      - This function assumes that the GL_MODELVIEW matrix mode is active and manipulates the current matrix stack accordingly.
      - It first saves the current model view matrix, then resets it to the identity.
      - Rotations for the x and y axes are applied in sequence, scaled by the provided `scale` factor.
      - Finally, the original matrix is restored and multiplied by the new rotation transformations.
      - The function uses OpenGL calls like `glRotatef` and `glMultMatrixf`, making sure the graphical representation of the molecule is updated to reflect the rotation.

      Examples
      --------
      >>> mol_object = Molecule()
      >>> mol_object.moleculeRotate(45, 1, 0, 0)
      This would rotate the molecule 45 degrees around the x-axis.

      See Also
      --------
      glRotatef : Rotates the current matrix a specified number of degrees about a specified axis.
      glMultMatrixf : Multiplies the current matrix by the specified matrix.
      glLoadIdentity : Replaces the current matrix with the identity matrix.

      Raises
      ------
      This function does not explicitly raise exceptions but relies on the OpenGL context and the `update` method's implementation.



   .. py:method:: mouseMoveEvent(event)

      Handle the mouse move events to perform various actions.

      Parameters
      ----------
      event : QMouseEvent
          The mouse event that contains information about the state of the mouse.

      Returns
      -------
      None

      Notes
      -----
      This method checks if the left or middle mouse button is pressed and applies different transformations (zoom, rotate, or translate) based on the mouse movement and whether certain modifier keys (Shift or Control) are pressed.
      - If the left mouse button is pressed:
      - With no modifiers or with Shift or Control modifier pressed: Performs rotation.
      - With Shift or Control modifier pressed: Performs zoom.
      - If the middle mouse button is pressed: Performs translation.

      Mouse coordinates are updated at the end of the method to reflect the current position.



   .. py:method:: mousePressEvent(event)

      Handle the mouse press event.

      Parameters
      ----------
      event : QMouseEvent
          The mouse event instance containing data of the mouse press.

      Returns
      -------
      None



   .. py:method:: mouseReleaseEvent(event)

      Handles the mouse release event.

      Parameters
      ----------
      event : QMouseEvent
          The event object containing information about the mouse release event.

      Returns
      -------
      None

      Notes
      -----
      This method records the x and y coordinates of the mouse at the moment it is released.



   .. py:method:: myMakeCurrent()

      Make the current OpenGL context active and clear any errors.

      This method activates the current OpenGL context by calling `makeCurrent`,
      then repeatedly calls `glGetError` to clear any accumulated OpenGL errors.

      Notes
      -----
      This function requires that an OpenGL context is available and that `makeCurrent`
      and `glGetError` are correctly implemented in the class this method belongs to.
      `makeCurrent` should make the OpenGL context current, and `glGetError` should
      return the current OpenGL error code, with `GL_NO_ERROR` indicating no error.

      This method does not return any value or raise exceptions. It is designed to
      ensure that the OpenGL context is error-free after making it current.



   .. py:method:: paintGL()

      Render OpenGL graphics for the current scene.

      This method prepares the graphics context, clears the buffer, sets the background color,
      and draws the current scene which may include spheres, cylinders, and arrows based on the object's state.

      Parameters
      ----------
      None

      Returns
      -------
      None


      Notes
      -----
      Requires access to OpenGL context and assumes that necessary OpenGL libraries
      and the debugger object are available in the scope. `paintGL` is typically called
      by the OpenGL rendering loop.

      Attributes Modified
      -------------------
      - Utilizes several attributes of the instance (`self`), including `background_colour`,
        `rotation_centre`, and `show_arrows`, to determine how to render the scene.
      - The OpenGL context is modified by setting the clear color and transforming the modelview matrix.



   .. py:method:: resizeGL(w, h)

      Resizes the OpenGL widget to a new width and height.

      Notes
      -----
      This is typically overridden in a subclass and used to adjust the OpenGL viewport or projection matrix when the widget is resized.

      Parameters
      ----------
      w : int
          The new width of the OpenGL widget.
      h : int
          The new height of the OpenGL widget.

      Returns
      -------
      None




   .. py:method:: save_movie(filename)

      Save the current state as a movie file.

      This method captures snapshots of the current state at different phases,
      processes them, and compiles them into a movie file.

      Parameters
      ----------
      filename : str
          The filename (including path) where the movie should be saved.

      Returns
      -------
      None

      Notes
      -----
      Relies on `imageio` for writing the movie file and handling images.
      If a timer is present, it's temporarily stopped to ensure snapshots are
      taken consistently, and then restarted once the movie is saved.
      Temporary storage is used for intermediate images




   .. py:method:: setImageSize()

      Set the maximum image size based on the furthest object from the rotation center.

      This method evaluates the position of spheres and cylinders in the current phase, calculates their distance from a fixed point (rotation center), and updates the `image_size` attribute to the maximum distance found. It ensures the all objects will fit within the rendered image. Finally, it updates the projection matrix and logs the new image size.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      The `self` parameter represents the instance of the class in which the function is called. This function relies on the `math.sqrt`, `np.dot` for calculations, and expects `self.spheres`, `self.cylinders`, `self.current_phase`, `self.rotation_centre`, and `self.setProjectionMatrix` to be defined.



   .. py:method:: setProjectionMatrix()

      Set the projection matrix for rendering.

      This method configures the projection matrix based on the current image size, width, and height attributes of the object. It's intended to set up an orthographic projection suited to the object's dimensions. If any of the required attributes (`image_size`, `my_width`, or `my_height`) are not set, the method will exit early. The method also sets the view to the middle phase of an unspecified number of total phases and resets the model view matrix.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      This method makes several OpenGL calls to configure the projection and model view matrices and assumes that `self.myMakeCurrent()` makes the required OpenGL context current. It also updates `self.matrix` with an identity matrix and sets `self.current_phase` based on the total number of phases.



   .. py:method:: setRotationCentre(pos)

      Set the rotation centre to a specified position.

      Parameters
      ----------
      pos : array_like
          The position to set the rotation centre. Expected to be an iterable
          with numerical values that can be converted to a NumPy array.

      Returns
      -------
      None



   .. py:method:: showArrows(show)

      Set the visibility of arrows

      Parameters
      ----------
      show : bool
          A boolean indicating whether to show arrows (True) or not (False).

      Returns
      -------
      None

      Notes
      -----
      This function updates the `show_arrows` attribute based on the "show" parameter and prints the current status to the debugger.



   .. py:method:: snapshot(filename)

      Capture and save a snapshot of the current framebuffer to a file.

      Parameters
      ----------
      filename : str
          The name of the file where the snapshot will be saved.

      Returns
      -------
      None

      Examples
      --------
      Assuming an instance `display` of the class containing this method:

      ```python
      display.snapshot('screenshot.png')
      ```

      This will grab the current framebuffer content and save it as 'screenshot.png'.



   .. py:method:: startAnimation()

      Starts or restarts an animation timer.

      This method checks if an animation timer is already running.
      If so, it stops the current timer. If not, it initializes and starts a new timer
      with the interval specified in `self.timer_interval`. When the timer times out,
      it triggers `self.timeoutHandler`.

      Parameters
      ----------
      None

      Returns
      -------
      None


      Notes
      -----
      - `self.timer` is expected to be an attribute of the instance which either holds
        a QTimer object or None.
      - This method directly modifies `self.timer` to either stop the current timer
        or create, set up, and start a new timer.
      - This method is designed for use within a class that manages animations or
        timed events, utilizing a QTimer from the PyQt or PySide frameworks.



   .. py:method:: stopAnimation()

      Stop the ongoing animation.

      This method stops the animation by stopping the timer associated with it.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      This function assumes that `self.timer` is an instance with a `stop` method, which is called to halt any ongoing animation. If `self.timer` is `None`, indicating no animation is currently active, this method does nothing.



   .. py:method:: timeoutHandler()

      Handles the timeout event in a cyclic phase system by updating the current phase and direction.

      This function updates the `current_phase` by advancing or reversing it based on the `phase_direction`.
      When the end or the start of the phases is reached, the direction is reversed, ensuring cyclic behavior
      through the phases. After updating the phase and direction, the function logs the current phase and
      updates the system state.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      - `self.current_phase` is the index of the current phase in the cycle.
      - `self.number_of_phases` indicates the total number of available phases.
      - `self.phase_direction` is either +1 or -1, indicating the direction of phase progression.
      - The `update` method is called at the end to apply any changes made to the state as a result of this timeout event.



   .. py:method:: translate(x, y)

      Translate an object by modifying its current position.

      Parameters
      ----------
      x : float
          The distance to translate along the x-axis.
      y : float
          The distance to translate along the y-axis.

      Returns
      -------
      None

      Notes
      -----
      This method updates the current position of the object by adding the specified distances along the x and y axes, respectively. It does not return a value.

      This function involves a call to `glTranslatef`, which applies a translation transformation to the current matrix. Ensure that the appropriate OpenGL context is made current before calling this function by using `self.myMakeCurrent()`.



   .. py:method:: wheelEvent(event)

      Handles a wheel event to zoom in or out.

      Parameters
      ----------
      event : QWheelEvent
          The wheel event containing information about the wheel movement.

      Returns
      -------
      None

      Notes
      -----
      This function first logs the occurrence of a wheel event. It then sets
      the current context to this object before determining the direction and
      intensity of the zoom based on the vertical angle delta of the wheel event.
      Lastly, it refreshes the display to reflect any changes.



   .. py:method:: zoom(zoom)

      Zoom in or out on an object.

      Parameters
      ----------
      zoom : int or float
          The zoom level. Positive values zoom in, negative values zoom out.

      Returns
      -------
      None

      Notes
      -----
      - This function requires a current context and will make itself the current one before applying transformations.
      - Updates the object's state after zooming.

      Uses `glScalef` from OpenGL for scaling transformations and assumes that `debugger` and `glScalef` are accessible in the current context, with `debugger.print` used for debug logging.



   .. py:attribute:: format


.. py:class:: SuperCell(aUnitCell, anImageSpecifier)

   Hold super-cell information; the unit cell and the super-cell size.

   Parameters
   ----------
   aUnitCell : :class:`~PDielec.UnitCell.UnitCell`
       The unit cell associated with this instance.
   anImageSpecifier : list or tuple
       The list or tuples of 3 numbers used to generate images.

   Attributes
   ----------
   unitCell : :class:`~PDielec.UnitCell.UnitCell`
       The unit cell associated with this instance. (see :class:`~PDielec.UnitCell.UnitCell`)
   imageList : NoneType or list
       Initialized as None, can later hold a list of images of the cell
   imageSpecifier : list or tuple
       A list or tuple of 3 numbers which indicate the number of images of the cell to be created
   XYZ : NoneType or array_like
       Initialized as None, can later hold XYZ coordinates. (Cartesian coordinates)

   Notes
   -----
   This method automatically invokes the createImages method at the end of initialization.

   See also
   --------

   :class:`~PDielec.UnitCell.UnitCell`


   .. py:method:: calculateBonds()

      Calculate the bonding in the supercell.

      Parameters
      ----------
      None

      Returns
      -------
      list
          A list of the bonds as pairs of atom indexes

      Notes
      -----
      The bonding in the unit-cell is assumed to be valid whole-molecule bonding
      the bonds are not recalculated, just extended into the super-cell



   .. py:method:: calculateCentreOfBox()

      This is not the centre of mass. We calculate the centre of the super-cell in cartesian coordinates.

      Parameters
      ----------
      None

      Returns
      -------
      vector
          The centre of the images in the box



   .. py:method:: calculateCentreOfMass(output='xyz')

      Calculate the center of mass for a molecular structure.

      Parameters
      ----------
      output : str, optional
          The output. Options are 'xyz' for mass and Cartesian coordinates,
          'mass' for the total mass only, 'abc' for mass and fractional coordinates, or any other string
          to return a tuple with all three values (mass, Cartesian coordinates, fractional coordinates).
          The default value is 'xyz'.

      Returns
      -------
      numpy.ndarray or float or tuple
          Depending on the value of `units`:
          If 'xyz', returns a tuple with mass and a numpy.ndarray of Cartesian coordinates of the center of mass.
          If 'mass', returns the total mass as a float.
          If 'abc', returns tuple with mass and a numpy.ndarray of fractional coordinates of the center of mass.
          For any other value of `output`, returns a tuple containing the total mass (float), Cartesian
          coordinates (numpy.ndarray), and fractional coordinates (numpy.ndarray) of the center of mass.



   .. py:method:: calculateNormalModes(modes)

      Calculate and return the normal modes of the supercell.

      Normal modes are initially an np array of nmodes, 3*nions.
      The number of modes stays the same but the number of ions
      increases according to the number of images.

      Parameters
      ----------
      modes : a list of ints
          A list of the modes to be used in the calculation

      Returns
      -------
      np.ndarray
          Array representing the normal modes of the supercell. Initially, this is an array
          of shape (nmodes, 3*nions), where `nmodes` is the number of modes and `nions` is the
          number of ions per mode. The shape may vary as the number of ions increases with the
          number of images.



   .. py:method:: calculateXYZ()

      Calculate and return the cartesian coordinates of the supercell.

      The fractional cell coordinates of the unit cell are used to calculate the XYZ coordinates of the super-cell

      Parameters
      ----------
      None

      Returns
      -------
      output : array
          The Cartesian coordinates of the supercell.



   .. py:method:: createImages(anImageSpecifier)

      Create a list of images extending by ia, jb, kc units in the a, b, c directions. The image specifier is a list of the form [ia, jb, kc].

      Parameters
      ----------
      anImageSpecifier : list (ia, jb, kc)
          ia an integer specifying extension in the a direction.
          jb an integer specifying extension in the b direction.
          kc an integer specifying extension in the c direction.

      Returns
      -------
      list
          A list of created images.



   .. py:method:: getBoundingBox(originABC=[0, 0, 0])

      Calculate the bounding box of an object in Cartesian coordinates based on its image specifications and an origin.

      Return a box with 8 corners and 12 edges which represent the supercel in cartesian space
      - Corners in abc space
      - shift the origin to originABC

      Parameters
      ----------
      originABC : array-like, optional
          The origin coordinates (A, B, C) to which the bounding box will be translated.
          defaults to 0,0,0

      Returns
      -------
      tuple
          A tuple containing two elements:

          - corners_xyz : list
            A list of corner points in XYZ coordinates specifying the bounding box, shifted to the provided origin.

          - edges : list
            A list of tuples, each representing an edge of the bounding box defined by a pair of XYZ coordinates.

      Notes
      -----
      The function calculates the center of the bounding box, re-centers the corners to the provided origin, and then builds edges between these corners in XYZ space.



   .. py:method:: getElementNames()

      Calculate and return the element names of the supercell.

      Parameters
      ----------
      None

      Returns
      -------
      list
          The element names of the supercell.



   .. py:method:: print()

      Print the contents of the SuperCell

      Parameters
      ----------
      None

      Returns
      -------
      None

      Example
      --------
      ```
      # Create a 3x2x1 super-cell
      import PDielec.SuperCell as SC
      import PDielec.UnitCell as UC
      uc=UC.UnitCell(1.0,2.0,3.0,90.0,90.0,90.0)
      imageSpecifier = [3,2,1]
      sc=SC.SuperCell(uc,imageSpecifier)
      sc.print()
      ```



.. py:class:: ViewerTab(parent, debug=False)

   Bases: :py:obj:`PyQt5.QtWidgets.QWidget`


   A class representing a viewer tab in a graphical user interface, specifically for visualizing 
   molecular structures and vibrational modes.

   This class integrates several widgets to enable the selection and visualization of various 
   parameters relevant to molecular structures and their vibrational modes. It allows for 
   interactive change of settings like atom scaling, super cell configuration, and visualization 
   options such as showing arrows for vibrational modes or animation. It also includes functionalities
   to save the visualization in different formats.

   Parameters
   ----------
   parent : QWidget
       The parent widget to which this widget belongs.
   debug : bool, optional
       Flag to enable debugging messages, by default False.

   Attributes
   ----------
   debug : bool
       If debug mode is enabled.
   refreshRequired : bool
       Indicates if a refresh of the visualization is needed due to settings changes.
   UVW : deque
       A deque containing the vibrational mode vectors.
   settings : dict
       Stores various visualization settings such as selected mode, atom scaling, cell color, etc.
   light_switches : list of bool
       A list indicating the state (on or off) of up to 8 light switches for visualization.
   plot_types : list of str
       Available types of plots for visualization.
   plot_type_index : int
       The index of the currently selected plot type.
   number_of_molecules : int
       The number of molecules in the visualization.
   unit_cell, super_cell, cell_edges, cell_corners : Various
       Attributes related to the molecular/crystalline structure and its visualization.
   element_colours : dict
       A mapping of elements to their colors used in the visualization.
   element_names : list of str
       Names of the elements present in the visualization.
   species : list of str
       The species of the elements/molecules considered in the visualization.
   image_filename : str
       The filename where the visualization can be saved.
   notebook : QWidget
       The parent notebook widget containing this ViewerTab.
   reader : Reader
       The reader object used for reading structural information.
   frequencies_cm1 : list
       List of frequencies of the vibrational modes in cm^-1.

   Methods
   -------
   There are multiple methods for event handling (e.g., on_filename_le_return, on_super_cell_changed_a),
   methods for recalculating visualization parameters (e.g., calculate, calculatePhasePositions),
   and methods for changing visualization settings interactively and programatically (e.g., setColour, refresh).
   Each method typically adjusts the ViewerTab's state or visualization output accordingly based on user interaction or programmatic changes.

   calculate
       Obtains frequencies, normal modes, unit cell of whole molecules and supercell
   calculatePhasePositions
       Calculates the positions of atoms during a vibration
   on_arrow_radius_changed
       Handles the change in arrow radius widget
   on_atom_scaling_changed
       Handles the change in atom scaling widget
   on_bond_radius_changed
       Handles the change in bond radius widget
   on_cell_radius_changed
       Handle the change in unit cell radius widget
   on_coloured_button_clicked
       Handles a click on the coloured button
   on_coloured_element_clicked
       Changes the colour of an element
   on_filename_button_clicked
       Handles a click on the file name button
   on_filename_le_changed
       Handles a change to the file name
   on_filename_le_return
       Handles a return press in the file name widget
   on_light_switches_cb_activated
       Activates the light switch combobox
   on_maximum_displacement_changed
       Handles a change in the maximum displace allowed in following molecular vibrations
   on_plottype_cb_changed
       Handles a change in the plot type combobox
   on_selected_mode_changed
       Handles a change in the vibrational mode which is being displayed
   on_super_cell_changed_a
       Handles the change in the a supercell parameter
   on_super_cell_changed_b
       Handles the change in the b supercell parameter
   on_super_cell_changed_c
       Handles the change in the c supercell parameter
   plot
       Plot the 3D view of the molecule
   plot_animation
       Plot an animated 3D view of the vibration being studied
   plot_arrows
       Plot an 3D view of the vibration being studied using arrows
   plot_none
       Plots the molecule only, no vibrations
   refresh
       Refresh the GUI with the latest information
   requestRefresh
       Something has changed in the GUI that will need a refresh
   save_cif
       Write out a cif file
   setColour
       Set the colour of the specified element


   .. py:method:: calculate()

      Perform calculations related to the notebook object, including processing program, file name, calculating frequencies, super cells, normal modes, bonds, center of mass, bounding box, element names, species, covalent radii, and updating the UI with calculated values.

      Parameters
      ----------
      None 

      Returns
      -------
      None




   .. py:method:: calculatePhasePositions()

      Calculate and update the phase positions for the normal mode of a molecular structure visualization.

      This function calculates the phase positions for all atoms in a molecular structure over a range of phase steps. It updates the visualization by adding spheres and cylinders to represent atoms and bonds in different phase positions. The phase steps are adjusted to be odd in number, ensuring symmetry around zero phase. The function directly modifies the OpenGL widget used for visualization by deleting existing graphical representations and creating new ones based on the calculated positions.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: on_arrow_radius_changed(value)

      Handle the event where the arrow's radius value is changed.

      This method updates the setting for the arrow's radius, recalculates, and replots based on the new value.

      Parameters
      ----------
      value : float
          The new value for the arrow radius.

      Returns
      -------
      None



   .. py:method:: on_atom_scaling_changed(value)

      Handle changes to atom scaling settings.

      This method updates the atom scaling setting based on a new value,
      recalculates relevant data, and triggers a plot update.

      Parameters
      ----------
      value : float
          The new value for atom scaling.

      Returns
      -------
      None




   .. py:method:: on_bond_radius_changed(value)

      Handle bond radius change events.

      This method updates the 'Bond radius' setting with the new value, recalculates 
      the necessary data, and then replots the results.

      Parameters
      ----------
      value : float
          The new value for the bond radius.

      Returns
      -------
      None



   .. py:method:: on_cell_radius_changed(value)

      Handle the event when the cell radius setting is changed.

      This method updates the 'Cell radius' setting with the new value, recalculates 
      the necessary data, and then replots the results.

      Parameters
      ----------
      value : float
          The new value for the cell radius.

      Returns
      -------
      None



   .. py:method:: on_coloured_button_clicked(boolean)

      Handle the event when a coloured button is clicked.

      This function triggers a color dialog upon the click of a designated button. It captures the selected color and applies it to a specific setting based on the button's label (e.g., Background, Cell, Bonds, Arrows). The settings are modified to include the chosen color, and a refresh is triggered to apply the changes.

      Parameters
      ----------
      boolean : bool
          This parameter is not used in the function.

      Returns
      -------
      None



   .. py:method:: on_coloured_element_clicked(boolean)

      Handle a click event on an element with colour functionality.

      A colour dialogue is invoked and the chosen colour is assigned to the element in question
      The settings dictionary is updated with the new colours and a refresh requested

      Parameters
      ----------
      boolean : any
          This parameter is a dummy parameters

      Returns
      -------
      None



   .. py:method:: on_filename_button_clicked(boolean)

      Handles the action triggered by clicking the filename button.

      This method checks if the selected filename has a valid extension and exists. If any 
      checks fail, it alerts the user and aborts the operation. Otherwise, it proceeds to 
      save the current state or image of the OpenGL widget in the specified file format.

      Parameters
      ----------
      boolean : any
          This is a dummy parameter.

      Returns
      -------
      None

      Raises
      ------
      QMessageBox
          Shows an alert if the filename is empty or has an invalid extension, indicating that the file name for the image is not valid.

      Notes
      -----
      The valid file extensions are .mp4, .avi, .png, .gif, and .cif. The method modifies the `plot_type_index` 
      attribute of the caller object, saves the data or image into the specified file format, and ensures 
      the application's cursor is restored to its default state after the operation completes.



   .. py:method:: on_filename_le_changed(text)

      Handle changes to the filename line edit.

      This method is triggered when the text in the filename line edit changes. It updates the internal state to reflect the new filename.

      Parameters
      ----------
      text : str
          The new text from the filename line edit.

      Returns
      -------
      None



   .. py:method:: on_filename_le_return()

      Handles the event triggered by the return key press within the filename input field.

      This method is typically invoked when the return (or enter) key is pressed while inputting a filename. It primarily invokes the filename button click event handler, simulating a click operation on the associated button.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: on_light_switches_cb_activated(index)

      Activate or deactivate the light switch based on the current state and updates the GUI accordingly.

      Parameters
      ----------
      index : int
          Index of the light switch in `self.light_switches` list that needs to be toggled.

      Returns
      -------
      None




   .. py:method:: on_maximum_displacement_changed(value)

      Handle changes to the maximum displacement setting.

      This method updates the 'Maximum displacement' setting, recalculates based on the new value, and then replots the relevant data or figures.

      Parameters
      ----------
      value : float
          The new value for the maximum displacement setting.

      Returns
      -------
      None




   .. py:method:: on_plottype_cb_changed(index)

      Handle the change in plot type selection.

      This method updates the plot type index based on the user's selection and then
      re-plots the data according to the new plot type.
      Plot types can be: 'Animation', 'Arrows', or 'No arrows or animation'.

      Parameters
      ----------
      index : int
          The index of the newly selected plot type.

      Returns
      -------
      None




   .. py:method:: on_selected_mode_changed()

      Handle the changes when a new vibrational mode is selected in the UI.

      This function updates the application state based on the newly selected vibrational mode. It
      updates the displayed frequency, removes existing arrows from the OpenGL widget, 
      computes maximum displacement for scaling, and plots new arrows with updated settings. 
      It also invokes the calculate and plot functions to reflect changes in the UI.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: on_super_cell_changed_a(newa)

      Update the 'a' parameter of the 'Super Cell' setting and refresh the object state.

      This function takes a new value for 'a', updates the 'Super Cell' setting of the object
      accordingly (while keeping 'b' and 'c' parameters unchanged), marks the object as
      requiring refresh, and finally calls the refresh method.

      Parameters
      ----------
      newa : int
          The new value for the 'a' parameter to be set in the 'Super Cell' setting.

      Returns
      -------
      None



   .. py:method:: on_super_cell_changed_b(newb)

      Update the 'b' component of the 'Super Cell' setting and trigger a refresh.

      This function takes a new value for 'b', updates the 'Super Cell' setting of the object
      accordingly (while keeping 'a' and 'c' parameters unchanged), marks the object as
      requiring refresh, and finally calls the refresh method.

      Parameters
      ----------
      newb : int
          The new value for the 'b' component of the 'Super Cell'.

      Returns
      -------
      None



   .. py:method:: on_super_cell_changed_c(newc)

      Update the 'c' component of the 'Super Cell' setting and refresh the object.

      This function takes a new value for 'c', updates the 'Super Cell' setting of the object
      accordingly (while keeping 'a' and 'b' parameters unchanged), marks the object as
      requiring refresh, and finally calls the refresh method.

      Parameters
      ----------
      newc : int
          The new value to set for the 'c' component of the 'Super Cell' setting.

      Returns
      -------
      None



   .. py:method:: plot()

      Plot data based on the instance's current plot type.

      This method selects a plotting routine based on the value of `self.plot_type_index`.
      It does an early return if `self.reader` is None, indicating there might be no data
      to plot. It logs the method's progress using a debugger's print function.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: plot_animation()

      Initiates and displays an animation of a vibrational mode in an OpenGL widget.

      This method controls the display of a predefined animation within 
      an OpenGL widget. It hides any arrows, triggers a visual update, 
      and starts the animation process. Debug messages are logged at the 
      start and completion of the animation process.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: plot_arrows()

      Plot arrows showing the vibrational mode of a molecule

      This method enables the display of arrows on an associated OpenGL widget, halts any ongoing animations, and triggers a refresh of the widget to ensure the changes are visualized.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: plot_none()

      Hides arrow visuals, stops any ongoing animation, and updates the Open GL widget.

      This method is intended to reset or clear the current state of the Open GL widget by disabling any arrow visuals, stopping any animations that might be running, and then updating the widget to reflect these changes.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: refresh(force=False)

      Refresh the state of the object, optionally forcing the refresh.

      This method updates the object's state by recalculating and refreshing its components. It checks whether a refresh is necessary or if it has been forced. It iterates through child widgets to block signals, updates settings from a notebook, adjusts visual elements based on these settings, and ultimately recalculates and replots data.

      Parameters
      ----------
      force : bool, optional
          If True, the refresh proceeds regardless of whether it is deemed necessary based on the object state. Default is False.

      Returns
      -------
      None

      Notes
      -----
      - The function begins by checking if a refresh is required or has been forced. If neither condition is met, it aborts the refresh.
      - It temporarily changes the cursor to a waiting cursor to indicate processing.
      - It blocks signals from all child widgets to prevent any unintended interaction during the refresh process.
      - It updates various widget properties and settings based on attributes of the notebook associated with the object.
      - The function finally recalculates and re-plots based on the latest data and settings, then restores the standard cursor and marks the refresh as complete.
      - Debug statements are interspersed throughout for tracking the refresh process's progress.



   .. py:method:: requestRefresh()

      Initiates a refresh request.

      This method sets an internal flag to indicate that a refresh is required.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: save_cif(filename)

      Save the crystallographic information file (CIF) for different phases.

      A copy is made of the current unit cell and a cell is wrtten out for each phase of the vibration

      Parameters
      ----------
      filename : str
          The name of the file where the CIF data will be saved.

      Returns
      -------
      None

      Notes
      -----
      This method relies on the `self.unit_cell` object, which should have a method `set_xyz_coordinates` and `write_cif`. It also uses `self.settings` to retrieve the number of phase steps and the selected mode for CIF generation. The function iterates over a calculated range of phases, updates the unit cell coordinates for each phase, and writes the CIF data to the provided filename. The function assumes that `self.newXYZ` is an iterable object containing new XYZ coordinates for each phase. The CIF files are saved with a description that includes the mode and phase.



   .. py:method:: setColour(element, colour)

      Set the colour of a specified element in the interface.

      Parameters
      ----------
      element : str
          The element whose colour is to be set. Can be 'Background', 'Cell', 'Arrow', or any other custom element defined in `element_colours`.
      colour : str
          The new colour to be set for the element. This should be a string describing the colour.

      Returns
      -------
      None

      Examples
      --------
      ```python
      myObject.setColour('Background', '#FFFFFF')  # Sets the background colour to white
      myObject.setColour('Cell', 'red')            # Sets the cell colour to red
      myObject.setColour('customElement', 'blue')  # Sets a custom element's colour to blue
      ```



.. py:data:: angstrom

.. py:data:: elemental_colours

.. py:data:: wavenumber

