:py:mod:`PDielec.GUI.ViewerTab`
===============================

.. py:module:: PDielec.GUI.ViewerTab

.. autoapi-nested-parse::

   ViewerTab module.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   PDielec.GUI.ViewerTab.ViewerTab




.. py:class:: ViewerTab(parent, debug=False)


   Bases: :py:obj:`qtpy.QtWidgets.QWidget`

   A class representing a viewer tab in a graphical user interface, specifically for visualizing molecular structures and vibrational modes.

   This class integrates several widgets to enable the selection and visualization of various 
   parameters relevant to molecular structures and their vibrational modes. It allows for 
   interactive change of settings like atom scaling, super cell configuration, and visualization 
   options such as showing arrows for vibrational modes or animation. It also includes functionalities
   to save the visualization in different formats.

   Parameters
   ----------
   parent : QWidget
       The parent widget to which this widget belongs.
   debug : bool, optional
       Flag to enable debugging messages, by default False.

   Attributes
   ----------
   debug : bool
       If debug mode is enabled.
   refreshRequired : bool
       Indicates if a refresh of the visualization is needed due to settings changes.
   UVW : deque
       A deque containing the vibrational mode vectors.
   settings : dict
       Stores various visualization settings such as selected mode, atom scaling, cell color, etc.
   light_switches : list of bool
       A list indicating the state (on or off) of up to 8 light switches for visualization.
   plot_types : list of str
       Available types of plots for visualization.
   plot_type_index : int
       The index of the currently selected plot type.
   number_of_molecules : int
       The number of molecules in the visualization.
   unit_cell, super_cell, cell_edges, cell_corners : Various
       Attributes related to the molecular/crystalline structure and its visualization.
   element_colours : dict
       A mapping of elements to their colors used in the visualization.
   element_names : list of str
       Names of the elements present in the visualization.
   species : list of str
       The species of the elements/molecules considered in the visualization.
   image_filename : str
       The filename where the visualization can be saved.
   notebook : QWidget
       The parent notebook widget containing this ViewerTab.
   reader : Reader
       The reader object used for reading structural information.
   frequencies_cm1 : list
       List of frequencies of the vibrational modes in cm^-1.

   Methods
   -------
   There are multiple methods for event handling (e.g., on_filename_le_return, on_super_cell_changed_a),
   methods for recalculating visualization parameters (e.g., calculate, calculatePhasePositions),
   and methods for changing visualization settings interactively and programatically (e.g., setColour, refresh).
   Each method typically adjusts the ViewerTab's state or visualization output accordingly based on user interaction or programmatic changes.

   calculate
       Obtains frequencies, normal modes, unit cell of whole molecules and supercell
   calculatePhasePositions
       Calculates the positions of atoms during a vibration
   on_arrow_radius_changed
       Handles the change in arrow radius widget
   on_atom_scaling_changed
       Handles the change in atom scaling widget
   on_bond_radius_changed
       Handles the change in bond radius widget
   on_cell_radius_changed
       Handle the change in unit cell radius widget
   on_coloured_button_clicked
       Handles a click on the coloured button
   on_coloured_element_clicked
       Changes the colour of an element
   on_filename_button_clicked
       Handles a click on the file name button
   on_filename_le_changed
       Handles a change to the file name
   on_filename_le_return
       Handles a return press in the file name widget
   on_light_switches_cb_activated
       Activates the light switch combobox
   on_maximum_displacement_changed
       Handles a change in the maximum displace allowed in following molecular vibrations
   on_plottype_cb_changed
       Handles a change in the plot type combobox
   on_selected_mode_changed
       Handles a change in the vibrational mode which is being displayed
   on_super_cell_changed_a
       Handles the change in the a supercell parameter
   on_super_cell_changed_b
       Handles the change in the b supercell parameter
   on_super_cell_changed_c
       Handles the change in the c supercell parameter
   plot
       Plot the 3D view of the molecule
   plot_animation
       Plot an animated 3D view of the vibration being studied
   plot_arrows
       Plot an 3D view of the vibration being studied using arrows
   plot_none
       Plots the molecule only, no vibrations
   refresh
       Refresh the GUI with the latest information
   requestRefresh
       Something has changed in the GUI that will need a refresh
   save_as_cif
       Write out a cif file
   save_mode_as_cif
       Write out a cif file with the mode displacememnt information
   setColour
       Set the colour of the specified element


   .. py:method:: calculate()

      Perform calculations related to the notebook object, including processing program, file name, calculating frequencies, super cells, normal modes, bonds, center of mass, bounding box, element names, species, covalent radii, and updating the UI with calculated values.

      Parameters
      ----------
      None 

      Returns
      -------
      None



   .. py:method:: calculatePhasePositions()

      Calculate and update the phase positions for the normal mode of a molecular structure visualization.

      This function calculates the phase positions for all atoms in a molecular structure over a range of phase steps. It updates the visualization by adding spheres and cylinders to represent atoms and bonds in different phase positions. The phase steps are adjusted to be odd in number, ensuring symmetry around zero phase. The function directly modifies the OpenGL widget used for visualization by deleting existing graphical representations and creating new ones based on the calculated positions.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: on_arrow_radius_changed(value)

      Handle the event where the arrow's radius value is changed.

      This method updates the setting for the arrow's radius, recalculates, and replots based on the new value.

      Parameters
      ----------
      value : float
          The new value for the arrow radius.

      Returns
      -------
      None



   .. py:method:: on_atom_scaling_changed(value)

      Handle changes to atom scaling settings.

      This method updates the atom scaling setting based on a new value,
      recalculates relevant data, and triggers a plot update.

      Parameters
      ----------
      value : float
          The new value for atom scaling.

      Returns
      -------
      None



   .. py:method:: on_bond_radius_changed(value)

      Handle bond radius change events.

      This method updates the 'Bond radius' setting with the new value, recalculates 
      the necessary data, and then replots the results.

      Parameters
      ----------
      value : float
          The new value for the bond radius.

      Returns
      -------
      None



   .. py:method:: on_cell_radius_changed(value)

      Handle the event when the cell radius setting is changed.

      This method updates the 'Cell radius' setting with the new value, recalculates 
      the necessary data, and then replots the results.

      Parameters
      ----------
      value : float
          The new value for the cell radius.

      Returns
      -------
      None



   .. py:method:: on_coloured_button_clicked(boolean)

      Handle the event when a coloured button is clicked.

      This function triggers a color dialog upon the click of a designated button. It captures the selected color and applies it to a specific setting based on the button's label (e.g., Background, Cell, Bonds, Arrows). The settings are modified to include the chosen color, and a refresh is triggered to apply the changes.

      Parameters
      ----------
      boolean : bool
          This parameter is not used in the function.

      Returns
      -------
      None



   .. py:method:: on_coloured_element_clicked(boolean)

      Handle a click event on an element with colour functionality.

      A colour dialogue is invoked and the chosen colour is assigned to the element in question
      The settings dictionary is updated with the new colours and a refresh requested

      Parameters
      ----------
      boolean : any
          This parameter is a dummy parameters

      Returns
      -------
      None



   .. py:method:: on_filename_button_clicked(boolean)

      Handle the action triggered by clicking the filename button.

      This method checks if the selected filename has a valid extension and exists. If any 
      checks fail, it alerts the user and aborts the operation. Otherwise, it proceeds to 
      save the current state or image of the OpenGL widget in the specified file format.

      Parameters
      ----------
      boolean : any
          This is a dummy parameter.

      Returns
      -------
      None

      Raises
      ------
      QMessageBox
          Shows an alert if the filename is empty or has an invalid extension, indicating that the file name for the image is not valid.

      Notes
      -----
      The valid file extensions are .mp4, .avi, .png, .gif, and .cif. The method modifies the `plot_type_index` 
      attribute of the caller object, saves the data or image into the specified file format, and ensures 
      the application's cursor is restored to its default state after the operation completes.



   .. py:method:: on_filename_le_changed(text)

      Handle changes to the filename line edit.

      This method is triggered when the text in the filename line edit changes. It updates the internal state to reflect the new filename.

      Parameters
      ----------
      text : str
          The new text from the filename line edit.

      Returns
      -------
      None



   .. py:method:: on_filename_le_return()

      Handle the event triggered by the return key press within the filename input field.

      This method is typically invoked when the return (or enter) key is pressed while inputting a filename. It primarily invokes the filename button click event handler, simulating a click operation on the associated button.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: on_light_switches_cb_activated(index)

      Activate or deactivate the light switch based on the current state and updates the GUI accordingly.

      Parameters
      ----------
      index : int
          Index of the light switch in `self.light_switches` list that needs to be toggled.

      Returns
      -------
      None



   .. py:method:: on_maximum_displacement_changed(value)

      Handle changes to the maximum displacement setting.

      This method updates the 'Maximum displacement' setting, recalculates based on the new value, and then replots the relevant data or figures.

      Parameters
      ----------
      value : float
          The new value for the maximum displacement setting.

      Returns
      -------
      None



   .. py:method:: on_plottype_cb_changed(index)

      Handle the change in plot type selection.

      This method updates the plot type index based on the user's selection and then
      re-plots the data according to the new plot type.
      Plot types can be: 'Animation', 'Arrows', or 'No arrows or animation'.

      Parameters
      ----------
      index : int
          The index of the newly selected plot type.

      Returns
      -------
      None



   .. py:method:: on_selected_mode_changed()

      Handle the changes when a new vibrational mode is selected in the UI.

      This function updates the application state based on the newly selected vibrational mode. It
      updates the displayed frequency, removes existing arrows from the OpenGL widget, 
      computes maximum displacement for scaling, and plots new arrows with updated settings. 
      It also invokes the calculate and plot functions to reflect changes in the UI.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: on_super_cell_changed_a(newa)

      Update the 'a' parameter of the 'Super Cell' setting and refresh the object state.

      This function takes a new value for 'a', updates the 'Super Cell' setting of the object
      accordingly (while keeping 'b' and 'c' parameters unchanged), marks the object as
      requiring refresh, and finally calls the refresh method.

      Parameters
      ----------
      newa : int
          The new value for the 'a' parameter to be set in the 'Super Cell' setting.

      Returns
      -------
      None



   .. py:method:: on_super_cell_changed_b(newb)

      Update the 'b' component of the 'Super Cell' setting and trigger a refresh.

      This function takes a new value for 'b', updates the 'Super Cell' setting of the object
      accordingly (while keeping 'a' and 'c' parameters unchanged), marks the object as
      requiring refresh, and finally calls the refresh method.

      Parameters
      ----------
      newb : int
          The new value for the 'b' component of the 'Super Cell'.

      Returns
      -------
      None



   .. py:method:: on_super_cell_changed_c(newc)

      Update the 'c' component of the 'Super Cell' setting and refresh the object.

      This function takes a new value for 'c', updates the 'Super Cell' setting of the object
      accordingly (while keeping 'a' and 'b' parameters unchanged), marks the object as
      requiring refresh, and finally calls the refresh method.

      Parameters
      ----------
      newc : int
          The new value to set for the 'c' component of the 'Super Cell' setting.

      Returns
      -------
      None



   .. py:method:: plot()

      Plot data based on the instance's current plot type.

      This method selects a plotting routine based on the value of `self.plot_type_index`.
      It does an early return if `self.reader` is None, indicating there might be no data
      to plot. It logs the method's progress using a debugger's print function.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: plot_animation()

      Initiate and display an animation of a vibrational mode in an OpenGL widget.

      This method controls the display of a predefined animation within 
      an OpenGL widget. It hides any arrows, triggers a visual update, 
      and starts the animation process. Debug messages are logged at the 
      start and completion of the animation process.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: plot_arrows()

      Plot arrows showing the vibrational mode of a molecule.

      This method enables the display of arrows on an associated OpenGL widget, halts any ongoing animations, and triggers a refresh of the widget to ensure the changes are visualized.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: plot_none()

      Hides arrow visuals, stops any ongoing animation, and updates the Open GL widget.

      This method is intended to reset or clear the current state of the Open GL widget by disabling any arrow visuals, stopping any animations that might be running, and then updating the widget to reflect these changes.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: refresh(force=False)

      Refresh the state of the object, optionally forcing the refresh.

      This method updates the object's state by recalculating and refreshing its components. It checks whether a refresh is necessary or if it has been forced. It iterates through child widgets to block signals, updates settings from a notebook, adjusts visual elements based on these settings, and ultimately recalculates and replots data.

      Parameters
      ----------
      force : bool, optional
          If True, the refresh proceeds regardless of whether it is deemed necessary based on the object state. Default is False.

      Returns
      -------
      None

      Notes
      -----
      - The function begins by checking if a refresh is required or has been forced. If neither condition is met, it aborts the refresh.
      - It temporarily changes the cursor to a waiting cursor to indicate processing.
      - It blocks signals from all child widgets to prevent any unintended interaction during the refresh process.
      - It updates various widget properties and settings based on attributes of the notebook associated with the object.
      - The function finally recalculates and re-plots based on the latest data and settings, then restores the standard cursor and marks the refresh as complete.
      - Debug statements are interspersed throughout for tracking the refresh process's progress.



   .. py:method:: requestRefresh()

      Initiate a refresh request.

      This method sets an internal flag to indicate that a refresh is required.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: save_as_cif(filename)

      Save the crystallographic information file (CIF) for the structure phases.

      The cell is wrtten out

      Parameters
      ----------
      filename : str
          The name of the file where the CIF data will be saved.

      Returns
      -------
      None



   .. py:method:: save_mode_as_cif(filename)

      Save the crystallographic information file (CIF) for different phases.

      A copy is made of the current unit cell and a cell is wrtten out for each phase of the vibration

      Parameters
      ----------
      filename : str
          The name of the file where the CIF data will be saved.

      Returns
      -------
      None

      Notes
      -----
      This method relies on the `self.unit_cell` object, which should have a method `set_xyz_coordinates` and `write_cif`. It also uses `self.settings` to retrieve the number of phase steps and the selected mode for CIF generation. The function iterates over a calculated range of phases, updates the unit cell coordinates for each phase, and writes the CIF data to the provided filename. The function assumes that `self.newXYZ` is an iterable object containing new XYZ coordinates for each phase. The CIF files are saved with a description that includes the mode and phase.



   .. py:method:: setColour(element, colour)

      Set the colour of a specified element in the interface.

      Parameters
      ----------
      element : str
          The element whose colour is to be set. Can be 'Background', 'Cell', 'Arrow', or any other custom element defined in `element_colours`.
      colour : str
          The new colour to be set for the element. This should be a string describing the colour.

      Returns
      -------
      None

      Examples
      --------
      ```python
      myObject.setColour('Background', '#FFFFFF')  # Sets the background colour to white
      myObject.setColour('Cell', 'red')            # Sets the cell colour to red
      myObject.setColour('customElement', 'blue')  # Sets a custom element's colour to blue
      ```




