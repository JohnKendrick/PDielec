PDielec.GUI.MainTab
===================

.. py:module:: PDielec.GUI.MainTab

.. autoapi-nested-parse::

   MainTab module



Classes
-------

.. autoapisummary::

   PDielec.GUI.MainTab.Debug
   PDielec.GUI.MainTab.MainTab
   PDielec.GUI.MainTab.SpreadSheetManager


Functions
---------

.. autoapisummary::

   PDielec.GUI.MainTab.find_program_from_name
   PDielec.GUI.MainTab.pdgui_get_reader


Module Contents
---------------

.. py:class:: Debug(debug, text, level=0)

   A class aimed at providing a structured way to include debug messages in code.

   Methods
   -------
   print(args, level=0)
       Prints debug messages based on the debug level provided as argument compared to the object's debug level.
   state()
       Returns the current state (enabled or disabled) of debugging.

   Notes
   -----
   The `print` method provides a flexible way to include additional information along with the base debug message, allowing for a detailed and adjustable debugging output.


   .. py:method:: print(*args, level=0)

      Prints message if debugging level allows.

      Parameters
      ----------
      args
          Variable length argument list for the message to be printed.
      level : int, optional
          The level of the message that determines if it gets printed or not,
          based on the instance's `level`. Default value is 0.

      Notes
      -----
      This method will only print the message if the instance's `debug` flag is True
      and the provided `level` is less than or equal to the instance's `level`.



   .. py:method:: state()

      Get the debug state.

      Parameters
      ----------
      None

      Returns
      -------
      The current debug state.



.. py:class:: MainTab(parent, program, filename, excelfile, debug=False)

   Bases: :py:obj:`PyQt5.QtWidgets.QWidget`


   MainTab is a comprehensive widget class designed to serve as a main interface tab within a Qt application. It is tailored for analyzing quantum chemistry or molecular dynamics simulation output files, offering functionalities such as file processing, data analysis, and settings management for quantum mechanics / molecular mechanics (QM/MM) programs.

   Parameters
   ----------
   parent : QWidget
       The parent widget in which MainTab is contained.
   program : str
       The name of the quantum mechanics or molecular mechanics program related to the data being analyzed or processed.
   filename : str
       The path to the output file generated by the specified `program`. This file contains the results to be analyzed.
   excelfile : str
       The name of an Excel file where results are stored. If specified, results will be written to this file upon program exit.
   debug : bool, optional
       Determines whether debugging messages should be printed to the console. Debugging is off by default (False).

   Attributes
   ----------
   debug : bool
       Indicates whether debugging is enabled.
   settings : dict
       A dictionary containing various program settings, such as program name, file names, and compatibility mode.
   directory : str
       The directory path of the `filename`.
   notebook : QWidget
       The parent widget, typically representing the notebook interface this tab is part of.
   reader : various, depending on the program
       The file reader object tasked with parsing the output file specified by `filename`.
   frequencies_cm1 : numpy.ndarray or None
       An array containing frequency values extracted from the output file, if applicable.
   refreshRequired : bool
       Indicates whether the widget requires refreshing due to changes in its data or settings.
   calculationRequired : bool
       Indicates whether a re-calculation or re-analysis is necessary due to changes in data or settings.

   Methods
   -------
   on_script_button_clicked()
       Handles actions to be taken when the 'Save settings' button is clicked.
   on_excel_button_clicked()
       Handles actions to be taken when the 'Save results' button is clicked, typically involving writing data to an Excel file.
   on_calculation_button_clicked()
       Initiates the processing of the output file and the refreshing of related UI components and data representations.
   writeSpreadsheet()
       Writes the current settings and analysis results to an Excel file specified by `excelfile`.
   read_output_file()
       Reads and processes the output file specified at initialization, updating UI and data structures based on its content.
   on_scriptsfile_le_changed(text)
       Updates program settings based on changes to the script file name input field.
   on_resultsfile_le_changed(text)
       Updates program settings based on changes to the Excel file name input field.
   on_file_button_clicked()
       Opens a file dialog for the user to select a new output or script file, and updates settings based on the selection.
   on_file_le_return()
       Triggers actions similar to `on_file_button_clicked` but is specifically for handling manual text entry in the file path input field.
   on_file_le_changed(text)
       Updates the output file setting based on changes to the file input field.
   on_program_cb_activated(index)
       Updates program settings based on the selection made in the QM/MM program combo box.
   requestRefresh()
       Requests a refresh of the interface and data representation.
   refresh(force=False)
       Refreshes the UI and data based on current settings and file contents, with an optional force parameter to enforce refreshing even if it's not marked as required.


   .. py:method:: getFullFileName()

      Return the full file name based on the directory and output file name settings.

      Parameters
      ----------
      None

      Returns
      -------
      str
          The full path of the file, combining the directory and the output file name setting.



   .. py:method:: getRelativeFileName()

      Get the relative filename specified in settings.

      Parameters
      ----------
      None

      Returns
      -------
      str
          The file name specified in the settings as 'Output file name'.



   .. py:method:: on_calculation_button_clicked()

      Handle the event triggered by the calculation button click.

      It proceeds to read an output file which is the result of a previous calculation. It checks if the settings tab exists within a notebook interface (e.g., a tabbed GUI component) and refreshes it if it does. Finally, it sets a flag indicating that a new calculation is not required anymore.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: on_excel_button_clicked()

      Handles the event triggered when Excel button is clicked.

      This function initiates the process of writing data to the Excel spreadsheet when the designated button is clicked in the UI. It prints log messages at the start and end of the operation.

      Parameters
      ----------
      None

      Returns
      -------
      None

      See Also
      --------
      notebook.writeSpreadsheet : The method called to write data to the spreadsheet.



   .. py:method:: on_file_button_clicked()

      Handle the "Open file" button click event in the GUI.

      This method is triggered upon clicking the "Open File" button in a graphical user interface. It facilitates the selection of an output file generated by various software tools (`castep`, `abinit`, `gulp`, `vasp`, `qe`, `crystal`, `phonopy`, `experiment`, `pdgui`, or any file type). Based on the selected file, it finds the corresponding program that generated the file, updates various settings in the application according to the detected program, sets the working directory to the location of the selected file, updates the GUI with the new output file name, and refreshes relevant parts of the application depending on whether the program is `pdgui` or another supported type.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: on_file_le_changed(text)

      Handles changes to the file location input field.

      The new output file name is stored and a flag set to require re-calculations

      Parameters
      ----------
      text : str
          The new text of the file location input field.

      Returns
      -------
      None




   .. py:method:: on_file_le_return()

      Handle the return action for a file entry line edit.

      It performs a series of steps to process the specified file, including finding a program associated with the file, updating various settings related to the chosen file and potentially the program determined, and initiating different actions or calculations based on the program type.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      - The method performs an early return if the filename entered is an empty string.
      - It searches for a program associated with the entered filename and returns if none is found.
      - Updates the 'Program' and 'Output file name' settings based on the entered filename.
      - Changes the GUI window title to the directory of the entered filename.
      - Deletes all scenarios (if applicable) before proceeding with further settings updates or actions.
      - Depending on the program associated with the filename, it might read the script or mark the interface for refresh and calculation.
      - The actual actions, especially involving UI updates (e.g., setting window title, deleting scenarios, reading script) or marking for refresh and calculation, are dependent on the context and design of the surrounding application and GUI structure.
      - Specific behaviors, such as how 'pdgui' program type is specially handled or the resetting of certain settings, is contingent on the broader application logic and requirements.



   .. py:method:: on_program_cb_activated(index)

      Handle program selection change in a combobox and update settings accordingly.

      This method updates the program settings based on the user's selection from a combobox.
      It specifically handles cases where the selected program is one of several predefined
      options (`Phonopy - VASP`, `Phonopy - QE`, `Phonopy - Crystal`, `Quantum Espresso`),
      adjusting both the general program setting and the more specific QM program setting
      as necessary.

      Parameters
      ----------
      index : int
          The index of the selected item in the combobox.

      Returns
      -------
      None

      Side Effects
      ------------
      - Updates the `settings` dictionary with the selected program and, if applicable,
        the corresponding QM program.
      - Sets `calculationRequired` attribute to `True`.




   .. py:method:: on_resultsfile_le_changed(text)

      Handle changes to the results file text input field.

      Parameters
      ----------
      text : str
          The new text from the results file text input field.

      Returns
      -------
      None



   .. py:method:: on_script_button_clicked()

      Handle the script button click event.

      This function is executed when the script button is clicked. It checks if the specified script file exists in the specified directory. If it does, it prompts the user to either overwrite the existing file or cancel the action. If the file does not exist, it creates a new script file. It uses a debugger to log actions taken during the process.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: on_scriptsfile_le_changed(text)

      Respond to changes in the scripts file input field.

      Parameters
      ----------
      text : str

      Returns
      -------
      None

          The new text of the scripts file input field. This parameter may not be used inside the function as the function retrieves the text from the QLineEdit widget directly.



   .. py:method:: read_output_file()

      Reads the output file specified in the settings, processes it, and updates the UI elements accordingly.

      Processes the output file indicated by the settings of the object. It performs several checks to ensure
      the file exists, is accessible, and contains valid data that can be read and processed. It extracts
      unit-cell parameters and vibrational frequencies from the output file, displaying them in the relevant
      interface elements. It also triggers refresh actions on various tabs present in the notebook attribute if available.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: refresh(force=False)

      Refresh the current interface or force it to refresh, applying settings changes.

      Parameters
      ----------
      force : bool, optional
          If `True`, force the refresh even if it is not required based on internal conditions. 
          Defaults to `False`.

      Returns
      -------
      None

      Effects
      -------
      - Blocks signal for all child widgets during refresh.
      - Adjusts program names based on settings, handling special case names.
      - Sets the program combo box and filenames according to the updated settings.
      - Triggers a recalculation if required after settings update.
      - Unblocks signals for all child widgets after refresh.



   .. py:method:: requestRefresh()

      Request to refresh.

      Marks the current instance as requiring a refresh.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: writeSpreadsheet()

      Writes data to the configured spreadsheet.

      This method encompasses the process of selecting the 'Main' worksheet,
      deleting the existing content on it, and writing down new settings and frequency
      data onto it. It checks if
      the spreadsheet object is valid, selects the appropriate worksheet, clears it,
      and writes the settings and frequencies (if available) in a structured manner.

      Parameters
      ----------
      None

      Returns
      -------
      None




.. py:class:: SpreadSheetManager(filename)

   A manager for handling operations on an Excel workbook via xlsxwriter.

   This class provides methods for managing a workbook with various tabs
   (named worksheets), writing data to these worksheets, and handling complex
   data types specifically tailored for scientific or engineering applications.

   Parameters
   ----------
   filename : str
       The name of the file to which the workbook will be saved.

   Attributes
   ----------
   workbook : Workbook
       The workbook object from xlsxwriter this manager operates on.
   closed : bool
       Boolean flag indicating whether the workbook has been closed.
   tab_names : list of str
       A list containing the names of the tabs (worksheets) to be managed.
   worksheets : dict
       A dictionary mapping tab names to worksheet objects.
   positions : dict
       A dictionary mapping tab names to their current write position (row, column).
   max_col : dict
       A dictionary mapping tab names to the maximum column index used.
   max_row : dict
       A dictionary mapping tab names to the maximum row index used.
   opened : dict
       A dictionary indicating whether a tab (worksheet) has been opened for writing.
   name : str
       The name of the currently selected work tab.

   Methods
   -------
   openWorkSheet(tab)
       Opens a new worksheet for the given tab if not already opened.
   selectWorkSheet(name)
       Selects the specified worksheet for further operations.
   writeNextRow(items, row=None, col=None, check='')
       Writes a series of items to the next row of the currently selected worksheet.
   write(row, col, item)
       Writes an item to the specified location in the currently selected worksheet.
   delete()
       Deletes all content from the currently selected worksheet.
   close()
       Closes the workbook, finalizing it for output.


   .. py:method:: close()

      Close the workbook if it hasn't been closed already.

      Closes the workbook associated with an instance and sets its status as closed to prevent multiple close operations.

      Parameters
      ----------
      None

      Returns
      -------
      None



   .. py:method:: delete()

      Delete all the data in the current worksheet.

      Clears all entries in the worksheet represented by `self` by setting each cell's value to an empty string.
      After clearing the data, it resets the current position, maximum column, and maximum row counters for the worksheet.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: openWorkSheet(tab)

      Open a new worksheet in a workbook.

      Parameters
      ----------
      tab : str
          The name of the worksheet to be opened.

      Returns
      -------
      None

      Notes
      -----
      If the worksheet identified by `tab` is already opened, this method does nothing. 
      Otherwise, it creates a new worksheet with the name `tab`, initializes its position, 
      maximum column, maximum row, and marks it as opened within the workbook data structures 
      handled by the instance. 



   .. py:method:: selectWorkSheet(name)

      Selects or opens a worksheet by name.

      Parameters
      ----------
      name : str
          The name of the worksheet to select or open.

      Returns
      -------
      None

      Notes
      -----
      This method selects a worksheet if it is already opened. If the worksheet is not
      currently open, it attempts to open the worksheet by calling `openWorkSheet` with
      the worksheet name.



   .. py:method:: write(row, col, item)

      Writes an item to a specific position in the active worksheet, handling complex numbers.

      Parameters
      ----------
      row : int
          The row index where the item will be written.
      col : int
          The column index where the item will be written.
      item : int, float, complex, str
          The item to be written to the worksheet. If the item is a complex number,
          its real and imaginary parts are written to adjacent columns.

      Returns
      -------
      None

      Notes
      -----
      - This method updates the worksheet's max column and row based on the provided indices.
      - When writing a complex number, `col` is incremented before writing the imaginary part,
        and the updated column is used for adjusting the max column.
      - Updates the `positions` attribute with the next available position in the worksheet.




   .. py:method:: writeNextRow(items, row=None, col=None, check='')

      Writes a sequence of items as a row in a spread sheet, starting from a specified row and column into a grid structure.

      Parameters
      ----------
      items : list
          A list of items to be written. Items can be strings, numbers, or nested lists where each sub-item is written in subsequent columns.
      row : int, optional
          The row index to start writing from. If not specified, uses the current row position of the object.
      col : int, optional
          The column index to start writing from. If not specified, uses the current column position of the object.
      check : str, optional
          A check string written to the beginning of the row specified. Defaults to an empty string if not specified.

      Returns
      -------
      None

      Notes
      -----
      - If `col` is 0, a warning message is printed.
      - The `row` and `col` are updated as items are written, and `row` is incremented after writing all items.
      - For items that are lists, each element is written in subsequent columns. This is applied recursively for nested lists.
      - `self.positions` is a dictionary holding the current positions (row, column) for different names, and `self.name` accesses the current object's name.



.. py:function:: find_program_from_name(filename)

   Determine the simulation program from a given filename.

   Parameters
   ----------
   filename : str
       The complete path (absolute or relative) to a file.

   Returns
   -------
   str
       A string representing the simulation program the file is associated with. Possible returns are 'phonopy', 'vasp', 'gulp', 'castep', 'abinit', 'qe', 'crystal', 'experiment', 'pdgui', or an empty string if the program cannot be determined.

   Notes
   -----
   This function examines the file extension and, in some cases, the presence of specific files in the same directory, to determine the associated simulation program. It recognizes files from several popular materials simulation programs, such as 'phonopy', 'gulp', 'vasp', and others.

   Examples
   --------

   ::

       program = find_program_from_name('./data/structure.castep')
       print(program)
       # Output: 'castep'

       program = find_program_from_name('path/to/simulation/OUTCAR')
       print(program)
       # Depends on the presence of 'phonopy.yaml', could be 'phonopy' or 'vasp'



.. py:function:: pdgui_get_reader(program, names, qmprogram)

   Get the appropriate reader based on the provided program and file names.

   This function determines the correct output reader to use based on the program specified and the presence of certain files
   in the provided directory or file names list. It supports various quantum mechanics and molecular dynamics
   programs as well as experiment data.

   Parameters
   ----------
   program : str
       The name of the program or an empty string to attempt automatic detection. Supported programs include 'vasp',
       'castep', 'gulp', 'crystal', 'abinit', 'qe', 'phonopy', and 'experiment'.
   names : list of str
       A list containing either directory names or file names to be read or analysed.
   qmprogram : str
       Specifies the quantum mechanics program used in conjunction with 'phonopy'. It is only relevant if 'program'
       is set to 'phonopy'. Supported programs include 'castep', 'vasp', 'gulp', 'crystal', 'abinit', and 'qe'.

   Returns
   -------
   object
       Returns an instance of the correct output reader based on the specified program and available files. If the
       necessary files are not found or if the program is not recognized, it returns None.

   Notes
   -----
   - The readers returned are capable of parsing output files from their respective programs and extracting relevant data.
   - For 'phonopy', additional handling is included to combine phonopy output with quantum mechanics results from another
     specified program.
   - This function also handles directory or file existence checks and will print errors if required files are missing.

   Examples
   --------
   To get a VASP output reader for a directory containing VASP output files:

   >>> reader = pdgui_get_reader('', ['path/to/vasp/output'], '')
   >>> print(reader)

   For phonopy with VASP as the quantum mechanics program:

   >>> qm_reader = pdgui_get_reader('phonopy', ['path/to/phonopy/files'], 'vasp')
   >>> print(qm_reader)


