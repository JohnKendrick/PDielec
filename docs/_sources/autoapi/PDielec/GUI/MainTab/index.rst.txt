PDielec.GUI.MainTab
===================

.. py:module:: PDielec.GUI.MainTab

.. autoapi-nested-parse::

   MainTab module.



Classes
-------

.. autoapisummary::

   PDielec.GUI.MainTab.MainTab


Module Contents
---------------

.. py:class:: MainTab(parent, program, filename, excelfile, debug=False)

   Bases: :py:obj:`qtpy.QtWidgets.QWidget`


   MainTab is a comprehensive widget class designed to serve as a main interface tab within a Qt application. It is tailored for analyzing quantum chemistry or molecular dynamics simulation output files, offering functionalities such as file processing, data analysis, and settings management for quantum mechanics / molecular mechanics (QM/MM) programs.

   Parameters
   ----------
   parent : QWidget
       The parent widget in which MainTab is contained.
   program : str
       The name of the quantum mechanics or molecular mechanics program related to the data being analyzed or processed.
   filename : str
       The path to the output file generated by the specified `program`. This file contains the results to be analyzed.
   excelfile : str
       The name of an Excel file where results are stored. If specified, results will be written to this file upon program exit.
   debug : bool, optional
       Determines whether debugging messages should be printed to the console. Debugging is off by default (False).

   Attributes
   ----------
   debug : bool
       Indicates whether debugging is enabled.
   settings : dict
       A dictionary containing various program settings, such as program name, file names, and compatibility mode.
   directory : str
       The directory path of the `filename`.
   notebook : QWidget
       The parent widget, typically representing the notebook interface this tab is part of.
   reader : various, depending on the program
       The file reader object tasked with parsing the output file specified by `filename`.
   frequencies_cm1 : numpy.ndarray or None
       An array containing frequency values extracted from the output file, if applicable.
   refreshRequired : bool
       Indicates whether the widget requires refreshing due to changes in its data or settings.
   calculationRequired : bool
       Indicates whether a re-calculation or re-analysis is necessary due to changes in data or settings.

   Methods
   -------
   on_script_button_clicked()
       Handles actions to be taken when the 'Save settings' button is clicked.
   on_excel_button_clicked()
       Handles actions to be taken when the 'Save results' button is clicked, typically involving writing data to an Excel file.
   on_calculation_button_clicked()
       Initiates the processing of the output file and the refreshing of related UI components and data representations.
   writeSpreadsheet()
       Writes the current settings and analysis results to an Excel file specified by `excelfile`.
   read_output_file()
       Reads and processes the output file specified at initialization, updating UI and data structures based on its content.
   on_scriptsfile_le_changed(text)
       Updates program settings based on changes to the script file name input field.
   on_resultsfile_le_changed(text)
       Updates program settings based on changes to the Excel file name input field.
   on_file_button_clicked()
       Opens a file dialog for the user to select a new output or script file, and updates settings based on the selection.
   on_file_le_return()
       Triggers actions similar to `on_file_button_clicked` but is specifically for handling manual text entry in the file path input field.
   on_file_le_changed(text)
       Updates the output file setting based on changes to the file input field.
   on_program_cb_activated(index)
       Updates program settings based on the selection made in the QM/MM program combo box.
   requestRefresh()
       Requests a refresh of the interface and data representation.
   refresh(force=False)
       Refreshes the UI and data based on current settings and file contents, with an optional force parameter to enforce refreshing even if it's not marked as required.



   .. py:method:: getFullFileName()

      Return the full file name based on the directory and output file name settings.

      Parameters
      ----------
      None

      Returns
      -------
      str
          The full path of the file, combining the directory and the output file name setting.




   .. py:method:: getRelativeFileName()

      Get the relative filename specified in settings.

      Parameters
      ----------
      None

      Returns
      -------
      str
          The file name specified in the settings as 'Output file name'.




   .. py:method:: on_calculation_button_clicked()

      Handle the event triggered by the calculation button click.

      It proceeds to read an output file which is the result of a previous calculation. It checks if the settings tab exists within a notebook interface (e.g., a tabbed GUI component) and refreshes it if it does. Finally, it sets a flag indicating that a new calculation is not required anymore.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: on_excel_button_clicked()

      Handle the event triggered when Excel button is clicked.

      This function initiates the process of writing data to the Excel spreadsheet when the designated button is clicked in the UI. It prints log messages at the start and end of the operation.

      Parameters
      ----------
      None

      Returns
      -------
      None

      See Also
      --------
      notebook.writeSpreadsheet : The method called to write data to the spreadsheet.




   .. py:method:: on_file_button_clicked()

      Handle the "Open file" button click event in the GUI.

      This method is triggered upon clicking the "Open File" button in a graphical user interface. It facilitates the selection of an output file generated by various software tools (`Castep`, `Abinit`, `Gulp`, `Vasp`, `Quantum Espresso`, `Crystal`, `Phonopy`, `Experiment`, `Pdgui`, or any file type). Based on the selected file, it finds the corresponding program that generated the file, updates various settings in the application according to the detected program, sets the working directory to the location of the selected file, updates the GUI with the new output file name, and refreshes relevant parts of the application depending on whether the program is `pdgui` or another supported type.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: on_file_le_changed(text)

      Handle changes to the file location input field.

      The new output file name is stored and a flag set to require re-calculations

      Parameters
      ----------
      text : str
          The new text of the file location input field.

      Returns
      -------
      None




   .. py:method:: on_file_le_return()

      Handle the return action for a file entry line edit.

      It performs a series of steps to process the specified file, including finding a program associated with the file, updating various settings related to the chosen file and potentially the program determined, and initiating different actions or calculations based on the program type.

      Parameters
      ----------
      None

      Returns
      -------
      None

      Notes
      -----
      - The method performs an early return if the filename entered is an empty string.
      - It searches for a program associated with the entered filename and returns if none is found.
      - Updates the 'Program' and 'Output file name' settings based on the entered filename.
      - Changes the GUI window title to the directory of the entered filename.
      - Deletes all scenarios (if applicable) before proceeding with further settings updates or actions.
      - Depending on the program associated with the filename, it might read the script or mark the interface for refresh and calculation.
      - The actual actions, especially involving UI updates (e.g., setting window title, deleting scenarios, reading script) or marking for refresh and calculation, are dependent on the context and design of the surrounding application and GUI structure.
      - Specific behaviors, such as how 'pdgui' program type is specially handled or the resetting of certain settings, is contingent on the broader application logic and requirements.




   .. py:method:: on_program_cb_activated(index)

      Handle program selection change in a combobox and update settings accordingly.

      This method updates the program settings based on the user's selection from a combobox.
      It specifically handles cases where the selected program is Phonopy

      Parameters
      ----------
      index : int
          The index of the selected item in the combobox.

      Returns
      -------
      None

      Side Effects
      ------------
      - Updates the `settings` dictionary with the selected program and, if applicable,
        the corresponding QM program.
      - Sets `calculationRequired` attribute to `True`.




   .. py:method:: on_resultsfile_le_changed(text)

      Handle changes to the results file text input field.

      Parameters
      ----------
      text : str
          The new text from the results file text input field.

      Returns
      -------
      None




   .. py:method:: on_script_button_clicked()

      Handle the script button click event.

      This function is executed when the script button is clicked. It checks if the specified script file exists in the specified directory. If it does, it prompts the user to either overwrite the existing file or cancel the action. If the file does not exist, it creates a new script file. It uses a debugger to log actions taken during the process.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: on_scriptsfile_le_changed(text)

      Respond to changes in the scripts file input field.

      Parameters
      ----------
      text : str
          The text of line editor for the scripts file

      Returns
      -------
      None

          The new text of the scripts file input field. This parameter may not be used inside the function as the function retrieves the text from the QLineEdit widget directly.




   .. py:method:: read_output_file()

      Read the output file specified in the settings, process it, and updates the UI elements accordingly.

      Processes the output file indicated by the settings of the object. It performs several checks to ensure
      the file exists, is accessible, and contains valid data that can be read and processed. It extracts
      unit-cell parameters and vibrational frequencies from the output file, displaying them in the relevant
      interface elements. It also triggers refresh actions on various tabs present in the notebook attribute if available.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: refresh(force=False)

      Refresh the current interface or force it to refresh, applying settings changes.

      Parameters
      ----------
      force : bool, optional
          If `True`, force the refresh even if it is not required based on internal conditions. 
          Defaults to `False`.

      Returns
      -------
      None

      Effects
      -------
      - Blocks signal for all child widgets during refresh.
      - Adjusts program names based on settings, handling special case names.
      - Sets the program combo box and filenames according to the updated settings.
      - Triggers a recalculation if required after settings update.
      - Unblocks signals for all child widgets after refresh.




   .. py:method:: requestRefresh()

      Request to refresh.

      Marks the current instance as requiring a refresh.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:method:: writeSpreadsheet()

      Write data to the configured spreadsheet.

      This method encompasses the process of selecting the 'Main' worksheet,
      deleting the existing content on it, and writing down new settings and frequency
      data onto it. It checks if
      the spreadsheet object is valid, selects the appropriate worksheet, clears it,
      and writes the settings and frequencies (if available) in a structured manner.

      Parameters
      ----------
      None

      Returns
      -------
      None




   .. py:attribute:: calculationRequired
      :value: True



   .. py:attribute:: cell_window_l


   .. py:attribute:: cell_window_w


   .. py:attribute:: debug
      :value: False



   .. py:attribute:: directory


   .. py:attribute:: file_le


   .. py:attribute:: frequencies_cm1
      :value: None



   .. py:attribute:: frequencies_window


   .. py:attribute:: frequencies_window_l


   .. py:attribute:: notebook


   .. py:attribute:: program_cb


   .. py:attribute:: reader
      :value: None



   .. py:attribute:: refreshRequired
      :value: True



   .. py:attribute:: resultsfile_le


   .. py:attribute:: scriptsfile_le


   .. py:attribute:: settings


