PDielec.pdmake
==============

.. py:module:: PDielec.pdmake

.. autoapi-nested-parse::

   A Makefile style system for testing and installing PDGui and PDielec

   This script accepts various command-line arguments to perform different actions such as running tests, benchmarks, cleaning build directories, and installing scripts.

   Command line options
   --------------------
       - `test` or `tests`: Runs all test cases.
       - `test-singlecrystal`: Runs tests for single crystal analysis.
       - `test-preader`: Runs tests for the preader component.
       - `test-p2cif`: Runs tests for the p2cif component.
       - `test-pdgui`: Runs tests for the PDGUI component.
       - `test-vibanalysis`: Runs tests for vibrational analysis.
       - `benchmarks`: Executes benchmark tests.
       - `pypi`: Runs commands for PyPI distribution.
       - `clean`: Cleans up directories.
       - `install`: Installs necessary scripts.
       - `scripts` or `-scripts`: Specifies the directory for scripts (expects a directory path next).
       - `-root` or `--root`: Specifies the root directory to operate in.
       - `-debug` or `--debug` or `-d`: Enables debug mode.
       - `-usesystem`: Use system installed binaries rather than local ones.
       - `-view` or `--view` or `-v`: Enables viewing mode.
       - `-regenerate`: Forces regeneration of test data.
       - `-padding`: Sets padding for some operation (expects an integer value next).
       - `-directory` or `--directory`: Sets the directory for some operation (expects a directory path next).
       - `<filename>.pdmake`: Specifies a PDMakefile to execute.



Attributes
----------

.. autoapisummary::

   PDielec.pdmake.benchmarks
   PDielec.pdmake.debug
   PDielec.pdmake.print
   PDielec.pdmake.settings
   PDielec.pdmake.test_p2cif
   PDielec.pdmake.test_pdgui
   PDielec.pdmake.test_preader
   PDielec.pdmake.test_singlecrystal
   PDielec.pdmake.test_vibanalysis
   PDielec.pdmake.useLocal
   PDielec.pdmake.viewing


Functions
---------

.. autoapisummary::

   PDielec.pdmake.changePadding
   PDielec.pdmake.checkLocalExecutables
   PDielec.pdmake.compareFiles
   PDielec.pdmake.compareNmaFiles
   PDielec.pdmake.findRootDirectory
   PDielec.pdmake.install
   PDielec.pdmake.main
   PDielec.pdmake.main_checkcsv
   PDielec.pdmake.main_checkexcel
   PDielec.pdmake.main_p2cif
   PDielec.pdmake.main_pdgui
   PDielec.pdmake.main_preader
   PDielec.pdmake.main_vibanalysis
   PDielec.pdmake.mychdir
   PDielec.pdmake.readNmaFile
   PDielec.pdmake.readPdMakefile
   PDielec.pdmake.redirect
   PDielec.pdmake.runClean
   PDielec.pdmake.runP2CifTest
   PDielec.pdmake.runPDGuiTest
   PDielec.pdmake.runPdMakefile
   PDielec.pdmake.runPreaderTest
   PDielec.pdmake.runPyInstaller
   PDielec.pdmake.runPyPi
   PDielec.pdmake.runTests
   PDielec.pdmake.runVibAnalysis
   PDielec.pdmake.testForRootDirectory
   PDielec.pdmake.usage


Module Contents
---------------

.. py:function:: changePadding(all)

   Change the padding based on the maximum length of elements in a list or the predefined setting.

   Parameters
   ----------
   all : list
       A list containing elements whose lengths are to be compared.

   Returns
   -------
   int
       The maximum length found in the list or the predefined padding value, whichever is greater.

   Notes
   -----
   This function assumes the presence of a global dictionary named `settings` with a key 'padding'
   that stores the default padding value. If the maximum length of an element in the list is
   less than 'settings['padding']', the function returns 'settings['padding']'. Otherwise,
   it returns the maximum length found.


.. py:function:: checkLocalExecutables()

   Check to see if the rootDirectory has the executables we need.

   Parameters
   ----------
   rootDirectory : str
       The path to the root directory to check.

   Returns
   -------
   bool
       True if the executables are found, False otherwise.


.. py:function:: compareFiles(file1, file2)

   Compare two text files for differences.

   This function opens and reads two text files line by line and then compares them word by word,
   ignoring certain punctuation marks. If any differences are found in either numeric values
   (floating-point comparison) or text strings, they are counted as errors. Numeric differences
   are considered errors if the relative difference between them is more than 0.0001, provided
   both numbers are not insignificantly small. The total count of such errors is returned.
   Optionally, if the global variable 'debug' is set to True, details of each difference are printed.

   Parameters
   ----------
   file1 : str
       The path to the first file to be compared.
   file2 : str
       The path to the second file to be compared.

   Returns
   -------
   int
       The total number of errors (differences) found.

   Notes
   -----
   - The function makes use of a global variable 'debug' which, if set to True,
     enables printing detailed information about each found difference directly to the console.
   - It's assumed that both files can be opened and read successfully. The function 
     does not explicitly handle I/O errors, such as a file not existing.
   - Special characters '(', ')', '%', '/', and '\' are ignored during the comparison.
   - For numerical comparison, the function employs a relative difference check to
     determine if two numbers should be considered different, taking into account
     floating-point inaccuracies.


.. py:function:: compareNmaFiles(file1, file2)

   Compare two NMA files for differences within a tolerance.

   Parameters
   ----------
   file1 : str
       The path to the first NMA file.
   file2 : str
       The path to the second NMA file.

   Returns
   -------
   int
       The number of differences detected in frequency, redox, and energy 
       values between the two NMA files.

   Notes
   -----
   This function reads two NMA files using the `readNmaFile` function, 
   which returns the frequency (f), redox (r), and energy (e) values 
   for each file. The comparison is done based on a tolerance of 1e-06, 
   and the total number of differences in these values are counted and returned.


.. py:function:: findRootDirectory(start)

   Find the root directory starting from start.

   Parameters
   ----------
   start : str
       The starting directory path.

   Returns
   -------
   str
       The root directory path.


.. py:function:: install(scripts)

   Install a set of scripts into a specified directory.

   Parameters
   ----------
   scripts : str
       The directory where the scripts will be copied to.

   Notes
   -----
   This function copies a predefined list of scripts and directories into 
   the specified `scripts` directory. It utilizes shell commands to perform the 
   copy operation and to create necessary subdirectories. Global variable 
   `rootDirectory` should be set before calling this function as it is used to 
   determine the source directory of the scripts. The installation progress is 
   printed to the console.

   Raises
   ------
   This function does not explicitly raise exceptions, but subprocess.run 
   may raise exceptions related to the execution of shell commands.


.. py:function:: main()

   Main routine to process command line arguments and execute actions.

   This script accepts various command-line arguments to perform different actions such as running tests, benchmarks, cleaning build directories, and installing scripts.

   Command line options
   --------------------
   - `test` or `tests`: Runs all test cases.
   - `test-singlecrystal`: Runs tests for single crystal analysis.
   - `test-preader`: Runs tests for the preader component.
   - `test-p2cif`: Runs tests for the p2cif component.
   - `test-pdgui`: Runs tests for the PDGUI component.
   - `test-vibanalysis`: Runs tests for vibrational analysis.
   - `benchmarks`: Executes benchmark tests.
   - `pypi`: Runs commands for PyPI distribution.
   - `clean`: Cleans up directories.
   - `install`: Installs necessary scripts.
   - `scripts` or `-scripts`: Specifies the directory for scripts (expects a directory path next).
   - `-root` or `--root`: Specifies the root directory to operate in.
   - `-debug` or `--debug` or `-d`: Enables debug mode.
   - `-usesystem`: Use system installed binaries rather than local ones.
   - `-view` or `--view` or `-v`: Enables viewing mode.
   - `-regenerate`: Forces regeneration of test data.
   - `-padding`: Sets padding for some operation (expects an integer value next).
   - `-directory` or `--directory`: Sets the directory for some operation (expects a directory path next).
   - `<filename>.pdmake`: Specifies a PDMakefile to execute.

   Raises
   ------
   SystemExit
       If an invalid command line argument is provided or certain conditions are not met (e.g., invalid root directory, command not executed in the PDielec home directory).

   Notes
   -----
   - It uses global variables for configuration options like `debug`, `viewing`, `settings`, `rootDirectory`, and `useLocal`.
   - Requires the `os`, `sys`, and specific project function imports to function.
   - The script changes the current working directory multiple times, which affects relative path usage.


.. py:function:: main_checkcsv()

   Compares two files line by line to check for significant changes based on a provided threshold.

   This script takes at least two arguments that are file names along with optional arguments for
   separator (`-sep`) and threshold value (`-thresh`). It compares numbers from corresponding lines
   in the two files. A significant change is flagged if the specified comparison formula exceeds
   a given threshold. Defaults to a threshold of 3.0E-2 and treats spaces as the default separator
   for `.txt` and `.out` files, and commas for `.csv` files.

   Parameters
   ----------
   None explicitly declared. The function operates on command-line arguments passed to the script.

   - `-sep` : str, optional
       Defines the separator to be used for splitting entries in a line.
       Default is None, which then defaults to spaces for `.txt` and `.out` files,
       and commas for `.csv` files.
   - `-thresh` : float, optional
       The threshold for flagging a difference between the corresponding numbers
       from the two files as significant. Default is 3.0E-2.

   Returns
   -------
   tuple
       A tuple containing the number of errors found (`nerrors`), the line number with
       the largest percentage difference (`keep_line_number`), the two values with the
       largest difference (`keep_word1` and `keep_word2`), and the maximum percentage
       difference found (`max_percentage_error`).

   Raises
   ------
   FileNotFoundError
       If one of the input files does not exist.

   Notes
   -----
   The command-line arguments need to be parsed using `sys.argv`.
   The comparison formula used is `2*abs(f1-f2)/(f1+f2+2)`.


.. py:function:: main_checkexcel()

   Compare two Excel files for any significant numerical changes and report discrepancies.

   This script takes in two Excel files as arguments and optionally,
   a threshold for numerical comparison and a flag for full sheet comparison.

   Full comparison includes 'Settings' and 'Scenarios' sheets by default excluded.

   Parameters
   ----------
   None directly to the function. Parses command line arguments:
   - Two file paths.
   - Optional `-thresh` followed by a float value for the threshold of numerical difference (default is 1.0E-3).
   - Optional `-f` flag for forcing a full comparison including typically excluded sheets.

   Returns
   -------
   tuple
       A tuple containing the following elements:
       - Number of errors (`nerrors`): int
       - Row of the last error or discrepancy (`row`): int
       - Column of the last error or discrepancy (`col`): int
       - Sheet name where the last error or discrepancy was found (`sheet`): str
       - First file name (`file1`): str
       - Value from the first file associated with the last discrepancy (`value1`): float or str
       - Second file name (`file2`): str
       - Value from the second file associated with the last discrepancy (`value2`): float or str
       - Maximum percentage error found during the comparison (`max_percentage_error`): float

   Raises
   ------
   Depends on the Excel library used, typically:
   - `openpyxl.utils.exceptions.InvalidFileException` if an invalid file or path is provided.
   - Other exceptions related to file I/O or processing might be raised depending on the content and structure of the input Excel files.

   Notes
   -----
   - The script will immediately exit with usage instructions if less than two file paths are provided.
   - Numerical difference is calculated only for numeric data. For text data, a simplified equivalence check is done.
   - The script output includes printing to standard error for usage, errors, or status, with optional ANSI color highlighting.


.. py:function:: main_p2cif()

   Main entry point for processing and converting files.

   This script accepts command-line arguments to define the program used for generating output files, enables debug mode, and processes specified files. If no arguments are provided, it prints usage information. It sorts input files, processes them using a pool of workers equal to the number of logical processors available, and writes the results to standard output.

   Notes
   -----
   Command-line arguments:
   - `-debug`: Enable debug mode for more verbose output.
   - `-program <program>`: Specify the program used to generate the output files. The program must be one of: 'abinit', 'castep', 'crystal', 'gulp', 'phonopy', 'qe', 'vasp', 'experiment', 'auto'. For 'phonopy', a quantum mechanics program must be specified immediately after.
   - Files to process: Specify one or more filenames after the arguments.

   This function uses multiprocessing to parallelize file processing, with the number of processes equal to the physical cores available on the machine.

   Examples
   --------
   Command-line usage examples:

   - Process files in automatic mode:
       ```
       python script_name.py file1 file2 ...
       ```

   - Specify a program and enable debug mode:
       ```
       python script_name.py -debug -program gulp file1 file2 ...
       ```


.. py:function:: main_pdgui()

   Process command line arguments and start a GUI application with optional splash screen.

   No explicit input parameters are taken by the function. Instead, it parses command line arguments (sys.argv) to configure application behavior. The command line arguments can control displaying a splash screen, application debugging, forcibly exiting, or showing the application version.

   Notes
   -----
   - The -nosplash flag disables the splash screen.
   - The -v, -version, or --version flags print the program version and exit.
   - The -exit or --exit flag forces the program to exit immediately after processing arguments.
   - The -d, -debug, or --debug flags enable debug messages.
   - The function looks for a splash image file in several locations, starting with the executable's directory, and displays it if found unless the splash screen is disabled.
   - If the splash screen is shown, it also includes a progress bar.

   Side Effects
   ------------
   - May print the application version and exit if the corresponding flags are detected.
   - May terminate the program execution before initializing the GUI if force_exit is true.
   - Prints debug messages if the debug flag is enabled.
   - Initializes and possibly displays a GUI application, potentially with a splash screen and progress bar.

   Examples
   --------
   Command line usage examples:
   - To run the application with a splash screen and debug messages:

   >>>    pdgui dft_output_file -d

   - To run the application without a splash screen:

   >>>    pdgui dft_output_file -nosplash

   - To print the version of the application and exit:

   >>>    pdgui dft_output_file --version

   - To run a script:

   >>>    pdgui -script script.py


.. py:function:: main_preader()

   Process command line arguments


   ::

       preader -program program [-eckart] [-neutral] [-nocalculation] [-masses average] [-pickle name] [-version] filenames .....
         "program" must be one of "abinit", "castep", "crystal", "gulp"
                  "phonopy", "qe", "vasp", "experiment", "auto"
                  The default is auto, so the program tries to guess the package from
                  the contents of the directory.  However this is not fool-proof!
                  If phonopy is used it must be followed by the QM package
                  in auto mode if the file was created by a phonopy VASP is assumed
         -masses [average|isotope|program]  chooses the atomic mass definition average
                 The default is "average"
         -mass  element mass
                 Change the mass of the element specified
         -eckart projects out the translational components. Default is no projection
         -neutral imposes neutrality on the Born charges of the molecule.
                  Default is no neutrality is imposed
         -nocalculation requests no calculations are performed
                  A single line is output with results obtained by reading the output
                  any of -mass -masses -eckart -neutral or -crystal are ignored
         -debug   to switch on more debug information
         -pickle  write each file reader to a pickled dump file for later processing
                  the name of the file to hold all the pickled readers is given
                  If the file exists it is not overwritten
         -version print the version of PDielec library being used



.. py:function:: main_vibanalysis()

.. py:function:: mychdir(directory)

   Local version of os.chdir with some testing.

   Notes
   -----
   This is a local implementation of os.chdir which includes
   additional testing or functionality tailored to specific needs.


.. py:function:: readNmaFile(file)

   Read and extract data from an NMA file.

   Parameters
   ----------
   file : str
       The path to the NMA file to be read.

   Returns
   -------
   tuple
       A tuple containing three elements:
       - The sum of all frequencies excluding the first three.
       - The sum of all R squared values excluding the first three.
       - The sum of all explained variance values excluding the first three.

   Notes
   -----
   This function reads an NMA (Normal Mode Analysis) file, looking for lines that contain
   'Mode', 'R**2', or 'Explained'. For lines starting with 'Mode', it extracts the
   frequency values, excluding the first three modes which are typically zero or negligible.
   For 'R**2' and 'Explained' lines, it extracts their respective values under the same conditions.
   All extracted values are then summed up and returned.

   Raises
   ------
   FileNotFoundError
       If the file specified by the 'file' parameter does not exist.


.. py:function:: readPdMakefile(directory, filename)

   Read a custom makefile and return the title and instructions.

   Parameters
   ----------
   directory : str
       The directory in which the makefile is located. If the directory name is
       provided and the `settings['title']` is not 'title', the directory name is used as the title.
       If the directory is not provided (empty string), the current working directory is used as the title.
   filename : str
       The name of the makefile to be read.

   Returns
   -------
   tuple
       A tuple returning a dictionary of instructions
       - title (str): The title for the makefile, determined based on the `settings['title']` value or the directory name, or the current working directory.
       - instructions (dict): A dictionary where each key is an instruction extracted from the makefile, and the value is a list of arguments for that instruction.

   Raises
   ------
   FileNotFoundError
       If the specified file cannot be found or read.

   Notes
   -----
   - This function uses two global variables:
       - `settings`: A dictionary that contains various settings, including 'title' and 'padding'.
         'title' is used to determine if the title should be extracted from the makefile's first line,
         and 'padding' determines how much padding the title should have when displayed.
       - `debug`: A boolean flag used to control debugging output. If `True`, additional information
         about the function's operation will be printed to the standard output.

   - The function removes line continuation characters and treats the continued lines as a single line.

   - Lines starting with `#` are treated as comments and ignored.

   - It's assumed that `os` module has been imported for `os.getcwd()` to work, though it is not explicitly
     stated in the function definition.


.. py:function:: redirect(file)

   Redirect the standard output to a specified file.

   This function is a context manager that redirects `sys.stdout` to a file,
   optionally suppressing stderr output if not in debug mode. It is useful for
   capturing the output of a block of code to a file.

   Parameters
   ----------
   file : str
       The path to the file where the stdout will be redirected.

   Yields
   ------
   _io.TextIOWrapper
       A writable stream associated with the log file.

   Notes
   -----
   `sys.stderr` is redirected to `os.devnull` if `debug` is `False`, effectively
   suppressing any error messages unless in debug mode. Ensure that debug status is
   properly set before using this context manager.

   Upon exiting the `with` block, stdout and stderr are restored to their original
   state.

   Raises
   ------
   AttributeError
       If an attribute not supported by the `sys.stdout` is being accessed through
       the Logger class.


.. py:function:: runClean()

   Clean old results from the Examples directory.

   This function navigates to the root directory and removes specific file types related to old results. Supported file types for deletion include .xlsx, .csv, .cif, and .nma files. This operation is not supported on Windows platforms and will return immediately if attempted.

   Notes
   -----
   - The function checks the operating system and will not execute on Windows systems (`os.name == 'nt'`).
   - It navigates to a directory specified by a global variable `rootDirectory`.
   - Uses `subprocess.run` with `shell=True` to execute shell commands for deleting files. This operation involves running `find` commands to locate and remove files with specified extensions.
   - It assumes that the `rootDirectory` global variable and necessary imports (`os`, `subprocess`) are correctly defined elsewhere.

   Raises
   ------
   None


.. py:function:: runP2CifTest(title, instructions, regenerate)

   Run a test on p2cif.

   Parameters
   ----------
   title : str
       The title of the test
   instructions : str
       The command line parameters.
   regenerate : bool
       Set to True if the reference file is overwritten.


.. py:function:: runPDGuiTest(title, instructions, regenerate, benchmarks=False)

   Run a pdgui test.

   Parameters
   ----------
   title : str
       The title of the test
   instructions : str
       The command line parameters.
   regenerate : bool
       Set to true if the reference file is overwritten.


.. py:function:: runPdMakefile(directory, pdmakefile, regenerate, benchmarks=False)

   Run a specific pdMakefile.

   Parameters
   ----------
   directory : str
       Directory where the pdmakefile will be run
   pdmakefile : str
       Name of the pdmakefile
   regenerate : bool
       True if this is a regeneration of data
   benchmarks : bool (Option default is false)
       True if this is a benchmark

   Notes
   -----
   The routine reads the pdmakefile and determines the type of pdmakefile and the instructions
   Then the instructions are processed according to the context (preader, pdgui, p2cif or vibanalysis)


.. py:function:: runPreaderTest(title, instructions, regenerate)

   Run a preader test.

   Parameters
   ----------
   title : str
       The title of the test
   instructions : str
       The command line parameters.
   regenerate : bool, optional
       Set to true if the reference file is overwritten. Default is False.


.. py:function:: runPyInstaller()

   Runs the PyInstaller command with specified options and handles platform specific adjustments.

   This function attempts to create a standalone application using PyInstaller based on a given spec file. It also performs additional copying steps required for the application to run properly. If executed on a Windows platform, the function will halt and inform the user about the incompatibility.


.. py:function:: runPyPi()

   Creates PyPi distribution files, restricted by OS.

   This function changes the current working directory to `rootDirectory` 
   and runs a series of shell commands that clean up previous distribution files and 
   create new PyPi distribution files. The function is not designed to run on Windows OS.


.. py:function:: runTests(testlist, testType, regenerate)

   Run the tests given in the directories stored in testlist.

   Parameters
   ----------
   testlist : list of str
       The directories where the tests are stored.
   testType : {'pdgui', 'preader', 'p2cif', 'benchmark'}
       The type of tests to run.
   regenerate : bool
       If True, the test data will be regenerated.


.. py:function:: runVibAnalysis(title, instructions, regenerate)

   Run a vibanalysis test.

   Parameters
   ----------
   title : str
       The title of the test
   instructions : str
       The command line parameters.
   regenerate : bool
       Set to True if the reference file is overwritten.


.. py:function:: testForRootDirectory(path)

   Test if a given path contains a subdirectory named 'Examples'.

   This function checks if the given path has a direct subdirectory
   called 'Examples' and returns a boolean indicating the result.

   Parameters
   ----------
   path : str
       The directory path to test for the existence of a 'Examples' subdirectory.

   Returns
   -------
   bool
       Returns True if the 'Examples' subdirectory exists within the given path,
       otherwise returns False.


.. py:function:: usage()

   Print usage instructions for the command line tool.

   This function outputs instructions to `sys.stderr` for using the command line tool, including available commands and options. It also handles platform-specific instructions for Linux systems.

   SystemExit
       This function will terminate the program after displaying the usage message.


.. py:data:: benchmarks
   :value: ['Castep/AsparticAcid', 'Castep/Isoleucine', 'Castep/MgO', 'Castep/Bubbles', 'Castep/Na2SO42',...


.. py:data:: debug
   :value: False


.. py:data:: print

.. py:data:: settings

.. py:data:: test_p2cif
   :value: ['P2Cif/']


.. py:data:: test_pdgui
   :value: ['ATR/AlAs', 'ATR/Na2SO42', 'ATR/Na2SO42_fit', 'AbInit/AlAs', 'AbInit/BaTiO3',...


.. py:data:: test_preader
   :value: ['Castep/preader', 'Vasp/preader', 'Phonopy/preader', 'Gulp/preader', 'Crystal/preader',...


.. py:data:: test_singlecrystal
   :value: ['Experiment/fpsq', 'Experiment/Mayerhofer', 'SingleCrystal/Bi2Se3',...


.. py:data:: test_vibanalysis
   :value: ['VibAnalysis/AsparticAcid', 'VibAnalysis/BaTiO3', 'VibAnalysis/Cocaine',...


.. py:data:: useLocal
   :value: True


.. py:data:: viewing
   :value: False


